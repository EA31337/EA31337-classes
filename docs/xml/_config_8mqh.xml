<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_config_8mqh" kind="file" language="C++">
    <compoundname>Config.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@file</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Implements<sp/>class<sp/>for<sp/>storing,<sp/>importing<sp/>and<sp/>exporting<sp/>configuration.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Prevents<sp/>processing<sp/>this<sp/>includes<sp/>file<sp/>for<sp/>the<sp/>second<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CONFIG_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CONFIG_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;DictStruct.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;File.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Object.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">enum<sp/>CONFIG_FORMAT<sp/>{<sp/>CONFIG_FORMAT_JSON,<sp/>CONFIG_FORMAT_JSON_NO_WHITESPACES,<sp/>CONFIG_FORMAT_INI<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">string<sp/>ToJSON(const<sp/>MqlParam&amp;<sp/>param,<sp/>bool,<sp/>int)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>switch<sp/>(param.type)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>TYPE_BOOL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>boolean</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Serializer::ValueToString((bool)param.integer_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>TYPE_INT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Serializer::ValueToString((int)param.integer_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>TYPE_DOUBLE:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>TYPE_FLOAT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Serializer::ValueToString(param.double_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>TYPE_CHAR:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>TYPE_STRING:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Serializer::ValueToString(param.string_value,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>case<sp/>TYPE_DATETIME:</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Serializer::ValueToString(TimeToString(param.integer_value),<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Serializer::ValueToString(TimeToStr(param.integer_value),<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>&quot;\&quot;Unsupported<sp/>MqlParam.ToJSON<sp/>type:<sp/>\&quot;&quot;<sp/>+<sp/>IntegerToString(param.type)<sp/>+<sp/>&quot;\&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>X&gt;</highlight></codeline>
<codeline><highlight class="normal">MqlParam<sp/>MakeParam(X&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>MqlParam(value);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Structs.</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>ConfigEntry<sp/>:<sp/>public<sp/>MqlParam<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetProperty(string<sp/>key,<sp/>SerializerNodeParam*<sp/>value,<sp/>SerializerNode*<sp/>node<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print(&quot;Setting<sp/>config<sp/>entry<sp/>property<sp/>\&quot;&quot;<sp/>+<sp/>key<sp/>+<sp/>&quot;\&quot;<sp/>=<sp/>\&quot;&quot;<sp/>+<sp/>value.AsString()<sp/>+<sp/>&quot;\&quot;<sp/>for<sp/>object&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>operator==(const<sp/>ConfigEntry&amp;<sp/>_s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>type<sp/>==<sp/>_s.type<sp/>&amp;&amp;<sp/>double_value<sp/>==<sp/>_s.double_value<sp/>&amp;&amp;<sp/>integer_value<sp/>==<sp/>_s.integer_value<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_value<sp/>==<sp/>_s.string_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>SerializerNodeType<sp/>Serialize(Serializer&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s.PassEnum(this,<sp/>&quot;type&quot;,<sp/>type,<sp/>SERIALIZER_FIELD_FLAG_HIDDEN);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>aux_string;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(type)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_BOOL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_UCHAR:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_CHAR:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_USHORT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_SHORT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_UINT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_INT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_ULONG:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_LONG:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Pass(this,<sp/>&quot;value&quot;,<sp/>integer_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_DOUBLE:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Pass(this,<sp/>&quot;value&quot;,<sp/>double_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_STRING:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Pass(this,<sp/>&quot;value&quot;,<sp/>string_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TYPE_DATETIME:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(s.IsWriting())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aux_string<sp/>=<sp/>TimeToString(integer_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Pass(this,<sp/>&quot;value&quot;,<sp/>aux_string);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Pass(this,<sp/>&quot;value&quot;,<sp/>aux_string);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integer_value<sp/>=<sp/>StringToTime(aux_string);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Unknown<sp/>type.<sp/>Serializing<sp/>anyway.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Pass(this,<sp/>&quot;value&quot;,<sp/>aux_string);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SerializerNodeObject;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Initializes<sp/>object<sp/>with<sp/>given<sp/>number<sp/>of<sp/>elements.<sp/>Could<sp/>be<sp/>skipped<sp/>for<sp/>non-containers.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SerializeStub(int<sp/>_n1<sp/>=<sp/>1,<sp/>int<sp/>_n2<sp/>=<sp/>1,<sp/>int<sp/>_n3<sp/>=<sp/>1,<sp/>int<sp/>_n4<sp/>=<sp/>1,<sp/>int<sp/>_n5<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>TYPE_INT;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>integer_value<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Config<sp/>:<sp/>public<sp/>DictStruct&lt;string,<sp/>ConfigEntry&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>File*<sp/>file;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Config(bool<sp/>_use_file<sp/>=<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_use_file)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>=<sp/>new<sp/>File();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Copy<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Config(const<sp/>Config&amp;<sp/>r)<sp/>:<sp/>DictStruct&lt;string,<sp/>ConfigEntry&gt;(r)<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Set(string<sp/>key,<sp/>bool<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigEntry<sp/>param<sp/>=<sp/>{TYPE_BOOL,<sp/>0,<sp/>0,<sp/>&quot;&quot;};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>param.integer_value<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Set(key,<sp/>param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Set(string<sp/>key,<sp/>int<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigEntry<sp/>param<sp/>=<sp/>{TYPE_INT,<sp/>0,<sp/>0,<sp/>&quot;&quot;};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>param.integer_value<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Set(key,<sp/>param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Set(string<sp/>key,<sp/>long<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigEntry<sp/>param<sp/>=<sp/>{TYPE_LONG,<sp/>0,<sp/>0,<sp/>&quot;&quot;};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>param.integer_value<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Set(key,<sp/>param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Set(string<sp/>key,<sp/>double<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigEntry<sp/>param<sp/>=<sp/>{TYPE_DOUBLE,<sp/>0,<sp/>0,<sp/>&quot;&quot;};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>param.double_value<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Set(key,<sp/>param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Set(string<sp/>key,<sp/>string<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigEntry<sp/>param<sp/>=<sp/>{TYPE_STRING,<sp/>0,<sp/>0,<sp/>&quot;&quot;};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>param.string_value<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Set(key,<sp/>param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Set(string<sp/>key,<sp/>datetime<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigEntry<sp/>param<sp/>=<sp/>{TYPE_DATETIME,<sp/>0,<sp/>0,<sp/>&quot;&quot;};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>param.integer_value<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Set(key,<sp/>param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Set(string<sp/>key,<sp/>ConfigEntry&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>((DictStruct&lt;string,<sp/>ConfigEntry&gt;*)GetPointer(this)).Set(key,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>File<sp/>methods<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>K,<sp/>typename<sp/>V&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>SetProperty(DictStruct&lt;K,<sp/>V&gt;&amp;<sp/>obj,<sp/>string<sp/>key,<sp/>SerializerNodeParam*<sp/>value,<sp/>SerializerNode*<sp/>node<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print(&quot;Setting<sp/>struct<sp/>property<sp/>\&quot;&quot;<sp/>+<sp/>key<sp/>+<sp/>&quot;\&quot;<sp/>=<sp/>\&quot;&quot;<sp/>+<sp/>value.AsString()<sp/>+<sp/>&quot;\&quot;<sp/>for<sp/>object&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Loads<sp/>config<sp/>from<sp/>the<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>C&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>LoadFromFile(string<sp/>path)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>data<sp/>=<sp/>File::ReadFile(path);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SerializerConverter::FromString&lt;C&gt;(data).ToObject(this);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Save<sp/>config<sp/>into<sp/>the<sp/>file.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>C&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>SaveToFile(string<sp/>path,<sp/>unsigned<sp/>int<sp/>serializer_flags<sp/>=<sp/>0,<sp/>unsigned<sp/>int<sp/>stringify_flags<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>aux_target_arg<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>data<sp/>=<sp/>SerializerConverter::FromObject(this,<sp/>serializer_flags).ToString&lt;C&gt;(stringify_flags,<sp/>aux_target_arg);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>File::SaveFile(path,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Initializes<sp/>object<sp/>with<sp/>given<sp/>number<sp/>of<sp/>elements.<sp/>Could<sp/>be<sp/>skipped<sp/>for<sp/>non-containers.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SerializeStub(int<sp/>_n1<sp/>=<sp/>1,<sp/>int<sp/>_n2<sp/>=<sp/>1,<sp/>int<sp/>_n3<sp/>=<sp/>1,<sp/>int<sp/>_n4<sp/>=<sp/>1,<sp/>int<sp/>_n5<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>SetMode(DictModeDict);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_n1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ConfigEntry<sp/>_child;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_child.SerializeStub(_n2,<sp/>_n3,<sp/>_n4,<sp/>_n5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Set(IntegerToString(i),<sp/>_child);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>config<sp/>in<sp/>plain<sp/>format.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>ToINI()<sp/>{<sp/>return<sp/>&quot;Ini<sp/>file&quot;;<sp/>}<sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/><sp/>//<sp/>CONFIG_MQH</highlight></codeline>
    </programlisting>
    <location file="Config.mqh"/>
  </compounddef>
</doxygen>
