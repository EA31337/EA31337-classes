<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_draw_8mqh" kind="file" language="C++">
    <compoundname>Draw.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@file</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Group<sp/>of<sp/>functions<sp/>intended<sp/>for<sp/>working<sp/>with<sp/>graphic<sp/>objects<sp/>relating<sp/>to<sp/>any<sp/>specified<sp/>chart.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Class<sp/>dependencies.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Chart;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Draw;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Chart.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>macros<sp/>(for<sp/>MQL4<sp/>backward<sp/>compatibility).</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SetIndexArrow(_index,<sp/>_value)<sp/>(PlotIndexSetInteger(_index,<sp/>PLOT_ARROW,<sp/>_value))</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SetIndexDrawBegin(_index,<sp/>_value)<sp/>(PlotIndexSetInteger(_index,<sp/>PLOT_DRAW_BEGIN,<sp/>_value))</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SetIndexEmptyValue(_index,<sp/>_value)<sp/>(PlotIndexSetDouble(_index,<sp/>PLOT_EMPTY_VALUE,<sp/>_value))</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SetIndexShift(_index,<sp/>_value)<sp/>(PlotIndexSetInteger(_index,<sp/>PLOT_SHIFT,<sp/>_value))</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>global<sp/>functions<sp/>(for<sp/>MQL4<sp/>backward<sp/>compatibility).</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>ObjectCreate(string<sp/>_name,<sp/>ENUM_OBJECT<sp/>_otype,<sp/>int<sp/>_swindow,<sp/>datetime<sp/>_t1,<sp/>double<sp/>_p1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Draw::ObjectCreate(0,<sp/>_name,<sp/>_otype,<sp/>_swindow,<sp/>_t1,<sp/>_p1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>ObjectDelete(string<sp/>_name)<sp/>{<sp/>return<sp/>Draw::ObjectDelete(_name);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>ObjectSet(string<sp/>_name,<sp/>int<sp/>_prop_id,<sp/>double<sp/>_value)<sp/>{<sp/>return<sp/>Draw::ObjectSet(_name,<sp/>_prop_id,<sp/>_value);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">int<sp/>ObjectsTotal(int<sp/>_type<sp/>=<sp/>EMPTY)<sp/>{<sp/>return<sp/>Draw::ObjectsTotal();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">string<sp/>ObjectName(int<sp/>_index)<sp/>{<sp/>return<sp/>Draw::ObjectName(_index);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>SetIndexLabel(int<sp/>_index,<sp/>string<sp/>_text)<sp/>{<sp/>Draw::SetIndexLabel(_index,<sp/>_text);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>SetIndexStyle(int<sp/>_index,<sp/>int<sp/>_type,<sp/>int<sp/>_style<sp/>=<sp/>EMPTY,<sp/>int<sp/>_width<sp/>=<sp/>EMPTY,<sp/>color<sp/>_clr<sp/>=<sp/>CLR_NONE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Draw::SetIndexStyle(_index,<sp/>_type,<sp/>_style,<sp/>_width,<sp/>_clr);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>WINDOW_MAIN<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_TIME1<sp/>((ENUM_OBJECT_PROPERTY_INTEGER)0)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_PRICE1<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_TIME2<sp/>2</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_PRICE2<sp/>3</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_TIME3<sp/>4</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_PRICE3<sp/>5</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_COLOR<sp/>((ENUM_OBJECT_PROPERTY_INTEGER)6)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_STYLE<sp/>7</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_WIDTH<sp/>8</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_BACK<sp/>((ENUM_OBJECT_PROPERTY_INTEGER)9)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OBJPROP_FIBOLEVELS<sp/>200</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Class<sp/>to<sp/>provide<sp/>drawing<sp/>methods<sp/>working<sp/>with<sp/>graphic<sp/>objects.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Draw<sp/>:<sp/>public<sp/>Chart<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>long<sp/>chart_id;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Class<sp/>variables.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Draw(long<sp/>_chart_id<sp/>=<sp/>0)<sp/>:<sp/>chart_id(_chart_id<sp/>!=<sp/>0<sp/>?<sp/>_chart_id<sp/>:<sp/>ChartID())<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Graphic<sp/>object<sp/>related<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>the<sp/>corresponding<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Name<sp/>of<sp/>the<sp/>object<sp/>is<sp/>returned<sp/>in<sp/>case<sp/>of<sp/>success.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ObjectName(long<sp/>_chart_id,<sp/>int<sp/>_pos,<sp/>int<sp/>_sub_window<sp/>=<sp/>-1,<sp/>int<sp/>_type<sp/>=<sp/>-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectName(_chart_id,<sp/>_pos,<sp/>_sub_window,<sp/>_type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ObjectName(int<sp/>_index)<sp/>{<sp/>return<sp/>Draw::ObjectName(0,<sp/>_index);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>objects<sp/>in<sp/>the<sp/>specified<sp/>chart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>specified<sp/>subwindow,<sp/>of<sp/>the<sp/>specified<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>The<sp/>number<sp/>of<sp/>objects.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>ObjectsTotal(long<sp/>chart_id,<sp/>int<sp/>type<sp/>=<sp/>EMPTY,<sp/>int<sp/>window<sp/>=<sp/>-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectsTotal(chart_id,<sp/>window,<sp/>type);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectsTotal(chart_id,<sp/>window,<sp/>type);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>ObjectsTotal()<sp/>{<sp/>return<sp/>Draw::ObjectsTotal(0);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Setters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>drawing<sp/>line<sp/>description<sp/>for<sp/>showing<sp/>in<sp/>the<sp/>DataWindow<sp/>and<sp/>in<sp/>the<sp/>tooltip.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>If<sp/>successful,<sp/>returns<sp/>true,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>SetIndexLabel(int<sp/>index,<sp/>string<sp/>text)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://docs.mql4.com/customind/setindexlabel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::SetIndexLabel(index,<sp/>text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://www.mql5.com/en/docs/customind/plotindexsetstring</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>PlotIndexSetString(index,<sp/>PLOT_LABEL,<sp/>text);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>the<sp/>new<sp/>type,<sp/>style,<sp/>width<sp/>and<sp/>color<sp/>for<sp/>a<sp/>given<sp/>indicator<sp/>line.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>SetIndexStyle(int<sp/>index,<sp/>int<sp/>type,<sp/>int<sp/>style<sp/>=<sp/>EMPTY,<sp/>int<sp/>width<sp/>=<sp/>EMPTY,<sp/>color<sp/>clr<sp/>=<sp/>CLR_NONE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://docs.mql4.com/customind/setindexstyle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::SetIndexStyle(index,<sp/>type,<sp/>style,<sp/>width,<sp/>clr);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(width<sp/>!=<sp/>EMPTY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PlotIndexSetInteger(index,<sp/>PLOT_LINE_WIDTH,<sp/>width);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(clr<sp/>!=<sp/>CLR_NONE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PlotIndexSetInteger(index,<sp/>PLOT_LINE_COLOR,<sp/>clr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PlotIndexSetInteger(index,<sp/>PLOT_DRAW_TYPE,<sp/>type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PlotIndexSetInteger(index,<sp/>PLOT_LINE_STYLE,<sp/>style);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Changes<sp/>the<sp/>value<sp/>of<sp/>the<sp/>specified<sp/>object<sp/>property.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/objects/objectset</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/objectconstants/enum_object_property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>ObjectSet(string<sp/>name,<sp/>int<sp/>prop_id,<sp/>double<sp/>prop_value,<sp/>long<sp/>chart_id<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectSet(name,<sp/>prop_id,<sp/>prop_value);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(prop_id)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Datetime<sp/>value<sp/>to<sp/>set/get<sp/>first<sp/>coordinate<sp/>time<sp/>part.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_TIME1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetInteger(chart_id,<sp/>name,<sp/>OBJPROP_TIME,<sp/>(long)prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Datetime<sp/>value<sp/>to<sp/>set/get<sp/>second<sp/>coordinate<sp/>time<sp/>part.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_TIME2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetInteger(chart_id,<sp/>name,<sp/>OBJPROP_TIME,<sp/>1,<sp/>(long)prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Datetime<sp/>value<sp/>to<sp/>set/get<sp/>third<sp/>coordinate<sp/>time<sp/>part.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_TIME3:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetInteger(chart_id,<sp/>name,<sp/>OBJPROP_TIME,<sp/>2,<sp/>(long)prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Double<sp/>value<sp/>to<sp/>set/get<sp/>first<sp/>coordinate<sp/>price<sp/>part.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_PRICE1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetDouble(chart_id,<sp/>name,<sp/>OBJPROP_PRICE,<sp/>(double)prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Double<sp/>value<sp/>to<sp/>set/get<sp/>second<sp/>coordinate<sp/>price<sp/>part.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_PRICE2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetDouble(chart_id,<sp/>name,<sp/>OBJPROP_PRICE,<sp/>1,<sp/>prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Double<sp/>value<sp/>to<sp/>set/get<sp/>third<sp/>coordinate<sp/>price<sp/>part.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_PRICE3:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetDouble(chart_id,<sp/>name,<sp/>OBJPROP_PRICE,<sp/>2,<sp/>prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_ANGLE:<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Double<sp/>value<sp/>to<sp/>set/get<sp/>angle<sp/>object<sp/>property<sp/>in<sp/>degrees.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_DEVIATION:<sp/><sp/>//<sp/>Double<sp/>value<sp/>to<sp/>set/get<sp/>deviation<sp/>property<sp/>for<sp/>Standard<sp/>deviation<sp/>objects.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_SCALE:<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Double<sp/>value<sp/>to<sp/>set/get<sp/>scale<sp/>object<sp/>property.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetDouble(chart_id,<sp/>name,<sp/>(ENUM_OBJECT_PROPERTY_DOUBLE)prop_id,<sp/>(double)prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_RAY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Boolean<sp/>value<sp/>to<sp/>set/get<sp/>ray<sp/>flag<sp/>of<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetInteger(chart_id,<sp/>name,<sp/>OBJPROP_RAY_RIGHT,<sp/>(long)prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_FIBOLEVELS:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Integer<sp/>value<sp/>to<sp/>set/get<sp/>Fibonacci<sp/>object<sp/>level<sp/>count.<sp/>Can<sp/>be<sp/>from<sp/>0<sp/>to<sp/>32.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetInteger(chart_id,<sp/>name,<sp/>OBJPROP_LEVELS,<sp/>(long)prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_ARROWCODE:<sp/><sp/><sp/>//<sp/>Arrow<sp/>code<sp/>for<sp/>the<sp/>Arrow<sp/>object<sp/>(char).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_BACK:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Boolean<sp/>value<sp/>to<sp/>set/get<sp/>background<sp/>drawing<sp/>flag<sp/>for<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_COLOR:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Color<sp/>value<sp/>to<sp/>set/get<sp/>object<sp/>color.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_CORNER:<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>corner<sp/>of<sp/>the<sp/>chart<sp/>to<sp/>link<sp/>a<sp/>graphical<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_ELLIPSE:<sp/><sp/><sp/><sp/><sp/>//<sp/>Boolean<sp/>value<sp/>to<sp/>set/get<sp/>ellipse<sp/>flag<sp/>for<sp/>fibo<sp/>arcs.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_FONTSIZE:<sp/><sp/><sp/><sp/>//<sp/>Font<sp/>size<sp/>(int).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_LEVELCOLOR:<sp/><sp/>//<sp/>Color<sp/>of<sp/>the<sp/>line-level<sp/>(color).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_LEVELSTYLE:<sp/><sp/>//<sp/>Style<sp/>of<sp/>the<sp/>line-level<sp/>(ENUM_LINE_STYLE).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_LEVELWIDTH:<sp/><sp/>//<sp/>Thickness<sp/>of<sp/>the<sp/>line-level<sp/>(int).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_STYLE:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Value<sp/>is<sp/>one<sp/>of<sp/>the<sp/>constants<sp/>to<sp/>set/get<sp/>object<sp/>line<sp/>style.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_TIMEFRAMES:<sp/><sp/>//<sp/>Visibility<sp/>of<sp/>an<sp/>object<sp/>at<sp/>timeframes<sp/>(flags).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_WIDTH:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Integer<sp/>value<sp/>to<sp/>set/get<sp/>object<sp/>line<sp/>width.<sp/>Can<sp/>be<sp/>from<sp/>1<sp/>to<sp/>5.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_XDISTANCE:<sp/><sp/><sp/>//<sp/>The<sp/>distance<sp/>in<sp/>pixels<sp/>along<sp/>the<sp/>X<sp/>axis<sp/>from<sp/>the<sp/>binding<sp/>corner<sp/>(int).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OBJPROP_YDISTANCE:<sp/><sp/><sp/>//<sp/>The<sp/>distance<sp/>in<sp/>pixels<sp/>along<sp/>the<sp/>Y<sp/>axis<sp/>from<sp/>the<sp/>binding<sp/>corner<sp/>(int).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ObjectSetInteger(chart_id,<sp/>name,<sp/>(ENUM_OBJECT_PROPERTY_INTEGER)prop_id,<sp/>(long)prop_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(false);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Object<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Creates<sp/>an<sp/>object<sp/>with<sp/>the<sp/>specified<sp/>name,<sp/>type,<sp/>and<sp/>the<sp/>initial<sp/>coordinates.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>ObjectCreate(long<sp/>_cid,<sp/>string<sp/>_name,<sp/>ENUM_OBJECT<sp/>_otype,<sp/>int<sp/>_swindow,<sp/>datetime<sp/>_t1,<sp/>double<sp/>_p1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://docs.mql4.com/objects/objectcreate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectCreate(_name,<sp/>_otype,<sp/>_swindow,<sp/>_t1,<sp/>_p1);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://www.mql5.com/en/docs/objects/objectcreate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectCreate(_cid,<sp/>_name,<sp/>_otype,<sp/>_swindow,<sp/>_t1,<sp/>_p1);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>ObjectCreate(long<sp/>_cid,<sp/>string<sp/>_name,<sp/>ENUM_OBJECT<sp/>_otype,<sp/>int<sp/>_swindow,<sp/>datetime<sp/>_t1,<sp/>double<sp/>_p1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datetime<sp/>_t2,<sp/>double<sp/>_p2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://docs.mql4.com/objects/objectcreate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectCreate(_name,<sp/>_otype,<sp/>_swindow,<sp/>_t1,<sp/>_p1,<sp/>_t2,<sp/>_p2);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://www.mql5.com/en/docs/objects/objectcreate</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectCreate(_cid,<sp/>_name,<sp/>_otype,<sp/>_swindow,<sp/>_t1,<sp/>_p1,<sp/>_t2,<sp/>_p2);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Moves<sp/>an<sp/>object<sp/>coordinate<sp/>in<sp/>the<sp/>chart.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ObjectMove(string<sp/>name,<sp/>int<sp/>point,<sp/>datetime<sp/>time1,<sp/>double<sp/>price1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectMove(name,<sp/>point,<sp/>time1,<sp/>price1);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectMove(chart_id,<sp/>name,<sp/>point,<sp/>time1,<sp/>price1);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Deletes<sp/>object<sp/>via<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>ObjectDelete(long<sp/>chart_id,<sp/>string<sp/>name)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://docs.mql4.com/objects/objectdelete</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectDelete(name);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://www.mql5.com/en/docs/objects/objectdelete</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ObjectDelete(chart_id,<sp/>name);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>ObjectDelete(string<sp/>name)<sp/>{<sp/>return<sp/>Draw::ObjectDelete(0,<sp/>name);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Draw<sp/>a<sp/>vertical<sp/>line.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>DrawVLine(string<sp/>oname,<sp/>datetime<sp/>tm)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>result<sp/>=<sp/>Draw::ObjectCreate(NULL,<sp/>oname,<sp/>OBJ_VLINE,<sp/>0,<sp/>tm,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!result)<sp/>PrintFormat(&quot;%():<sp/>Can&apos;t<sp/>create<sp/>vertical<sp/>line!<sp/>code<sp/>#&quot;,<sp/>__FUNCTION__,<sp/>GetLastError());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Draw<sp/>a<sp/>horizontal<sp/>line.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>DrawHLine(string<sp/>oname,<sp/>double<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>result<sp/>=<sp/>Draw::ObjectCreate(NULL,<sp/>oname,<sp/>OBJ_HLINE,<sp/>0,<sp/>0,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!result)<sp/>PrintFormat(&quot;%():<sp/>Can&apos;t<sp/>create<sp/>horizontal<sp/>line!<sp/>code<sp/>#&quot;,<sp/>__FUNCTION__,<sp/>GetLastError());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Delete<sp/>a<sp/>vertical<sp/>line.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>DeleteVertLine(string<sp/>oname)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>result<sp/>=<sp/>Draw::ObjectDelete(NULL,<sp/>oname);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!result)<sp/>PrintFormat(&quot;%():<sp/>Can&apos;t<sp/>delete<sp/>vertical<sp/>line!<sp/>code<sp/>#&quot;,<sp/>__FUNCTION__,<sp/>GetLastError());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Draw<sp/>a<sp/>line<sp/>given<sp/>the<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>ShowLine(string<sp/>oname,<sp/>double<sp/>price,<sp/>int<sp/>colour<sp/>=<sp/>Yellow)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Draw::ObjectCreate(chart_id,<sp/>oname,<sp/>OBJ_HLINE,<sp/>0,<sp/>GetBarTime(),<sp/>price);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Draw::ObjectSet(oname,<sp/>OBJPROP_COLOR,<sp/>colour);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Draw::ObjectMove(oname,<sp/>0,<sp/>GetBarTime(),<sp/>price);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Draw<sp/>a<sp/>trend<sp/>line.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>TLine(string<sp/>name,<sp/>double<sp/>p1,<sp/>double<sp/>p2,<sp/>datetime<sp/>d1,<sp/>datetime<sp/>d2,<sp/>color<sp/>clr<sp/>=<sp/>clrYellow,<sp/>bool<sp/>ray<sp/>=<sp/>false,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>window<sp/>=<sp/>WINDOW_MAIN)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ObjectFind(chart_id,<sp/>name)<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>Draw::ObjectMove(name,<sp/>0,<sp/>d1,<sp/>p1))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Draw::ObjectMove(name,<sp/>1,<sp/>d2,<sp/>p2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(!Draw::ObjectCreate(chart_id,<sp/>name,<sp/>OBJ_TREND,<sp/>window,<sp/>d1,<sp/>p1,<sp/>d2,<sp/>p2))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>In<sp/>case<sp/>of<sp/>error,<sp/>check<sp/>the<sp/>message<sp/>by<sp/>GetLastError().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(GetLastError()<sp/>==<sp/>4206)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>No<sp/>specified<sp/>subwindow.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResetLastError();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!Draw::ObjectSet(name,<sp/>OBJPROP_RAY,<sp/>ray))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(clr<sp/>&amp;&amp;<sp/>!Draw::ObjectSet(name,<sp/>OBJPROP_COLOR,<sp/>clr))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ResetLastError();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="Draw.mqh"/>
  </compounddef>
</doxygen>
