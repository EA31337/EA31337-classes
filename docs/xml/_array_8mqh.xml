<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_array_8mqh" kind="file" language="C++">
    <compoundname>Array.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Prevents<sp/>processing<sp/>this<sp/>includes<sp/>file<sp/>for<sp/>the<sp/>second<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>ARRAY_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ARRAY_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Defines.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>MODE_ASCEND</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_ASCEND<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>MODE_DESCEND</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_DESCEND<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Other<sp/>constants.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>@see<sp/>https://docs.mql4.com/constants/namedconstants/otherconstants</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>WHOLE_ARRAY</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Indicates<sp/>that<sp/>all<sp/>array<sp/>elements<sp/>will<sp/>be<sp/>processed.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>WHOLE_ARRAY<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;String.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Class<sp/>to<sp/>provide<sp/>methods<sp/>to<sp/>deal<sp/>with<sp/>arrays.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Array<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Finds<sp/>the<sp/>median<sp/>value<sp/>in<sp/>the<sp/>array<sp/>of<sp/>any<sp/>numeric<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>T<sp/>Median(T<sp/>&amp;_arr[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>_size<sp/>=<sp/>ArraySize(_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArraySort(_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_arr[_size<sp/>/<sp/>2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Finds<sp/>the<sp/>highest<sp/>value<sp/>in<sp/>the<sp/>array<sp/>of<sp/>any<sp/>numeric<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>T<sp/>Sum(T<sp/>&amp;_arr[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>_size<sp/>=<sp/>ArraySize(_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>_sum<sp/>=<sp/>_arr[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_sum<sp/>+=<sp/>_arr[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_sum;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Finds<sp/>the<sp/>highest<sp/>value<sp/>in<sp/>the<sp/>array<sp/>of<sp/>any<sp/>numeric<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>T<sp/>Max(T<sp/>&amp;_arr[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>_size<sp/>=<sp/>ArraySize(_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>_max<sp/>=<sp/>_arr[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_max<sp/>=<sp/>_max<sp/>&lt;<sp/>_arr[i]<sp/>?<sp/><sp/>_arr[i]<sp/>:<sp/>_max;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_max;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>int<sp/>ArrayCopy(<sp/>T<sp/>&amp;dst_array[],<sp/>const<sp/>T<sp/>&amp;src_array[],<sp/>const<sp/>int<sp/>dst_start<sp/>=<sp/>0,<sp/>const<sp/>int<sp/>src_start<sp/>=<sp/>0,<sp/>const<sp/>int<sp/>count<sp/>=<sp/>WHOLE_ARRAY);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Return<sp/>plain<sp/>text<sp/>of<sp/>array<sp/>values<sp/>separated<sp/>by<sp/>the<sp/>delimiter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>int<sp/>arr[]<sp/>-<sp/>array<sp/>to<sp/>look<sp/>for<sp/>the<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>string<sp/>sep<sp/>-<sp/>delimiter<sp/>to<sp/>separate<sp/>array<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>string<sp/>GetArrayValues(int&amp;<sp/>arr[],<sp/>string<sp/>sep<sp/>=<sp/>&quot;,<sp/>&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>result<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArraySize(arr);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>StringFormat(&quot;%d:%d%s&quot;,<sp/>i,<sp/>arr[i],<sp/>sep);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>text<sp/>without<sp/>last<sp/>separator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>StringSubstr(result,<sp/>0,<sp/>StringLen(result)<sp/>-<sp/>StringLen(sep));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Return<sp/>plain<sp/>text<sp/>of<sp/>array<sp/>values<sp/>separated<sp/>by<sp/>the<sp/>delimiter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>double<sp/>arr[]<sp/>-<sp/>array<sp/>to<sp/>look<sp/>for<sp/>the<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>string<sp/>sep<sp/>-<sp/>delimiter<sp/>to<sp/>separate<sp/>array<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>string<sp/>GetArrayValues(double&amp;<sp/>arr[],<sp/>string<sp/>sep<sp/>=<sp/>&quot;,<sp/>&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>result<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArraySize(arr);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>StringFormat(&quot;%d:%g%s&quot;,<sp/>i,<sp/>arr[i],<sp/>sep);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Return<sp/>text<sp/>without<sp/>last<sp/>separator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>StringSubstr(result,<sp/>0,<sp/>StringLen(result)<sp/>-<sp/>StringLen(sep));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Find<sp/>lower<sp/>value<sp/>within<sp/>the<sp/>1-dim<sp/>array<sp/>of<sp/>floats.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>LowestArrValue(double&amp;<sp/>arr[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(arr[ArrayMinimum(arr)]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Find<sp/>higher<sp/>value<sp/>within<sp/>the<sp/>1-dim<sp/>array<sp/>of<sp/>floats.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>HighestArrValue(double&amp;<sp/>arr[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(arr[ArrayMaximum(arr)]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Find<sp/>lower<sp/>value<sp/>within<sp/>the<sp/>2-dim<sp/>array<sp/>of<sp/>floats<sp/>by<sp/>the<sp/>key.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>LowestArrValue2(double&amp;<sp/>arr[][],<sp/>int<sp/>key1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>lowest<sp/>=<sp/>999;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[key1][i]<sp/>&lt;<sp/>lowest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest<sp/>=<sp/>arr[key1][i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>lowest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Find<sp/>higher<sp/>value<sp/>within<sp/>the<sp/>2-dim<sp/>array<sp/>of<sp/>floats<sp/>by<sp/>the<sp/>key.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>HighestArrValue2(double&amp;<sp/>arr[][],<sp/>int<sp/>key1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>highest<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[key1][i]<sp/>&gt;<sp/>highest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highest<sp/>=<sp/>arr[key1][i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>highest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Find<sp/>highest<sp/>value<sp/>in<sp/>2-dim<sp/>array<sp/>of<sp/>integers<sp/>by<sp/>the<sp/>key.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>HighestValueByKey(int&amp;<sp/>arr[][],<sp/>int<sp/>key)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>highest<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[key][i]<sp/>&gt;<sp/>highest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highest<sp/>=<sp/>arr[key][i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>highest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Find<sp/>lowest<sp/>value<sp/>in<sp/>2-dim<sp/>array<sp/>of<sp/>integers<sp/>by<sp/>the<sp/>key.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>LowestValueByKey(int&amp;<sp/>arr[][],<sp/>int<sp/>key)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>lowest<sp/>=<sp/>999;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[key][i]<sp/>&lt;<sp/>lowest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest<sp/>=<sp/>arr[key][i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>lowest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>GetLowestArrDoubleValue(double&amp;<sp/>arr[][],<sp/>int<sp/>key)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>j;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>lowest<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ArrayRange(arr,<sp/>1);<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[i][j]<sp/>&lt;<sp/>lowest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest<sp/>=<sp/>arr[i][j];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>lowest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Find<sp/>key<sp/>in<sp/>array<sp/>of<sp/>integers<sp/>with<sp/>the<sp/>highest<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>GetArrKey1ByHighestKey2Value(int&amp;<sp/>arr[][],<sp/>int<sp/>key2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>key1<sp/>=<sp/>EMPTY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>highest<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[i][key2]<sp/>&gt;<sp/>highest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highest<sp/>=<sp/>arr[i][key2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key1<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>key1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Find<sp/>key<sp/>in<sp/>array<sp/>of<sp/>integers<sp/>with<sp/>the<sp/>lowest<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>GetArrKey1ByLowestKey2Value(int&amp;<sp/>arr[][],<sp/>int<sp/>key2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>key1<sp/>=<sp/>EMPTY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>lowest<sp/>=<sp/>999;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[i][key2]<sp/>&lt;<sp/>lowest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest<sp/>=<sp/>arr[i][key2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key1<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>key1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Find<sp/>key<sp/>in<sp/>array<sp/>of<sp/>doubles<sp/>with<sp/>the<sp/>highest<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>GetArrKey1ByHighestKey2ValueD(double&amp;<sp/>arr[][],<sp/>int<sp/>key2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>key1<sp/>=<sp/>EMPTY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>highest<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[i][key2]<sp/>&gt;<sp/>highest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>highest<sp/>=<sp/>arr[i][key2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key1<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>key1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Find<sp/>key<sp/>in<sp/>array<sp/>of<sp/>doubles<sp/>with<sp/>the<sp/>lowest<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>GetArrKey1ByLowestKey2ValueD(double&amp;<sp/>arr[][],<sp/>int<sp/>key2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>key1<sp/>=<sp/>EMPTY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>lowest<sp/>=<sp/>999;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arr[i][key2]<sp/>&lt;<sp/>lowest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowest<sp/>=<sp/>arr[i][key2];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key1<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>key1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Set<sp/>array<sp/>value<sp/>for<sp/>double<sp/>items<sp/>with<sp/>specific<sp/>keys.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>ArrSetValueD(double&amp;<sp/>arr[][],<sp/>int<sp/>key,<sp/>double<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr[i][key]<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Set<sp/>array<sp/>value<sp/>for<sp/>integer<sp/>items<sp/>with<sp/>specific<sp/>keys.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>ArrSetValueI(int&amp;<sp/>arr[][],<sp/>int<sp/>key,<sp/>int<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arr[i][key]<sp/>=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculate<sp/>sum<sp/>of<sp/>2<sp/>dimentional<sp/>array<sp/>based<sp/>on<sp/>given<sp/>key.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>GetArrSumKey1(double&amp;<sp/>arr[][],<sp/>int<sp/>key1,<sp/>int<sp/>offset<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>MathMin(offset,<sp/>ArrayRange(arr,<sp/>1)<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>offset;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>1);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>arr[key1][i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>sum;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Print<sp/>a<sp/>one-dimensional<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>arr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>one<sp/>dimensional<sp/>array<sp/>of<sp/>integers.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>dlm</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Delimiter<sp/>to<sp/>separate<sp/>the<sp/>items.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>String<sp/>representation<sp/>of<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ArrToString(int&amp;<sp/>arr[],<sp/>string<sp/>dlm<sp/>=<sp/>&quot;,&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>res<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArraySize(arr);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>(string)arr[i]<sp/>+<sp/>dlm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>StringSubstr(res,<sp/>0,<sp/>StringLen(res)<sp/>-<sp/>StringLen(dlm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Print<sp/>a<sp/>one-dimensional<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>double<sp/>arr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>one<sp/>dimensional<sp/>array<sp/>of<sp/>doubles.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>dlm</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Delimiter<sp/>to<sp/>separate<sp/>the<sp/>items.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>String<sp/>representation<sp/>of<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ArrToString(double&amp;<sp/>arr[],<sp/>string<sp/>dlm<sp/>=<sp/>&quot;,&quot;,<sp/>int<sp/>digits<sp/>=<sp/>2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>res<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArraySize(arr);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>StringFormat(&quot;%g%s&quot;,<sp/>NormalizeDouble(arr[i],<sp/>digits),<sp/>dlm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>StringSubstr(res,<sp/>0,<sp/>StringLen(res)<sp/>-<sp/>StringLen(dlm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Print<sp/>a<sp/>one-dimensional<sp/>array<sp/>in<sp/>hex<sp/>format.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>double<sp/>unsigned<sp/>char[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>one<sp/>dimensional<sp/>array<sp/>of<sp/>characters.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>count</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>If<sp/>specified,<sp/>limit<sp/>the<sp/>number<sp/>of<sp/>printed<sp/>characters.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>String<sp/>representation<sp/>of<sp/>array<sp/>in<sp/>hexadecimal<sp/>format.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ArrToHex(unsigned<sp/>char<sp/>&amp;arr[],<sp/>int<sp/>count<sp/>=<sp/>-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(count<sp/>&gt;<sp/>0<sp/>?<sp/>count<sp/>:<sp/>ArraySize(arr));<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>StringFormat(&quot;%.2X&quot;,<sp/>arr[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Print<sp/>a<sp/>two-dimensional<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>arr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>two<sp/>dimensional<sp/>array<sp/>of<sp/>doubles.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>dlm</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Delimiter<sp/>to<sp/>separate<sp/>the<sp/>items.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>digits</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Number<sp/>of<sp/>digits<sp/>after<sp/>point.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>String<sp/>representation<sp/>of<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ArrToString2D(double&amp;<sp/>arr[][],<sp/>string<sp/>dlm<sp/>=<sp/>&quot;,&quot;,<sp/>int<sp/>digits<sp/>=<sp/>2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>res<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>j;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>&quot;[&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ArrayRange(arr,<sp/>1);<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>StringFormat(&quot;%g%s&quot;,<sp/>NormalizeDouble(arr[i][j],<sp/>digits),<sp/>dlm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>StringSubstr(res,<sp/>0,<sp/>StringLen(res)<sp/>-<sp/>StringLen(dlm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>&quot;]&quot;<sp/>+<sp/>dlm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>StringSubstr(res,<sp/>0,<sp/>StringLen(res)<sp/>-<sp/>StringLen(dlm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Print<sp/>a<sp/>three-dimensional<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>arr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>three<sp/>dimensional<sp/>array<sp/>of<sp/>doubles.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>dlm</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Delimiter<sp/>to<sp/>separate<sp/>the<sp/>items.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>digits</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Number<sp/>of<sp/>digits<sp/>after<sp/>point.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>String<sp/>representation<sp/>of<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ArrToString3D(double&amp;<sp/>arr[][][],<sp/>string<sp/>dlm<sp/>=<sp/>&quot;,&quot;,<sp/>int<sp/>digits<sp/>=<sp/>2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>res<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArrayRange(arr,<sp/>0);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>&quot;[&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>ArrayRange(arr,<sp/>1);<sp/>j++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>&quot;[&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>ArrayRange(arr,<sp/>2);<sp/>k++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>StringFormat(&quot;%g%s&quot;,<sp/>NormalizeDouble(arr[i][j][k],<sp/>digits),<sp/>dlm);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>StringSubstr(res,<sp/>0,<sp/>StringLen(res)<sp/>-<sp/>StringLen(dlm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>&quot;]&quot;<sp/>+<sp/>dlm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>StringSubstr(res,<sp/>0,<sp/>StringLen(res)<sp/>-<sp/>StringLen(dlm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>+=<sp/>&quot;]&quot;<sp/>+<sp/>dlm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>StringSubstr(res,<sp/>0,<sp/>StringLen(res)<sp/>-<sp/>StringLen(dlm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Print<sp/>a<sp/>one-dimensional<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>arr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>one<sp/>dimensional<sp/>array<sp/>of<sp/>strings.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>dlm</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Delimiter<sp/>to<sp/>separate<sp/>the<sp/>items.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>prefix</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Prefix<sp/>to<sp/>add<sp/>if<sp/>array<sp/>is<sp/>non-empty.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>suffix</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Suffix<sp/>to<sp/>add<sp/>if<sp/>array<sp/>is<sp/>non-empty.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>String<sp/>representation<sp/>of<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ArrToString(string&amp;<sp/>arr[],<sp/>string<sp/>dlm<sp/>=<sp/>&quot;,&quot;,<sp/>string<sp/>prefix<sp/>=<sp/>&quot;&quot;,<sp/>string<sp/>suffix<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>output<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ArraySize(arr)<sp/>&gt;<sp/>0)<sp/>output<sp/>+=<sp/>prefix;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArraySize(arr);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>(string)<sp/>arr[i]<sp/>+<sp/>dlm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>StringSubstr(output,<sp/>0,<sp/>StringLen(output)<sp/>-<sp/>StringLen(dlm));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ArraySize(arr)<sp/>&gt;<sp/>0)<sp/>output<sp/>+=<sp/>suffix;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Prints<sp/>an<sp/>array<sp/>of<sp/>a<sp/>simple<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/array/arrayprint</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>ArrayPrint(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;_arr[],<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Printed<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_digits<sp/>=<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Number<sp/>of<sp/>decimal<sp/>places.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>string<sp/><sp/>_dlm<sp/>=<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Separator<sp/>of<sp/>the<sp/>structure<sp/>field<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_start<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>First<sp/>printed<sp/>element<sp/>index.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_count<sp/>=<sp/>WHOLE_ARRAY,<sp/>//<sp/>Number<sp/>of<sp/>printed<sp/>elements.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_flags<sp/>=<sp/>NULL</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>output<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>_start;<sp/>i<sp/>&lt;<sp/>_count<sp/>==<sp/>WHOLE_ARRAY<sp/>?<sp/>ArraySize(_arr)<sp/>:<sp/>_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>(string)<sp/>_arr[i]<sp/>+<sp/>_dlm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Print(output);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::ArrayPrint(_arr,<sp/>_digits,<sp/>_dlm,<sp/>_start,<sp/>_count,<sp/>_flags);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Resize<sp/>array<sp/>from<sp/>the<sp/>left.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>arr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>one<sp/>dimensional<sp/>array<sp/>of<sp/>doubles.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>_new_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>New<sp/>size<sp/>of<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>bool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>count<sp/>of<sp/>all<sp/>elements<sp/>contained<sp/>in<sp/>the<sp/>array<sp/>after<sp/>resizing,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>otherwise<sp/>returns<sp/>-1<sp/>without<sp/>resizing<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see:<sp/>http://www.forexfactory.com/showthread.php?p=2878455#post2878455</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>ArrayResizeLeft(double<sp/>&amp;arr[],<sp/>int<sp/>_new_size,<sp/>int<sp/>_reserve_size<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(arr,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_res<sp/>=<sp/>ArrayResize(arr,<sp/>_new_size,<sp/>_reserve_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(arr,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sorts<sp/>numeric<sp/>arrays<sp/>by<sp/>first<sp/>dimension.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>&amp;array[]<sp/>arr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Numeric<sp/>array<sp/>for<sp/>sorting.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>count</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Count<sp/>of<sp/>elements<sp/>to<sp/>sort.<sp/>By<sp/>default,<sp/>it<sp/>sorts<sp/>the<sp/>whole<sp/>array<sp/>(WHOLE_ARRAY).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>start</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Starting<sp/>index<sp/>to<sp/>sort.<sp/>By<sp/>default,<sp/>the<sp/>sort<sp/>starts<sp/>at<sp/>the<sp/>first<sp/>element.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>direction</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Sort<sp/>direction.<sp/>It<sp/>can<sp/>be<sp/>any<sp/>of<sp/>the<sp/>following<sp/>values:<sp/>MODE_ASCEND<sp/>or<sp/>MODE_DESCEND.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>bool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>function<sp/>returns<sp/>true<sp/>on<sp/>success,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>https://docs.mql4.com/array/arraysort</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>https://www.mql5.com/en/docs/array/arraysort</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>-<sp/>https://www.mql5.com/en/docs/array/array_reverse</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>One<sp/>dimensional<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>ArraySort(T<sp/>&amp;arr[],<sp/>int<sp/>count<sp/>=<sp/>WHOLE_ARRAY,<sp/>int<sp/>start<sp/>=<sp/>0,<sp/>int<sp/>direction<sp/>=<sp/>MODE_ASCEND)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>::ArraySort(arr,<sp/>count,<sp/>start,<sp/>direction);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(_direction<sp/>==<sp/>MODE_DESCEND)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ArrayReverse(arr,<sp/>start,<sp/>count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@fixme:<sp/>Add<sp/>support<sp/>for<sp/>_count<sp/>and<sp/>_start.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ArraySort(arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Two<sp/>dimensional<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>ArraySort2D(T<sp/>&amp;arr[][],<sp/>int<sp/>count<sp/>=<sp/>WHOLE_ARRAY,<sp/>int<sp/>start<sp/>=<sp/>0,<sp/>int<sp/>direction<sp/>=<sp/>MODE_ASCEND)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(bool)<sp/>::ArraySort(arr,<sp/>count,<sp/>start,<sp/>direction);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(_direction<sp/>==<sp/>MODE_DESCEND)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ArrayReverse(arr,<sp/>start,<sp/>count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@fixme:<sp/>Add<sp/>support<sp/>for<sp/>_count<sp/>amd<sp/>_start.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ArraySort(arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Resizes<sp/>array<sp/>and<sp/>fills<sp/>allocated<sp/>slots<sp/>with<sp/>given<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>&amp;array[]<sp/>array</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Single<sp/>dimensonal<sp/>array.<sp/>For<sp/>multi-dimensional<sp/>array<sp/>consider:<sp/>template<sp/>&lt;typename<sp/>X,<sp/>typename<sp/>Y&gt;<sp/>int<sp/>ArrayResizeFill(X<sp/>&amp;array[][2],<sp/>int<sp/>new_size,<sp/>int<sp/>reserve_size<sp/>=<sp/>0,<sp/>Y<sp/>fill_value<sp/>=<sp/>EMPTY)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>new_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>New<sp/>array<sp/>size.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>reserve_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Reserve<sp/>size<sp/>value<sp/>(excess).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>fill_value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>used<sp/>as<sp/>filler<sp/>for<sp/>allocated<sp/>slots.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>the<sp/>same<sp/>value<sp/>as<sp/>ArrayResize<sp/>function<sp/>(count<sp/>of<sp/>all<sp/>elements<sp/>contained<sp/>in<sp/>the<sp/>array<sp/>after<sp/>resizing<sp/>or<sp/>-1<sp/>if<sp/>error<sp/>occured).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>X,<sp/>typename<sp/>Y&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>ArrayResizeFill(X<sp/>&amp;array[],<sp/>int<sp/>new_size,<sp/>int<sp/>reserve_size<sp/>=<sp/>0,<sp/>Y<sp/>fill_value<sp/>=<sp/>EMPTY_VALUE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>int<sp/>old_size<sp/>=<sp/>ArrayRange(array,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(new_size<sp/>&lt;=<sp/>old_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>old_size;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>want<sp/>to<sp/>fill<sp/>all<sp/>allocated<sp/>slots<sp/>(the<sp/>whole<sp/>allocated<sp/>memory).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>int<sp/>allocated_size<sp/>=<sp/>MathMax(new_size,<sp/>reserve_size);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>result<sp/>=<sp/>ArrayResize(array,<sp/>new_size,<sp/>reserve_size);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayFill(array,<sp/>old_size,<sp/>allocated_size<sp/>-<sp/>old_size,<sp/>fill_value);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Initializes<sp/>a<sp/>numeric<sp/>array<sp/>by<sp/>a<sp/>preset<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>array[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Numeric<sp/>array<sp/>that<sp/>should<sp/>be<sp/>initialized.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>char<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>New<sp/>value<sp/>that<sp/>should<sp/>be<sp/>set<sp/>to<sp/>all<sp/>array<sp/>elements.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Number<sp/>of<sp/>initialized<sp/>elements.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/array/arrayinitialize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/array/arrayinitialize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>X&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>ArrayInitialize(X<sp/>&amp;array[],<sp/>char<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQLBUILD__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ArrayInitialize(array,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@fixme</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Error:<sp/>@fixme:<sp/>%s(%g)&quot;,<sp/>&quot;ArrayInitialize&quot;,<sp/>(X)<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Searches<sp/>for<sp/>the<sp/>lowest<sp/>element<sp/>in<sp/>the<sp/>first<sp/>dimension<sp/>of<sp/>a<sp/>multidimensional<sp/>numeric<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>void<sp/>&amp;array[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>A<sp/>numeric<sp/>array,<sp/>in<sp/>which<sp/>search<sp/>is<sp/>made.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>start</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Index<sp/>to<sp/>start<sp/>checking<sp/>with.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>count</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>for<sp/>search.<sp/>By<sp/>default,<sp/>searches<sp/>in<sp/>the<sp/>entire<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>function<sp/>returns<sp/>an<sp/>index<sp/>of<sp/>a<sp/>found<sp/>element.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/array/arraymaximum</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/array/arraymaximum</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>X&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>ArrayMinimum(const<sp/>X<sp/>&amp;array[],<sp/>int<sp/>start<sp/>=<sp/>0,<sp/>int<sp/>count<sp/>=<sp/>WHOLE_ARRAY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQLBUILD__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ArrayMinimum(array);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@fixme</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Error:<sp/>@fixme:<sp/>%s(%g)&quot;,<sp/>&quot;ArrayMinimum&quot;,<sp/>(X)<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Searches<sp/>for<sp/>the<sp/>largest<sp/>element<sp/>in<sp/>the<sp/>first<sp/>dimension<sp/>of<sp/>a<sp/>multidimensional<sp/>numeric<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>void<sp/>&amp;array[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>A<sp/>numeric<sp/>array,<sp/>in<sp/>which<sp/>search<sp/>is<sp/>made.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>start</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Index<sp/>to<sp/>start<sp/>checking<sp/>with.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>count</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Number<sp/>of<sp/>elements<sp/>for<sp/>search.<sp/>By<sp/>default,<sp/>searches<sp/>in<sp/>the<sp/>entire<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>function<sp/>returns<sp/>an<sp/>index<sp/>of<sp/>a<sp/>found<sp/>element.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/array/arraymaximum</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/array/arraymaximum</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>X&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>ArrayMaximum(const<sp/>X<sp/>&amp;array[],<sp/>int<sp/>start<sp/>=<sp/>0,<sp/>int<sp/>count<sp/>=<sp/>WHOLE_ARRAY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQLBUILD__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ArrayMaximum(array);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@fixme</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Error:<sp/>@fixme:<sp/>%s(%g)&quot;,<sp/>&quot;ArrayMaximum&quot;,<sp/>(X)<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>of<sp/>a<sp/>selected<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>void<sp/>&amp;array[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Array<sp/>of<sp/>any<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return<sp/>int</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Value<sp/>of<sp/>int<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/array/arraysize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/array/arraysize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>X&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>ArraySize(const<sp/>X<sp/>&amp;array[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQLBUILD__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ArraySize(array);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>sizeof(array)<sp/>/<sp/>sizeof(*array);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>ARRAY_MQH</highlight></codeline>
    </programlisting>
    <location file="Array.mqh"/>
  </compounddef>
</doxygen>
