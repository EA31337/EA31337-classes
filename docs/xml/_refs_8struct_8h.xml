<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_refs_8struct_8h" kind="file" language="C++">
    <compoundname>Refs.struct.h</compoundname>
    <innerclass refid="struct_ref" prot="public">Ref</innerclass>
    <innerclass refid="struct_weak_ref" prot="public">WeakRef</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Includes Refs&apos; structs. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//+------------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//+------------------------------------------------------------------+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>class<sp/>declaration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Refs;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="35" refid="struct_ref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_ref" kindref="compound">Ref</ref><sp/>{</highlight></codeline>
<codeline lineno="39" refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" refkind="member"><highlight class="normal"><sp/><sp/>X*<sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45" refid="struct_ref_1a6ef608658896bfcf2fbd67377332d375" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_ref_1a6ef608658896bfcf2fbd67377332d375" kindref="member">Ref</ref>(X*<sp/>_ptr)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>_ptr;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="struct_ref_1acc438eb38f2774091f46e2051a4080ca" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_ref_1acc438eb38f2774091f46e2051a4080ca" kindref="member">Ref</ref>(<ref refid="struct_ref" kindref="compound">Ref&lt;X&gt;</ref>&amp;<sp/>ref)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>ref.<ref refid="struct_ref_1afac928b6fd74ce2a29886225fade37b0" kindref="member">Ptr</ref>();<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="struct_ref_1a68e6788291e300b2628c76e08a7ad5b7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_ref_1a68e6788291e300b2628c76e08a7ad5b7" kindref="member">Ref</ref>(<ref refid="struct_weak_ref" kindref="compound">WeakRef&lt;X&gt;</ref>&amp;<sp/>ref)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>ref.Ptr();<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="struct_ref_1a101e5fd5d0f13176d6d2fe5afe7561da" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_ref_1a101e5fd5d0f13176d6d2fe5afe7561da" kindref="member">Ref</ref>()<sp/>{<sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref><sp/>=<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="struct_ref_1afa3885bdd778b2389e79b3bf4f10e236" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_ref_1afa3885bdd778b2389e79b3bf4f10e236" kindref="member">~Ref</ref>()<sp/>{<sp/><ref refid="struct_ref_1abc96e9c2bf321c9f8dea5e856329de07" kindref="member">Unset</ref>();<sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="struct_ref_1afac928b6fd74ce2a29886225fade37b0" refkind="member"><highlight class="normal"><sp/><sp/>X*<sp/><ref refid="struct_ref_1afac928b6fd74ce2a29886225fade37b0" kindref="member">Ptr</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>;<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="struct_ref_1a8ea84dcc691966185f4793a5b3498ae9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_ref_1a8ea84dcc691966185f4793a5b3498ae9" kindref="member">IsSet</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref><sp/>!=<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="struct_ref_1abc96e9c2bf321c9f8dea5e856329de07" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_ref_1abc96e9c2bf321c9f8dea5e856329de07" kindref="member">Unset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dropping<sp/>strong<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!--<ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>.ptr_ref_counter.num_strong_refs)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>more<sp/>strong<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>.ptr_ref_counter.num_weak_refs)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>no<sp/>more<sp/>weak<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>.ptr_ref_counter;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>.ptr_ref_counter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Object<sp/>becomes<sp/>deleted,<sp/>but<sp/>there<sp/>are<sp/>some<sp/>weak<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>.ptr_ref_counter.deleted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoiding<sp/>delete<sp/>loop<sp/>for<sp/>cyclic<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X*<sp/>ptr_to_delete<sp/>=<sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoiding<sp/>double<sp/>deletion<sp/>in<sp/>Dynamic&apos;s<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>.ptr_ref_counter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ptr_to_delete;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="struct_ref_1a193bab21ec3c383fde1bbc9ff929348b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_ref_1a193bab21ec3c383fde1bbc9ff929348b" kindref="member">operator=</ref>(X*<sp/>_ptr)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref><sp/>==<sp/>_ptr)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigning<sp/>the<sp/>same<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_ref_1abc96e9c2bf321c9f8dea5e856329de07" kindref="member">Unset</ref>();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref><sp/>=<sp/>_ptr;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref><sp/>!=<sp/>NULL)<sp/>++<ref refid="struct_ref_1a782d76a5fc630e4852c513e63cb90de1" kindref="member">ptr_object</ref>.ptr_ref_counter.num_strong_refs;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="struct_ref_1a50196d806d5b984084f09295f3d3bdf2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_ref_1a50196d806d5b984084f09295f3d3bdf2" kindref="member">operator=</ref>(<ref refid="struct_weak_ref" kindref="compound">WeakRef&lt;X&gt;</ref>&amp;<sp/>right)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>right.Ptr();<sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="struct_ref_1a6bee23fffea307a2dbe2f54c721dece8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_ref_1a6bee23fffea307a2dbe2f54c721dece8" kindref="member">operator=</ref>(<ref refid="struct_ref" kindref="compound">Ref&lt;X&gt;</ref>&amp;<sp/>right)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>right.<ref refid="struct_ref_1afac928b6fd74ce2a29886225fade37b0" kindref="member">Ptr</ref>();<sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>X&gt;</highlight></codeline>
<codeline lineno="139" refid="struct_weak_ref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_weak_ref" kindref="compound">WeakRef</ref><sp/>{</highlight></codeline>
<codeline lineno="143" refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" refkind="member"><highlight class="normal"><sp/><sp/>ReferenceCounter*<sp/><ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149" refid="struct_weak_ref_1a62db41e1b3ea0c45d3ac3ffff7463bd5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_weak_ref_1a62db41e1b3ea0c45d3ac3ffff7463bd5" kindref="member">WeakRef</ref>(X*<sp/>_ptr<sp/>=<sp/>NULL)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>_ptr;<sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="struct_weak_ref_1a9efcf93ac0009806b82702c3160d94c0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_weak_ref_1a9efcf93ac0009806b82702c3160d94c0" kindref="member">WeakRef</ref>(<ref refid="struct_weak_ref" kindref="compound">WeakRef&lt;X&gt;</ref>&amp;<sp/>ref)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>ref.Ptr();<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="struct_weak_ref_1ad6f435eac19be8b177bad9cdaafff281" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_weak_ref_1ad6f435eac19be8b177bad9cdaafff281" kindref="member">WeakRef</ref>(<ref refid="struct_ref" kindref="compound">Ref&lt;X&gt;</ref>&amp;<sp/>ref)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>ref.<ref refid="struct_ref_1afac928b6fd74ce2a29886225fade37b0" kindref="member">Ptr</ref>();<sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="struct_weak_ref_1acad10135370faa504a349c0ece73f8ec" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_weak_ref_1acad10135370faa504a349c0ece73f8ec" kindref="member">~WeakRef</ref>()<sp/>{<sp/><ref refid="struct_weak_ref_1af844d30361dd97434a27b7d3b70882ea" kindref="member">Unset</ref>();<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ObjectExists()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!<ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>.deleted;<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>X*<sp/>Ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ObjectExists()<sp/>?<sp/>(X*)<ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>.ptr_object<sp/>:<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="struct_weak_ref_1acabdc551703ae3c20511d75ebbfcca03" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_weak_ref_1acabdc551703ae3c20511d75ebbfcca03" kindref="member">operator=</ref>(X*<sp/>_ptr)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref><sp/>==<sp/>(_ptr<sp/>==<sp/>NULL<sp/>?<sp/>NULL<sp/>:<sp/>_ptr.ptr_ref_counter))<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigning<sp/>the<sp/>same<sp/>object<sp/>or<sp/>the<sp/>same<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_weak_ref_1af844d30361dd97434a27b7d3b70882ea" kindref="member">Unset</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_ptr<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigning<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_ptr.ptr_ref_counter.deleted)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigning<sp/>already<sp/>deleted<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref><sp/>=<sp/>_ptr.ptr_ref_counter;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>.num_weak_refs;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="struct_weak_ref_1a10439f14c6c3391d998e429f3e1bdcde" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_weak_ref_1a10439f14c6c3391d998e429f3e1bdcde" kindref="member">operator=</ref>(<ref refid="struct_weak_ref" kindref="compound">WeakRef&lt;X&gt;</ref>&amp;<sp/>right)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>right.Ptr();<sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="struct_weak_ref_1a2848e4cbcb10b9d2a48f3ee7151cffcf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_weak_ref_1a2848e4cbcb10b9d2a48f3ee7151cffcf" kindref="member">operator=</ref>(<ref refid="struct_ref" kindref="compound">Ref&lt;X&gt;</ref>&amp;<sp/>right)<sp/>{<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>right.<ref refid="struct_ref_1afac928b6fd74ce2a29886225fade37b0" kindref="member">Ptr</ref>();<sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="struct_weak_ref_1af844d30361dd97434a27b7d3b70882ea" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_weak_ref_1af844d30361dd97434a27b7d3b70882ea" kindref="member">Unset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dropping<sp/>weak<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!--<ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>.num_weak_refs)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>more<sp/>weak<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>.num_strong_refs)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>also<sp/>no<sp/>strong<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReferenceCounter*<sp/>stored_ptr_ref_counter<sp/>=<sp/><ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>.deleted)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>safe<sp/>to<sp/>delete<sp/>object<sp/>and<sp/>reference<sp/>counter<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoiding<sp/>double<sp/>deletion<sp/>in<sp/>Dynamic&apos;s<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>.ptr_object.ptr_ref_counter<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref>.ptr_object;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>stored_ptr_ref_counter;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" kindref="member">ptr_ref_counter</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="Refs.struct.h"/>
  </compounddef>
</doxygen>
