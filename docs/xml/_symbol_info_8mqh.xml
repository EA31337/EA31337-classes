<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_symbol_info_8mqh" kind="file" language="C++">
    <compoundname>SymbolInfo.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Prevents<sp/>processing<sp/>this<sp/>includes<sp/>file<sp/>for<sp/>the<sp/>second<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>SYMBOLINFO_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SYMBOLINFO_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Forward<sp/>declaration.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>SymbolInfo;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Terminal;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Serializer.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;SerializerNode.enum.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Terminal.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Methods<sp/>of<sp/>swap<sp/>calculation<sp/>at<sp/>position<sp/>transfer.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>@see:<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_swap_mode</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>ENUM_SYMBOL_SWAP_MODE<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>disabled<sp/>(no<sp/>swaps).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_DISABLED<sp/>=<sp/>-1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>are<sp/>charged<sp/>in<sp/>points.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_POINTS<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>are<sp/>charged<sp/>in<sp/>money<sp/>in<sp/>base<sp/>currency<sp/>of<sp/>the<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_CURRENCY_SYMBOL<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>are<sp/>charged<sp/>as<sp/>the<sp/>specified<sp/>annual<sp/>interest<sp/>from<sp/>the<sp/>instrument<sp/>price<sp/>at<sp/>calculation<sp/>of<sp/>swap<sp/>(standard<sp/>bank<sp/>year<sp/>is<sp/>360<sp/>days).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_INTEREST_CURRENT<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>are<sp/>charged<sp/>in<sp/>money<sp/>in<sp/>margin<sp/>currency<sp/>of<sp/>the<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_CURRENCY_MARGIN<sp/>=<sp/>3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>are<sp/>charged<sp/>in<sp/>money,<sp/>in<sp/>client<sp/>deposit<sp/>currency.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_CURRENCY_DEPOSIT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>are<sp/>charged<sp/>as<sp/>the<sp/>specified<sp/>annual<sp/>interest<sp/>from<sp/>the<sp/>open<sp/>price<sp/>of<sp/>position<sp/>(standard<sp/>bank<sp/>year<sp/>is<sp/>360<sp/>days).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_INTEREST_OPEN,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>are<sp/>charged<sp/>by<sp/>reopening<sp/>positions.<sp/>At<sp/>the<sp/>end<sp/>of<sp/>a<sp/>trading<sp/>day<sp/>the<sp/>position<sp/>is<sp/>closed.<sp/>Next<sp/>day<sp/>it<sp/>is<sp/>reopened<sp/>by<sp/>the<sp/>close<sp/>price<sp/>+/-<sp/>specified<sp/>number<sp/>of<sp/>points<sp/>(parameters<sp/>SYMBOL_SWAP_LONG<sp/>and<sp/>SYMBOL_SWAP_SHORT).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_REOPEN_CURRENT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Swaps<sp/>are<sp/>charged<sp/>by<sp/>reopening<sp/>positions.<sp/>At<sp/>the<sp/>end<sp/>of<sp/>a<sp/>trading<sp/>day<sp/>the<sp/>position<sp/>is<sp/>closed.<sp/>Next<sp/>day<sp/>it<sp/>is<sp/>reopened<sp/>by<sp/>the<sp/>current<sp/>Bid<sp/>price<sp/>+/-<sp/>specified<sp/>number<sp/>of<sp/>points<sp/>(parameters<sp/>SYMBOL_SWAP_LONG<sp/>and<sp/>SYMBOL_SWAP_SHORT).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SYMBOL_SWAP_MODE_REOPEN_BID</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Constants.</highlight></codeline>
<codeline><highlight class="normal">const<sp/>ENUM_SYMBOL_INFO_DOUBLE<sp/>market_dcache[]<sp/>=<sp/>{SYMBOL_MARGIN_INITIAL,<sp/>SYMBOL_MARGIN_LIMIT,<sp/>SYMBOL_MARGIN_LONG,<sp/>SYMBOL_MARGIN_MAINTENANCE,<sp/>SYMBOL_MARGIN_SHORT,<sp/>SYMBOL_MARGIN_STOP,<sp/>SYMBOL_MARGIN_STOPLIMIT,<sp/>SYMBOL_POINT,<sp/>SYMBOL_SWAP_LONG,<sp/>SYMBOL_SWAP_SHORT,<sp/>SYMBOL_TRADE_CONTRACT_SIZE,<sp/>SYMBOL_TRADE_TICK_SIZE,<sp/>SYMBOL_TRADE_TICK_VALUE,<sp/>SYMBOL_TRADE_TICK_VALUE_LOSS,<sp/>SYMBOL_TRADE_TICK_VALUE_PROFIT,<sp/>SYMBOL_VOLUME_LIMIT,<sp/>SYMBOL_VOLUME_MAX,<sp/>SYMBOL_VOLUME_MIN,<sp/>SYMBOL_VOLUME_STEP};</highlight></codeline>
<codeline><highlight class="normal">const<sp/>ENUM_SYMBOL_INFO_INTEGER<sp/>market_icache[]<sp/>=<sp/>{SYMBOL_DIGITS,<sp/>SYMBOL_EXPIRATION_MODE,<sp/>SYMBOL_FILLING_MODE,<sp/>SYMBOL_ORDER_MODE,<sp/>SYMBOL_SWAP_MODE,<sp/>SYMBOL_SWAP_ROLLOVER3DAYS,<sp/>SYMBOL_TRADE_CALC_MODE,<sp/>SYMBOL_TRADE_EXEMODE,<sp/>SYMBOL_TRADE_MODE<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Structs.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>struct<sp/>to<sp/>store<sp/>symbol<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>SymbolInfoEntry<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>bid;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Current<sp/>Bid<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>ask;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Current<sp/>Ask<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>last;<sp/><sp/><sp/><sp/><sp/>//<sp/>Price<sp/>of<sp/>the<sp/>last<sp/>deal.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>spread;<sp/><sp/><sp/>//<sp/>Current<sp/>spread.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>long<sp/>volume;<sp/>//<sp/>Volume<sp/>for<sp/>the<sp/>current<sp/>last<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SymbolInfoEntry()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>:<sp/>bid(0),<sp/>ask(0),<sp/>last(0),<sp/>spread(0),<sp/>volume(0)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SymbolInfoEntry(const<sp/>MqlTick<sp/>&amp;_tick,<sp/>const<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bid<sp/>=<sp/>_tick.bid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>ask<sp/>=<sp/>_tick.ask;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>last<sp/>=<sp/>_tick.last;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>volume<sp/>=<sp/>_tick.volume;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>spread<sp/>=<sp/>SymbolInfo::GetRealSpread(bid,<sp/>ask,<sp/>SymbolInfo::GetDigits(_symbol));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Getters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>ToCSV()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>StringFormat(&quot;%g,%g,%g,%g,%d&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bid,<sp/>ask,<sp/>last,<sp/>spread,<sp/>volume);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Serializers.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SerializeStub(int<sp/>_n1<sp/>=<sp/>1,<sp/>int<sp/>_n2<sp/>=<sp/>1,<sp/>int<sp/>_n3<sp/>=<sp/>1,<sp/>int<sp/>_n4<sp/>=<sp/>1,<sp/>int<sp/>_n5<sp/>=<sp/>1)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SerializerNodeType<sp/>Serialize(Serializer&amp;<sp/>_s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.Pass(this,<sp/>&quot;ask&quot;,<sp/>ask);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.Pass(this,<sp/>&quot;bid&quot;,<sp/>bid);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.Pass(this,<sp/>&quot;last&quot;,<sp/>last);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.Pass(this,<sp/>&quot;spread&quot;,<sp/>spread);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.Pass(this,<sp/>&quot;volume&quot;,<sp/>volume);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SerializerNodeObject;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Class<sp/>to<sp/>provide<sp/>symbol<sp/>information.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>SymbolInfo<sp/>:<sp/>public<sp/>Terminal<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>symbol;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Current<sp/>symbol<sp/>pair.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlTick<sp/>last_tick;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Stores<sp/>the<sp/>latest<sp/>prices<sp/>of<sp/>the<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlTick<sp/>tick_data[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Stores<sp/>saved<sp/>ticks.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SymbolInfoEntry<sp/>s_entry;<sp/><sp/><sp/>//<sp/>Symbol<sp/>entry.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>pip_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Value<sp/>of<sp/>pip<sp/>size.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>symbol_digits;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Count<sp/>of<sp/>digits<sp/>after<sp/>decimal<sp/>point<sp/>in<sp/>the<sp/>symbol<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//uint<sp/>pts_per_pip;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Number<sp/>of<sp/>points<sp/>per<sp/>pip.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>volume_precision;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Implements<sp/>class<sp/>constructor<sp/>with<sp/>a<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SymbolInfo(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>Log<sp/>*_log<sp/>=<sp/>NULL)<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>symbol(_symbol<sp/>==<sp/>NULL<sp/>?<sp/>_Symbol<sp/>:<sp/>_symbol),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pip_size(GetPipSize()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>symbol_digits(GetDigits()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Terminal(_log)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Select();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_tick<sp/>=<sp/>GetTick();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>~SymbolInfo()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Selects<sp/>current<sp/>symbol<sp/>in<sp/>the<sp/>Market<sp/>Watch<sp/>window.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/marketinformation/symbolselect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/MarketInformation/SymbolSelect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Select()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(bool)<sp/>SymbolInfoInteger(symbol,<sp/>SYMBOL_SELECT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>the<sp/>current<sp/>symbol<sp/>pair<sp/>from<sp/>the<sp/>current<sp/>chart.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>string<sp/>GetCurrentSymbol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_Symbol;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>current<sp/>symbol<sp/>pair<sp/>used<sp/>by<sp/>the<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>GetSymbol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>symbol;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Updates<sp/>and<sp/>gets<sp/>the<sp/>latest<sp/>tick<sp/>prices.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs<sp/>MQL4<sp/>https://docs.mql4.com/constants/structures/mqltick</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs<sp/>MQL5<sp/>https://www.mql5.com/en/docs/constants/structures/mqltick</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>MqlTick<sp/>GetTick(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MqlTick<sp/>_last_tick;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!SymbolInfoTick(_symbol,<sp/>_last_tick))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintFormat(&quot;Error:<sp/>%s():<sp/>%s&quot;,<sp/>__FUNCTION__,<sp/>&quot;Cannot<sp/>return<sp/>current<sp/>prices!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_last_tick;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlTick<sp/>GetTick()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!SymbolInfoTick(this.symbol,<sp/>this.last_tick))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Cannot<sp/>return<sp/>current<sp/>prices!&quot;,<sp/>__FUNCTION__);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.last_tick;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>last<sp/>tick<sp/>prices<sp/>(without<sp/>updating).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlTick<sp/>GetLastTick()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.last_tick;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>latest<sp/>known<sp/>seller&apos;s<sp/>price<sp/>(ask<sp/>price)<sp/>for<sp/>the<sp/>current<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>RefreshRates()<sp/>function<sp/>must<sp/>be<sp/>used<sp/>to<sp/>update.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@see<sp/>http://docs.mql4.com/predefined/ask</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>Ask()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.GetTick().ask;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Overriding<sp/>Ask<sp/>variable<sp/>to<sp/>become<sp/>a<sp/>function<sp/>call.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>#ifdef<sp/>__MQL5__<sp/>#define<sp/>Ask<sp/>Market::Ask()<sp/>#endif<sp/>//<sp/>@fixme</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Updates<sp/>and<sp/>gets<sp/>the<sp/>latest<sp/>ask<sp/>price<sp/>(best<sp/>buy<sp/>offer).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetAsk(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_ASK);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetAsk()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.GetAsk(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>last<sp/>ask<sp/>price<sp/>(without<sp/>updating).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetLastAsk()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.last_tick.ask;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>latest<sp/>known<sp/>buyer&apos;s<sp/>price<sp/>(offer<sp/>price,<sp/>bid<sp/>price)<sp/>of<sp/>the<sp/>current<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>RefreshRates()<sp/>function<sp/>must<sp/>be<sp/>used<sp/>to<sp/>update.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@see<sp/>http://docs.mql4.com/predefined/bid</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>Bid()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.GetTick().bid;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Overriding<sp/>Bid<sp/>variable<sp/>to<sp/>become<sp/>a<sp/>function<sp/>call.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>#ifdef<sp/>__MQL5__<sp/>#define<sp/>Bid<sp/>Market::Bid()<sp/>#endif<sp/>//<sp/>@fixme</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Updates<sp/>and<sp/>gets<sp/>the<sp/>latest<sp/>bid<sp/>price<sp/>(best<sp/>sell<sp/>offer).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetBid(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_BID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetBid()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.GetBid(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>last<sp/>bid<sp/>price<sp/>(without<sp/>updating).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetLastBid()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.last_tick.bid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>the<sp/>last<sp/>volume<sp/>for<sp/>the<sp/>current<sp/>last<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@see:<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>ulong<sp/>GetVolume(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetTick(_symbol).volume;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ulong<sp/>GetVolume()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.GetTick(this.symbol).volume;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>last<sp/>volume<sp/>for<sp/>the<sp/>current<sp/>price<sp/>(without<sp/>updating).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ulong<sp/>GetLastVolume()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.last_tick.volume;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>summary<sp/>volume<sp/>of<sp/>current<sp/>session<sp/>deals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@see:<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetSessionVolume(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_SESSION_VOLUME);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetSessionVolume()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>this.GetSessionVolume(this.symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Time<sp/>of<sp/>the<sp/>last<sp/>quote</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_info_double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>datetime<sp/>GetQuoteTime(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(datetime)<sp/>SymbolInfo::SymbolInfoInteger(_symbol,<sp/>SYMBOL_TIME);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>GetQuoteTime()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetQuoteTime(this.symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>current<sp/>open<sp/>price<sp/>depending<sp/>on<sp/>the<sp/>operation<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>op_type<sp/>int<sp/>Order<sp/>operation<sp/>type<sp/>of<sp/>the<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Current<sp/>open<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetOpenOffer(string<sp/>_symbol,<sp/>ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>the<sp/>right<sp/>open<sp/>price<sp/>at<sp/>opening<sp/>of<sp/>a<sp/>market<sp/>order.<sp/>For<sp/>example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>-<sp/>When<sp/>selling,<sp/>only<sp/>the<sp/>latest<sp/>Bid<sp/>prices<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>-<sp/>When<sp/>buying,<sp/>only<sp/>the<sp/>latest<sp/>Ask<sp/>prices<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_cmd<sp/>==<sp/>ORDER_TYPE_BUY<sp/>?<sp/>GetAsk(_symbol)<sp/>:<sp/>GetBid(_symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetOpenOffer(ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetOpenOffer(symbol,<sp/>_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>current<sp/>close<sp/>price<sp/>depending<sp/>on<sp/>the<sp/>operation<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>op_type<sp/>int<sp/>Order<sp/>operation<sp/>type<sp/>of<sp/>the<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Current<sp/>close<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetCloseOffer(string<sp/>_symbol,<sp/>ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_cmd<sp/>==<sp/>ORDER_TYPE_BUY<sp/>?<sp/>GetBid(_symbol)<sp/>:<sp/>GetAsk(_symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetCloseOffer(ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetCloseOffer(symbol,<sp/>_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>the<sp/>point<sp/>size<sp/>in<sp/>the<sp/>quote<sp/>currency.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>smallest<sp/>digit<sp/>of<sp/>price<sp/>quote.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>change<sp/>of<sp/>1<sp/>in<sp/>the<sp/>least<sp/>significant<sp/>digit<sp/>of<sp/>the<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>You<sp/>may<sp/>also<sp/>use<sp/>Point<sp/>predefined<sp/>variable<sp/>for<sp/>the<sp/>current<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetPointSize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(symbol,<sp/>SYMBOL_POINT);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_POINT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetPointSize(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_POINT);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_POINT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Return<sp/>a<sp/>pip<sp/>size.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>most<sp/>cases,<sp/>a<sp/>pip<sp/>is<sp/>equal<sp/>to<sp/>1/100<sp/>(.01%)<sp/>of<sp/>the<sp/>quote<sp/>currency.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetPipSize(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>This<sp/>code<sp/>may<sp/>fail<sp/>at<sp/>Gold<sp/>and<sp/>Silver<sp/>(https://www.mql5.com/en/forum/135345#515262).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetDigits(_symbol)<sp/>%<sp/>2<sp/>==<sp/>0<sp/>?<sp/>GetPointSize(_symbol)<sp/>:<sp/>GetPointSize(_symbol)<sp/>*<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetPipSize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetPipSize(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>a<sp/>tick<sp/>size<sp/>in<sp/>the<sp/>price<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>the<sp/>smallest<sp/>movement<sp/>in<sp/>the<sp/>price<sp/>quoted<sp/>by<sp/>the<sp/>broker,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>which<sp/>could<sp/>be<sp/>several<sp/>points.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>currencies<sp/>it<sp/>is<sp/>equivalent<sp/>to<sp/>point<sp/>size,<sp/>in<sp/>metals<sp/>they<sp/>are<sp/>not.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetTickSize(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>In<sp/>currencies<sp/>a<sp/>tick<sp/>is<sp/>always<sp/>a<sp/>point,<sp/>but<sp/>not<sp/>for<sp/>other<sp/>markets.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_TRADE_TICK_SIZE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetTickSize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetTickSize(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>a<sp/>tick<sp/>size<sp/>in<sp/>points.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>a<sp/>minimal<sp/>price<sp/>change<sp/>in<sp/>points.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>In<sp/>currencies<sp/>it<sp/>is<sp/>equivalent<sp/>to<sp/>point<sp/>size,<sp/>in<sp/>metals<sp/>they<sp/>are<sp/>not.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetTradeTickSize(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_TRADE_TICK_SIZE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetTradeTickSize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetTradeTickSize(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>a<sp/>tick<sp/>value<sp/>in<sp/>the<sp/>deposit<sp/>currency.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>base<sp/>currency<sp/>units<sp/>for<sp/>one<sp/>pip<sp/>of<sp/>movement.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetTickValue(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_TRADE_TICK_VALUE);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_TICKVALUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetTickValue()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetTickValue(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>a<sp/>calculated<sp/>tick<sp/>price<sp/>for<sp/>a<sp/>profitable<sp/>position.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>base<sp/>currency<sp/>units<sp/>for<sp/>one<sp/>pip<sp/>of<sp/>movement.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetTickValueProfit(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Not<sp/>supported<sp/>in<sp/>MQL4.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_TRADE_TICK_VALUE_PROFIT);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>SYMBOL_TRADE_TICK_VALUE_PROFIT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetTickValueProfit()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetTickValueProfit(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>a<sp/>calculated<sp/>tick<sp/>price<sp/>for<sp/>a<sp/>losing<sp/>position.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>base<sp/>currency<sp/>units<sp/>for<sp/>one<sp/>pip<sp/>of<sp/>movement.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetTickValueLoss(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Not<sp/>supported<sp/>in<sp/>MQL4.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_TRADE_TICK_VALUE_LOSS);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>SYMBOL_TRADE_TICK_VALUE_LOSS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetTickValueLoss()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetTickValueLoss(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>count<sp/>of<sp/>digits<sp/>after<sp/>decimal<sp/>point<sp/>for<sp/>the<sp/>symbol<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>the<sp/>current<sp/>symbol,<sp/>it<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>predefined<sp/>variable<sp/>Digits.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>uint<sp/>GetDigits(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(uint)<sp/>SymbolInfo::SymbolInfoInteger(_symbol,<sp/>SYMBOL_DIGITS);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_DIGITS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>GetDigits()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetDigits(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>current<sp/>spread<sp/>in<sp/>points.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>symbol<sp/>string<sp/>(optional)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Currency<sp/>pair<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Return<sp/>symbol<sp/>trade<sp/>spread<sp/>level<sp/>in<sp/>points.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>uint<sp/>GetSpread(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(uint)<sp/>SymbolInfo::SymbolInfoInteger(_symbol,<sp/>SYMBOL_SPREAD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>GetSpread()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetSpread(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>real<sp/>spread<sp/>based<sp/>on<sp/>the<sp/>ask<sp/>and<sp/>bid<sp/>price<sp/>(in<sp/>points).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>unsigned<sp/>int<sp/>GetRealSpread(double<sp/>_bid,<sp/>double<sp/>_ask,<sp/>unsigned<sp/>int<sp/>_digits)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(unsigned<sp/>int)<sp/>round((_ask<sp/>-<sp/>_bid)<sp/>*<sp/>pow(10,<sp/>_digits));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>unsigned<sp/>int<sp/>GetRealSpread(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetRealSpread(SymbolInfo::GetBid(_symbol),<sp/>SymbolInfo::GetAsk(_symbol),<sp/>SymbolInfo::GetDigits(_symbol));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>GetRealSpread()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetRealSpread(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Minimal<sp/>indention<sp/>in<sp/>points<sp/>from<sp/>the<sp/>current<sp/>close<sp/>price<sp/>to<sp/>place<sp/>Stop<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>is<sp/>due<sp/>that<sp/>at<sp/>placing<sp/>of<sp/>a<sp/>pending<sp/>order,<sp/>the<sp/>open<sp/>price<sp/>cannot<sp/>be<sp/>too<sp/>close<sp/>to<sp/>the<sp/>market.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>minimal<sp/>distance<sp/>of<sp/>the<sp/>pending<sp/>price<sp/>from<sp/>the<sp/>current<sp/>market<sp/>one<sp/>in<sp/>points<sp/>can<sp/>be<sp/>obtained</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>using<sp/>the<sp/>MarketInfo()<sp/>function<sp/>with<sp/>the<sp/>MODE_STOPLEVEL<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Related<sp/>error<sp/>messages:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Error<sp/>130<sp/>(ERR_INVALID_STOPS)<sp/>happens<sp/>In<sp/>case<sp/>of<sp/>false<sp/>open<sp/>price<sp/>of<sp/>a<sp/>pending<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Error<sp/>145<sp/>(ERR_TRADE_MODIFY_DENIED)<sp/>happens<sp/>when<sp/>modification<sp/>of<sp/>order<sp/>was<sp/>too<sp/>close<sp/>to<sp/>market.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>symbol<sp/>string<sp/>(optional)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Currency<sp/>pair<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>the<sp/>minimal<sp/>permissible<sp/>distance<sp/>value<sp/>in<sp/>points<sp/>for<sp/>StopLoss/TakeProfit.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>A<sp/>zero<sp/>value<sp/>means<sp/>either<sp/>absence<sp/>of<sp/>any<sp/>restrictions<sp/>on<sp/>the<sp/>minimal<sp/>distance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@see:<sp/>https://book.mql4.com/appendix/limits</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>GetTradeStopsLevel()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoInteger(symbol,<sp/>SYMBOL_TRADE_STOPS_LEVEL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>long<sp/>GetTradeStopsLevel(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoInteger(_symbol,<sp/>SYMBOL_TRADE_STOPS_LEVEL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>a<sp/>contract<sp/>lot<sp/>size<sp/>in<sp/>the<sp/>base<sp/>currency.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetTradeContractSize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(symbol,<sp/>SYMBOL_TRADE_CONTRACT_SIZE);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_LOTSIZE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetTradeContractSize(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_TRADE_CONTRACT_SIZE);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_LOTSIZE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Minimum<sp/>permitted<sp/>amount<sp/>of<sp/>a<sp/>lot/volume<sp/>for<sp/>a<sp/>deal.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetVolumeMin(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_VOLUME_MIN);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_MINLOT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetVolumeMin()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetVolumeMin(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Maximum<sp/>permitted<sp/>amount<sp/>of<sp/>a<sp/>lot/volume<sp/>for<sp/>a<sp/>deal.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetVolumeMax(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_VOLUME_MAX);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_MAXLOT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetVolumeMax()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetVolumeMax(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>a<sp/>lot/volume<sp/>step<sp/>for<sp/>a<sp/>deal.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Minimal<sp/>volume<sp/>change<sp/>step<sp/>for<sp/>deal<sp/>execution</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetVolumeStep(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_VOLUME_STEP);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_LOTSTEP);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetVolumeStep()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetVolumeStep(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Order<sp/>freeze<sp/>level<sp/>in<sp/>points.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Freeze<sp/>level<sp/>is<sp/>a<sp/>value<sp/>that<sp/>determines<sp/>the<sp/>price<sp/>band,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>within<sp/>which<sp/>the<sp/>order<sp/>is<sp/>considered<sp/>as<sp/>&apos;frozen&apos;<sp/>(prohibited<sp/>to<sp/>change).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>execution<sp/>price<sp/>lies<sp/>within<sp/>the<sp/>range<sp/>defined<sp/>by<sp/>the<sp/>freeze<sp/>level,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>order<sp/>cannot<sp/>be<sp/>modified,<sp/>cancelled<sp/>or<sp/>closed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>possibility<sp/>of<sp/>deleting<sp/>a<sp/>pending<sp/>order<sp/>is<sp/>regulated<sp/>by<sp/>the<sp/>FreezeLevel.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@see:<sp/>https://book.mql4.com/appendix/limits</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>uint<sp/>GetFreezeLevel(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(uint)<sp/>SymbolInfo::SymbolInfoInteger(_symbol,<sp/>SYMBOL_TRADE_FREEZE_LEVEL);<sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_FREEZELEVEL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>GetFreezeLevel()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetFreezeLevel(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Gets<sp/>flags<sp/>of<sp/>allowed<sp/>order<sp/>filling<sp/>modes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>The<sp/>flags<sp/>can<sp/>be<sp/>combined<sp/>by<sp/>the<sp/>operation<sp/>of<sp/>the<sp/>logical<sp/>OR<sp/>(e.g.<sp/>SYMBOL_FILLING_FOK|SYMBOL_FILLING_IOC).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#symbol_filling_mode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>ENUM_ORDER_TYPE_FILLING<sp/>GetFillingMode(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note:<sp/>Not<sp/>supported<sp/>for<sp/>MQL4.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ENUM_ORDER_TYPE_FILLING)<sp/>SymbolInfo::SymbolInfoInteger(_symbol,<sp/>SYMBOL_FILLING_MODE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ENUM_ORDER_TYPE_FILLING<sp/>GetFillingMode()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetFillingMode(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Buy<sp/>order<sp/>swap<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetSwapLong(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_SWAP_LONG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetSwapLong()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetSwapLong(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sell<sp/>order<sp/>swap<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetSwapShort(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_SWAP_SHORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetSwapShort()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetSwapShort(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Swap<sp/>calculation<sp/>model.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>ENUM_SYMBOL_SWAP_MODE<sp/>GetSwapMode(string<sp/>_symbol)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ENUM_SYMBOL_SWAP_MODE)<sp/>SymbolInfo::SymbolInfoInteger(_symbol,<sp/>SYMBOL_SWAP_MODE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ENUM_SYMBOL_SWAP_MODE<sp/>GetSwapMode()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetSwapMode(symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>initial<sp/>margin<sp/>(a<sp/>security<sp/>deposit)<sp/>requirements<sp/>for<sp/>opening<sp/>an<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_info_double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetMarginInit(string<sp/>_symbol,<sp/>ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>ORDER_TYPE_BUY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>amount<sp/>in<sp/>the<sp/>margin<sp/>currency<sp/>required<sp/>for<sp/>opening<sp/>an<sp/>order<sp/>with<sp/>the<sp/>volume<sp/>of<sp/>one<sp/>lot.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>It<sp/>is<sp/>used<sp/>for<sp/>checking<sp/>a<sp/>client&apos;s<sp/>assets<sp/>when<sp/>entering<sp/>the<sp/>market.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>MODE_MARGININIT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_MARGIN_INITIAL);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>In<sp/>MQL5,<sp/>SymbolInfoDouble()<sp/>is<sp/>used<sp/>for<sp/>stock<sp/>markets,<sp/>not<sp/>Forex<sp/>(https://www.mql5.com/en/forum/7418).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>So<sp/>we&apos;ve<sp/>to<sp/>use<sp/>OrderCalcMargin()<sp/>which<sp/>calculates<sp/>the<sp/>margin<sp/>required<sp/>for<sp/>the<sp/>specified<sp/>order<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_margin_init,<sp/>_margin_main;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>_result<sp/>=<sp/>SymbolInfoMarginRate(_symbol,<sp/>_cmd,<sp/>_margin_init,<sp/>_margin_main);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_result<sp/>?<sp/>_margin_init<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetMarginInit(ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>ORDER_TYPE_BUY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetMarginInit(symbol,<sp/>_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Return<sp/>the<sp/>maintenance<sp/>margin<sp/>to<sp/>maintain<sp/>open<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/environment_state/marketinfoconstants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/constants/environment_state/marketinfoconstants#enum_symbol_info_double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetMarginMaintenance(string<sp/>_symbol,<sp/>ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>ORDER_TYPE_BUY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>margin<sp/>amount<sp/>in<sp/>the<sp/>margin<sp/>currency<sp/>of<sp/>the<sp/>symbol,<sp/>charged<sp/>from<sp/>one<sp/>lot.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>It<sp/>is<sp/>used<sp/>for<sp/>checking<sp/>a<sp/>client&apos;s<sp/>assets<sp/>when<sp/>his/her<sp/>account<sp/>state<sp/>changes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>the<sp/>maintenance<sp/>margin<sp/>is<sp/>equal<sp/>to<sp/>0,<sp/>the<sp/>initial<sp/>margin<sp/>should<sp/>be<sp/>used.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Same<sp/>as:<sp/>MarketInfo(symbol,<sp/>SYMBOL_MARGIN_MAINTENANCE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>SYMBOL_MARGIN_MAINTENANCE);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>In<sp/>MQL5,<sp/>SymbolInfoDouble()<sp/>is<sp/>used<sp/>for<sp/>stock<sp/>markets,<sp/>not<sp/>Forex<sp/>(https://www.mql5.com/en/forum/7418).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>So<sp/>we&apos;ve<sp/>to<sp/>use<sp/>OrderCalcMargin()<sp/>which<sp/>calculates<sp/>the<sp/>margin<sp/>required<sp/>for<sp/>the<sp/>specified<sp/>order<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_margin_init,<sp/>_margin_main;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>_result<sp/>=<sp/>SymbolInfoMarginRate(_symbol,<sp/>_cmd,<sp/>_margin_init,<sp/>_margin_main);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_result<sp/>?<sp/>_margin_main<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>GetMarginMaintenance(ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>ORDER_TYPE_BUY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetMarginMaintenance(symbol,<sp/>_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Gets<sp/>symbol<sp/>entry.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SymbolInfoEntry<sp/>GetEntry(MqlTick<sp/>&amp;_tick)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SymbolInfoEntry<sp/>_entry(_tick,<sp/>symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_entry;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SymbolInfoEntry<sp/>GetEntry()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MqlTick<sp/>_tick<sp/>=<sp/>GetTick();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetEntry(_tick);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SymbolInfoEntry<sp/>GetEntryLast()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MqlTick<sp/>_tick<sp/>=<sp/>GetLastTick();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetEntry(_tick);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Tick<sp/>storage<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Appends<sp/>a<sp/>new<sp/>tick<sp/>to<sp/>an<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>SaveTick(MqlTick<sp/>&amp;_tick)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int<sp/>_index<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_index++<sp/>&gt;=<sp/>ArraySize(this.tick_data)<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArrayResize(this.tick_data,<sp/>_index<sp/>+<sp/>100,<sp/>1000)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Cannot<sp/>resize<sp/>array<sp/>(size:<sp/>%d)!&quot;,<sp/>_index),<sp/>__FUNCTION__);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.tick_data[_index]<sp/>=<sp/>this.GetTick();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Empties<sp/>the<sp/>tick<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>ResetTicks()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ArrayResize(this.tick_data,<sp/>0,<sp/>100)<sp/>!=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Setters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Overrides<sp/>the<sp/>last<sp/>tick.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>SetTick(MqlTick<sp/>&amp;_tick)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.last_tick<sp/>=<sp/>_tick;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>a<sp/>corresponding<sp/>property<sp/>of<sp/>the<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Symbol<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_SYMBOL_INFO_DOUBLE<sp/>prop_id</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Identifier<sp/>of<sp/>a<sp/>property.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>property.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>In<sp/>case<sp/>of<sp/>error,<sp/>information<sp/>can<sp/>be<sp/>obtained<sp/>using<sp/>GetLastError()<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/marketinformation/symbolinfodouble</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/marketinformation/symbolinfodouble</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>SymbolInfoDouble(string<sp/>name,<sp/>ENUM_SYMBOL_INFO_DOUBLE<sp/>prop_id)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQLBUILD__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::SymbolInfoDouble(name,<sp/>prop_id);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;@fixme:<sp/>%s\n&quot;,<sp/>&quot;Symbol::SymbolInfoDouble()&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>a<sp/>corresponding<sp/>property<sp/>of<sp/>the<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Symbol<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_SYMBOL_INFO_INTEGER<sp/>prop_id</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Identifier<sp/>of<sp/>a<sp/>property.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>long</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>property.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>In<sp/>case<sp/>of<sp/>error,<sp/>information<sp/>can<sp/>be<sp/>obtained<sp/>using<sp/>GetLastError()<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/marketinformation/symbolinfointeger</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/marketinformation/symbolinfointeger</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>long<sp/>SymbolInfoInteger(string<sp/>name,<sp/>ENUM_SYMBOL_INFO_INTEGER<sp/>prop_id)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQLBUILD__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::SymbolInfoInteger(name,<sp/>prop_id);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;@fixme:<sp/>%s\n&quot;,<sp/>&quot;SymbolInfo::SymbolInfoInteger()&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>a<sp/>corresponding<sp/>property<sp/>of<sp/>the<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Symbol<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_SYMBOL_INFO_STRING<sp/>prop_id</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Identifier<sp/>of<sp/>a<sp/>property.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>property.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>In<sp/>case<sp/>of<sp/>error,<sp/>information<sp/>can<sp/>be<sp/>obtained<sp/>using<sp/>GetLastError()<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/marketinformation/symbolinfostring</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/marketinformation/symbolinfostring</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>string<sp/>SymbolInfoString(string<sp/>name,<sp/>ENUM_SYMBOL_INFO_STRING<sp/>prop_id)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQLBUILD__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::SymbolInfoString(name,<sp/>prop_id);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;@fixme:<sp/>%s\n&quot;,<sp/>&quot;SymbolInfo::SymbolInfoString()&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Printer<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>symbol<sp/>information<sp/>in<sp/>string<sp/>format.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>ToString()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>StringFormat(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Symbol:<sp/>%s,<sp/>Last<sp/>Ask/Bid:<sp/>%g/%g,<sp/>Last<sp/>Price/Session<sp/>Volume:<sp/>%d/%g,<sp/>Point<sp/>size:<sp/>%g,<sp/>Pip<sp/>size:<sp/>%g,<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Tick<sp/>size:<sp/>%g<sp/>(%g<sp/>pts),<sp/>Tick<sp/>value:<sp/>%g<sp/>(%g/%g),<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Digits:<sp/>%d,<sp/>Spread:<sp/>%d<sp/>pts,<sp/>Trade<sp/>stops<sp/>level:<sp/>%d,<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Trade<sp/>contract<sp/>size:<sp/>%g,<sp/>Min<sp/>lot:<sp/>%g,<sp/>Max<sp/>lot:<sp/>%g,<sp/>Lot<sp/>step:<sp/>%g,<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Freeze<sp/>level:<sp/>%d,<sp/>Swap<sp/>(long/short/mode):<sp/>%g/%g/%d,<sp/>Margin<sp/>initial<sp/>(maintenance):<sp/>%g<sp/>(%g)&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetSymbol(),<sp/>GetLastAsk(),<sp/>GetLastBid(),<sp/>GetLastVolume(),<sp/>GetSessionVolume(),<sp/>GetPointSize(),<sp/>GetPipSize(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTickSize(),<sp/>GetTradeTickSize(),<sp/>GetTickValue(),<sp/>GetTickValueProfit(),<sp/>GetTickValueLoss(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetDigits(),<sp/>GetSpread(),<sp/>GetTradeStopsLevel(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTradeContractSize(),<sp/>GetVolumeMin(),<sp/>GetVolumeMax(),<sp/>GetVolumeStep(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetFreezeLevel(),<sp/>GetSwapLong(),<sp/>GetSwapShort(),<sp/>GetSwapMode(),<sp/>GetMarginInit(),<sp/>GetMarginMaintenance()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Returns<sp/>symbol<sp/>information<sp/>in<sp/>CSV<sp/>format.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>ToCSV(bool<sp/>_header<sp/>=<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!_header<sp/>?<sp/>StringFormat(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;%s,%g,%g,%d,%g,%g,%g,&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;%g,%g,%g,%g,%g,&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;%d,%d,%d,&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;%g,%g,%g,%g,&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;%d,%g,%g,%d,%g,%g&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetSymbol(),<sp/>GetLastAsk(),<sp/>GetLastBid(),<sp/>GetLastVolume(),<sp/>GetSessionVolume(),<sp/>GetPointSize(),<sp/>GetPipSize(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTickSize(),<sp/>GetTradeTickSize(),<sp/>GetTickValue(),<sp/>GetTickValueProfit(),<sp/>GetTickValueLoss(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetDigits(),<sp/>GetSpread(),<sp/>GetTradeStopsLevel(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetTradeContractSize(),<sp/>GetVolumeMin(),<sp/>GetVolumeMax(),<sp/>GetVolumeStep(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetFreezeLevel(),<sp/>GetSwapLong(),<sp/>GetSwapShort(),<sp/>GetSwapMode(),<sp/>GetMarginInit(),<sp/>GetMarginMaintenance()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Symbol,Last<sp/>Ask,Last<sp/>Bid,Last<sp/>Volume,Session<sp/>Volume,Point<sp/>Size,Pip<sp/>Size,&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Tick<sp/>Size,Tick<sp/>Size<sp/>(pts),Tick<sp/>Value,Tick<sp/>Value<sp/>Profit,Tick<sp/>Value<sp/>Loss,&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Digits,Spread<sp/>(pts),Trade<sp/>Stops,&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Trade<sp/>Contract<sp/>Size,Min<sp/>Lot,Max<sp/>Lot,Lot<sp/>Step,&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Freeze<sp/>level,<sp/>Swap<sp/>Long,<sp/>Swap<sp/>Short,<sp/>Swap<sp/>Mode,<sp/>Margin<sp/>Init&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>SYMBOLINFO_MQH</highlight></codeline>
    </programlisting>
    <location file="SymbolInfo.mqh"/>
  </compounddef>
</doxygen>
