<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_strategy_8mqh" kind="file" language="C++">
    <compoundname>Strategy.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Prevents<sp/>processing<sp/>this<sp/>includes<sp/>file<sp/>for<sp/>the<sp/>second<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>STRATEGY_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>STRATEGY_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Dict.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Indicator.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Object.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Strategy.enum.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Strategy.struct.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;String.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Task.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Defines.</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__input__</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>INPUT<sp/>extern</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>INPUT<sp/>static</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__input2__</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>INPUT2<sp/>extern</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>INPUT2<sp/>static</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__input3__</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>INPUT3<sp/>extern</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>INPUT3<sp/>static</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__optimize__</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OINPUT<sp/>extern</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OINPUT<sp/>static</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Implements<sp/>strategy<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Strategy<sp/>:<sp/>public<sp/>Object<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgParams<sp/>sparams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dict&lt;int,<sp/>double&gt;<sp/>ddata;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dict&lt;int,<sp/>float&gt;<sp/>fdata;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dict&lt;int,<sp/>int&gt;<sp/>idata;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DictStruct&lt;short,<sp/>TaskEntry&gt;<sp/>tasks;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MqlTick<sp/>last_tick;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgProcessResult<sp/>sresult;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Strategy<sp/>*strat_sl,<sp/>*strat_tp;<sp/><sp/>//<sp/>Strategy<sp/>pointers<sp/>for<sp/>stop-loss<sp/>and<sp/>profit-take.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Strategy<sp/>statistics.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgStats<sp/>stats;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgStatsPeriod<sp/>stats_period[FINAL_ENUM_STRATEGY_STATS_PERIOD];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Base<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Other<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>filter_method[];<sp/><sp/><sp/><sp/>//<sp/>Filter<sp/>method<sp/>to<sp/>consider<sp/>the<sp/>trade.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>open_condition[];<sp/><sp/><sp/>//<sp/>Open<sp/>conditions.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>close_condition[];<sp/><sp/>//<sp/>Close<sp/>conditions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Special<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Strategy(const<sp/>StgParams<sp/>&amp;_sparams,<sp/>string<sp/>_name<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Assign<sp/>struct.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>don&apos;t<sp/>want<sp/>objects<sp/>which<sp/>were<sp/>instantiated<sp/>by<sp/>default.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sparams.DeleteObjects();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sparams<sp/>=<sp/>_sparams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Initialize<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>name<sp/>=<sp/>_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlTick<sp/>_tick<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>last_tick<sp/>=<sp/>_tick;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Link<sp/>log<sp/>instances.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(Object::IsValid(sparams.trade))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Link(sparams.trade.Logger());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Statistics<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>UpdateOrderStats(EA_STATS_DAILY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>UpdateOrderStats(EA_STATS_WEEKLY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>UpdateOrderStats(EA_STATS_MONTHLY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>UpdateOrderStats(EA_STATS_TOTAL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Call<sp/>strategy&apos;s<sp/>OnInit<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Strategy::OnInit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>copy<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Strategy(const<sp/>Strategy<sp/>&amp;_strat)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sparams<sp/>=<sp/>_strat.GetParams();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>deconstructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>~Strategy()<sp/>{<sp/>sparams.DeleteObjects();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Processing<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Process<sp/>strategy&apos;s<sp/>signals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>bool<sp/>_should_open</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>True<sp/>if<sp/>method<sp/>should<sp/>open<sp/>the<sp/>orders,<sp/>otherwise<sp/>only<sp/>process<sp/>the<sp/>signals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>bool<sp/>_should_close</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>True<sp/>if<sp/>method<sp/>should<sp/>close<sp/>the<sp/>orders,<sp/>otherwise<sp/>only<sp/>process<sp/>the<sp/>signals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>StgProcessResult<sp/>struct.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgProcessResult<sp/>ProcessSignals(bool<sp/>_should_open<sp/>=<sp/>true,<sp/>bool<sp/>_should_close<sp/>=<sp/>true,<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>_bf<sp/>=<sp/>1.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>_ls<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>_scl<sp/>=<sp/>sparams.signal_close_level;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>_sol<sp/>=<sp/>sparams.signal_open_level;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_scm<sp/>=<sp/>sparams.signal_close_method;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_sob<sp/>=<sp/>sparams.signal_open_boost;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_sof<sp/>=<sp/>sparams.signal_open_filter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_som<sp/>=<sp/>sparams.signal_open_method;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.Reset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>boost<sp/>factor<sp/>and<sp/>lot<sp/>size.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.SetBoostFactor(sparams.IsBoosted()<sp/>?<sp/>SignalOpenBoost(ORDER_TYPE_BUY,<sp/>_sob)<sp/>:<sp/>1.0f);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.SetLotSize(sparams.GetLotSizeWithFactor());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>close<sp/>signals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_BUY_CLOSE,<sp/>SignalClose(ORDER_TYPE_BUY,<sp/>_scm,<sp/>_scl,<sp/>_shift));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_SELL_CLOSE,<sp/>SignalClose(ORDER_TYPE_SELL,<sp/>_scm,<sp/>_scl,<sp/>_shift));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>open<sp/>signals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_BUY_OPEN,<sp/>SignalOpen(ORDER_TYPE_BUY,<sp/>_som,<sp/>_sol,<sp/>_shift));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_BUY_PASS,<sp/>SignalOpenFilter(ORDER_TYPE_BUY,<sp/>_sof));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_SELL_OPEN,<sp/>SignalOpen(ORDER_TYPE_SELL,<sp/>_som,<sp/>_sol,<sp/>_shift));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_SELL_PASS,<sp/>SignalOpenFilter(ORDER_TYPE_SELL,<sp/>_sof));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>we<sp/>should<sp/>open<sp/>and/or<sp/>close<sp/>the<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_should_open)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Open<sp/>orders<sp/>on<sp/>signals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sresult.CheckSignalsAll(STRAT_SIGNAL_BUY_OPEN<sp/>|<sp/>STRAT_SIGNAL_BUY_PASS))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(OrderOpen(ORDER_TYPE_BUY,<sp/>sresult.GetLotSize(),<sp/>GetOrderOpenComment(&quot;SignalOpen&quot;)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_BUY_OPENED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sresult.CheckSignalsAll(STRAT_SIGNAL_SELL_OPEN<sp/>|<sp/>STRAT_SIGNAL_SELL_PASS))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(OrderOpen(ORDER_TYPE_SELL,<sp/>sresult.GetLotSize(),<sp/>GetOrderOpenComment(&quot;SignalOpen&quot;)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_BUY_OPENED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_should_close<sp/>&amp;&amp;<sp/>sparams.trade.HasActiveOrders())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Close<sp/>orders<sp/>on<sp/>signals.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sresult.CheckSignalsAll(STRAT_SIGNAL_BUY_CLOSE))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sparams.trade.OrdersCloseViaCmd(ORDER_TYPE_BUY,<sp/>GetOrderCloseComment(&quot;SignalClose&quot;))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_BUY_CLOSED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sresult.CheckSignalsAll(STRAT_SIGNAL_SELL_CLOSE))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sparams.trade.OrdersCloseViaCmd(ORDER_TYPE_SELL,<sp/>GetOrderCloseComment(&quot;SignalClose&quot;))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sresult.SetSignal(STRAT_SIGNAL_SELL_CLOSED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.ProcessLastError();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>sresult;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Process<sp/>strategy&apos;s<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>StgProcessResult<sp/>struct.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgProcessResult<sp/>ProcessOrders()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>sl_valid,<sp/>tp_valid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>sl_new,<sp/>tp_new;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Order<sp/>*_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DictStruct&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>*_orders_active<sp/>=<sp/>sparams.trade.GetOrdersActive();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(DictStructIterator&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>iter<sp/>=<sp/>_orders_active.Begin();<sp/>iter.IsValid();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_order<sp/>=<sp/>iter.Value().Ptr();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_order.IsOpen())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Strategy<sp/>*_strat_sl<sp/>=<sp/>strat_sl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Strategy<sp/>*_strat_tp<sp/>=<sp/>strat_tp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_order.Update();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_strat_sl<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>_strat_tp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl_new<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_strat_sl.PriceStop(_order.GetType(),<sp/>ORDER_TYPE_SL,<sp/>_strat_sl.GetParams().GetProperty(STRAT_PROP_PSM),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_strat_sl.GetParams().GetProperty(STRAT_PROP_PSL));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp_new<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_strat_tp.PriceStop(_order.GetType(),<sp/>ORDER_TYPE_TP,<sp/>_strat_tp.GetParams().GetProperty(STRAT_PROP_PPM),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_strat_tp.GetParams().GetProperty(STRAT_PROP_PPL));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl_new<sp/>=<sp/>Market().NormalizeSL(sl_new,<sp/>_order.GetType());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp_new<sp/>=<sp/>Market().NormalizeTP(tp_new,<sp/>_order.GetType());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sl_valid<sp/>=<sp/>sparams.trade.ValidSL(sl_new,<sp/>_order.GetType());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp_valid<sp/>=<sp/>sparams.trade.ValidTP(tp_new,<sp/>_order.GetType());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sl_valid<sp/>&amp;&amp;<sp/>tp_valid)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!_order.OrderModify(sl_new,<sp/>tp_new))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_order.Logger().Flush();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sresult.stops_invalid_sl<sp/>+=<sp/>(unsigned<sp/>short)sl_valid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sresult.stops_invalid_tp<sp/>+=<sp/>(unsigned<sp/>short)tp_valid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Error<sp/>loading<sp/>SL/TP<sp/>objects!&quot;,<sp/>__FUNCTION_LINE__);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.trade.OrderMoveToHistory(_order);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.ProcessLastError();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>sresult;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Process<sp/>strategy&apos;s<sp/>signals<sp/>and<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>ushort<sp/>_periods_started</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Periods<sp/>which<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>StgProcessResult<sp/>struct.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgProcessResult<sp/>Process(unsigned<sp/>short<sp/>_periods_started<sp/>=<sp/>DATETIME_NONE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sresult.last_error<sp/>=<sp/>ERR_NO_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessSignals();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessOrders();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_periods_started<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ProcessTasks();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>sresult;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Tasks<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Add<sp/>task.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>AddTask(TaskEntry<sp/>&amp;_entry)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_entry.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_entry.GetAction().GetType()<sp/>==<sp/>ACTION_TYPE_STRATEGY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_entry.SetActionObject(GetPointer(this));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_entry.GetCondition().GetType()<sp/>==<sp/>COND_TYPE_STRATEGY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_entry.SetConditionObject(GetPointer(this));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tasks.Push(_entry);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Process<sp/>strategy&apos;s<sp/>tasks.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>StgProcessResult<sp/>struct.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>ProcessTasks()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(DictStructIterator&lt;short,<sp/>TaskEntry&gt;<sp/>iter<sp/>=<sp/>tasks.Begin();<sp/>iter.IsValid();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>_is_processed<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>TaskEntry<sp/>_entry<sp/>=<sp/>iter.Value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_is_processed<sp/>=<sp/>Task::Process(_entry);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sresult.tasks_processed<sp/>+=<sp/>(unsigned<sp/>short)_is_processed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sresult.tasks_processed_not<sp/>+=<sp/>(unsigned<sp/>short)!_is_processed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>State<sp/>checkers<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Validate<sp/>strategy&apos;s<sp/>timeframe<sp/>and<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>strategy<sp/>params<sp/>are<sp/>valid,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsValid()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Object::IsValid(sparams.trade)<sp/>&amp;&amp;<sp/>Object::IsValid(sparams.GetChart())<sp/>&amp;&amp;<sp/>sparams.GetChart().IsValidTf();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>state<sp/>of<sp/>the<sp/>strategy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsEnabled()<sp/>{<sp/>return<sp/>sparams.IsEnabled();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>suspension<sp/>status<sp/>of<sp/>the<sp/>strategy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsSuspended()<sp/>{<sp/>return<sp/>sparams.IsSuspended();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>if<sp/>the<sp/>current<sp/>price<sp/>is<sp/>in<sp/>trend<sp/>given<sp/>the<sp/>order<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsTrend(ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_tvalue<sp/>=<sp/>TrendStrength();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_BUY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_tvalue<sp/>&gt;<sp/>sparams.trend_threshold;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_SELL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_tvalue<sp/>&lt;<sp/>-sparams.trend_threshold;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>state<sp/>of<sp/>the<sp/>strategy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsBoostEnabled()<sp/>{<sp/>return<sp/>sparams.IsBoosted();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Class<sp/>getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>strategy&apos;s<sp/>market<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Market<sp/>*Market()<sp/>{<sp/>return<sp/>sparams.trade.Market();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>strategy&apos;s<sp/>indicator<sp/>data<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Indicator<sp/>*Data()<sp/>{<sp/>return<sp/>sparams.data;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>strategy&apos;s<sp/>log<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log<sp/>*Logger()<sp/>{<sp/>return<sp/>sparams.logger.Ptr();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>handler<sp/>to<sp/>the<sp/>strategy&apos;s<sp/>trading<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Trade<sp/>*Trade()<sp/>{<sp/>return<sp/>sparams.trade;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>access<sp/>to<sp/>Chart<sp/>information.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Chart<sp/>*Chart()<sp/>{<sp/>return<sp/>sparams.GetChart();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>handler<sp/>to<sp/>the<sp/>strategy&apos;s<sp/>indicator<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Indicator<sp/>*Indicator()<sp/>{<sp/>return<sp/>sparams.data;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Struct<sp/>getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>result<sp/>of<sp/>the<sp/>last<sp/>signal<sp/>processing.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgProcessResult<sp/>GetProcessResult()<sp/>{<sp/>return<sp/>sresult;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>strategy<sp/>entry.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgEntry<sp/>GetEntry()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>StgEntry<sp/>_entry<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(ENUM_STRATEGY_STATS_PERIOD<sp/>_p<sp/>=<sp/>EA_STATS_DAILY;<sp/>_p<sp/>&lt;<sp/>FINAL_ENUM_STRATEGY_STATS_PERIOD;<sp/>_p++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_entry.SetStats(stats_period[_p],<sp/>_p);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_entry;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>GetName()<sp/>{<sp/>return<sp/>name;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>long<sp/>GetId()<sp/>{<sp/>return<sp/>sparams.id;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>weight.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Note:<sp/>Implementation<sp/>of<sp/>inherited<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>double<sp/>GetWeight()<sp/>{<sp/>return<sp/>sparams.weight;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>magic<sp/>number.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>long<sp/>GetMagicNo()<sp/>{<sp/>return<sp/>sparams.magic_no;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>timeframe.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ENUM_TIMEFRAMES<sp/>GetTf()<sp/>{<sp/>return<sp/>sparams.GetChart().GetTf();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>signal<sp/>open<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetSignalOpenMethod()<sp/>{<sp/>return<sp/>sparams.signal_open_method;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>signal<sp/>open<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetSignalOpenLevel()<sp/>{<sp/>return<sp/>sparams.signal_open_level;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>signal<sp/>close<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetSignalCloseMethod()<sp/>{<sp/>return<sp/>sparams.signal_close_method;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>signal<sp/>close<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetSignalCloseLevel()<sp/>{<sp/>return<sp/>sparams.signal_close_level;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>price<sp/>stop<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetPriceStopMethod()<sp/>{<sp/>return<sp/>sparams.signal_close_method;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>price<sp/>stop<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetPriceStopLevel()<sp/>{<sp/>return<sp/>sparams.signal_close_level;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>order<sp/>open<sp/>comment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>GetOrderOpenComment(string<sp/>_prefix<sp/>=<sp/>&quot;&quot;,<sp/>string<sp/>_suffix<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>StringFormat(&quot;%s%s[%s];s:%gp%s&quot;,<sp/>_prefix<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>_prefix<sp/>+<sp/>&quot;:<sp/>&quot;<sp/>:<sp/>&quot;&quot;,<sp/>name,<sp/>sparams.GetChart().TfToString(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrSpread(),<sp/>_suffix<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>&quot;|<sp/>&quot;<sp/>+<sp/>_suffix<sp/>:<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>order<sp/>close<sp/>comment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>GetOrderCloseComment(string<sp/>_prefix<sp/>=<sp/>&quot;&quot;,<sp/>string<sp/>_suffix<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>StringFormat(&quot;%s%s[%s];s:%gp%s&quot;,<sp/>_prefix<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>_prefix<sp/>+<sp/>&quot;:<sp/>&quot;<sp/>:<sp/>&quot;&quot;,<sp/>name,<sp/>sparams.GetChart().TfToString(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrSpread(),<sp/>_suffix<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>&quot;|<sp/>&quot;<sp/>+<sp/>_suffix<sp/>:<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy<sp/>orders<sp/>currently<sp/>open.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint<sp/>GetOrdersOpen()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>UpdateOrderStats(EA_STATS_TOTAL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>stats.orders_open;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>strategy&apos;s<sp/>params.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StgParams<sp/>GetParams()<sp/>const<sp/>{<sp/>return<sp/>sparams;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>custom<sp/>data.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dict&lt;int,<sp/>double&gt;<sp/>*GetDataD()<sp/>{<sp/>return<sp/>&amp;ddata;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dict&lt;int,<sp/>float&gt;<sp/>*GetDataF()<sp/>{<sp/>return<sp/>&amp;fdata;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Dict&lt;int,<sp/>int&gt;<sp/>*GetDataI()<sp/>{<sp/>return<sp/>&amp;idata;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Statistics<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>strategy<sp/>orders<sp/>total<sp/>opened.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint<sp/>GetOrdersTotal(ENUM_STRATEGY_STATS_PERIOD<sp/>_period<sp/>=<sp/>EA_STATS_TOTAL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateOrderStats(_period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>stats_period[_period].orders_total;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>strategy<sp/>orders<sp/>won.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint<sp/>GetOrdersWon(ENUM_STRATEGY_STATS_PERIOD<sp/>_period<sp/>=<sp/>EA_STATS_TOTAL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateOrderStats(_period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>stats_period[_period].orders_won;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>strategy<sp/>orders<sp/>lost.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint<sp/>GetOrdersLost(ENUM_STRATEGY_STATS_PERIOD<sp/>_period<sp/>=<sp/>EA_STATS_TOTAL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateOrderStats(_period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>stats_period[_period].orders_lost;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>strategy<sp/>net<sp/>profit.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetNetProfit(ENUM_STRATEGY_STATS_PERIOD<sp/>_period<sp/>=<sp/>EA_STATS_TOTAL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateOrderStats(_period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>stats_period[_period].net_profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>strategy<sp/>gross<sp/>profit.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetGrossProfit(ENUM_STRATEGY_STATS_PERIOD<sp/>_period<sp/>=<sp/>EA_STATS_TOTAL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateOrderStats(_period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>stats_period[_period].gross_profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>strategy<sp/>gross<sp/>loss.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetGrossLoss(ENUM_STRATEGY_STATS_PERIOD<sp/>_period<sp/>=<sp/>EA_STATS_TOTAL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateOrderStats(_period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>stats_period[_period].gross_loss;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>the<sp/>average<sp/>spread<sp/>of<sp/>the<sp/>strategy<sp/>(in<sp/>pips).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetAvgSpread(ENUM_STRATEGY_STATS_PERIOD<sp/>_period<sp/>=<sp/>EA_STATS_TOTAL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>UpdateOrderStats(_period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>stats_period[_period].avg_spread;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Setters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetName(string<sp/>_name)<sp/>{<sp/>name<sp/>=<sp/>_name;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetId(long<sp/>_id)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sparams.id<sp/>=<sp/>_id;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>((Object<sp/>*)GetPointer(this)).SetId(_id);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>stops.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetStops(Strategy<sp/>*_strat_sl<sp/>=<sp/>NULL,<sp/>Strategy<sp/>*_strat_tp<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>strat_sl<sp/>=<sp/>_strat_sl<sp/>!=<sp/>NULL<sp/>?<sp/>_strat_sl<sp/>:<sp/>strat_sl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>strat_tp<sp/>=<sp/>_strat_tp<sp/>!=<sp/>NULL<sp/>?<sp/>_strat_tp<sp/>:<sp/>strat_tp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>weight.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetWeight(float<sp/>_weight)<sp/>{<sp/>sparams.weight<sp/>=<sp/>_weight;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>magic<sp/>number.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetMagicNo(unsigned<sp/>long<sp/>_magic_no)<sp/>{<sp/>sparams.magic_no<sp/>=<sp/>_magic_no;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>signal<sp/>open<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetSignalOpenMethod(int<sp/>_method)<sp/>{<sp/>sparams.signal_open_method<sp/>=<sp/>_method;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>signal<sp/>open<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetSignalOpenLevel(float<sp/>_level)<sp/>{<sp/>sparams.signal_open_level<sp/>=<sp/>_level;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>signal<sp/>close<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetSignalCloseMethod(int<sp/>_method)<sp/>{<sp/>sparams.signal_close_method<sp/>=<sp/>_method;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>signal<sp/>close<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetSignalCloseLevel(float<sp/>_level)<sp/>{<sp/>sparams.signal_close_level<sp/>=<sp/>_level;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>price<sp/>stop<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetPriceStopMethod(int<sp/>_method)<sp/>{<sp/>sparams.signal_close_method<sp/>=<sp/>_method;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>strategy&apos;s<sp/>price<sp/>stop<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetPriceStopLevel(float<sp/>_level)<sp/>{<sp/>sparams.signal_close_level<sp/>=<sp/>_level;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Enable/disable<sp/>the<sp/>strategy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>Enabled(bool<sp/>_enable<sp/>=<sp/>true)<sp/>{<sp/>sparams.Enabled(_enable);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Suspend<sp/>the<sp/>strategy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>Suspended(bool<sp/>_suspended<sp/>=<sp/>true)<sp/>{<sp/>sparams.Suspended(_suspended);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>custom<sp/>data.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetData(Dict&lt;int,<sp/>double&gt;<sp/>*_ddata)<sp/>{<sp/>ddata<sp/>=<sp/>_ddata;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetData(Dict&lt;int,<sp/>float&gt;<sp/>*_fdata)<sp/>{<sp/>fdata<sp/>=<sp/>_fdata;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetData(Dict&lt;int,<sp/>int&gt;<sp/>*_idata)<sp/>{<sp/>idata<sp/>=<sp/>_idata;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Static<sp/>setters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>initial<sp/>params<sp/>based<sp/>on<sp/>the<sp/>timeframe.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>SetParamsByTf(T<sp/>&amp;_result,<sp/>ENUM_TIMEFRAMES<sp/>_tf,<sp/>T<sp/>&amp;_m1,<sp/>T<sp/>&amp;_m5,<sp/>T<sp/>&amp;_m15,<sp/>T<sp/>&amp;_m30,<sp/>T<sp/>&amp;_h1,<sp/>T<sp/>&amp;_h4,<sp/>T<sp/>&amp;_h8)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_tf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PERIOD_M1:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_m1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PERIOD_M5:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_m5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PERIOD_M15:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_m15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PERIOD_M30:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_m30;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PERIOD_H1:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_h1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PERIOD_H4:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_h4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PERIOD_H8:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_h8;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Calculation<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>lot<sp/>size<sp/>factor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>UpdateLotSizeFactor()<sp/>{<sp/>return<sp/>1.0;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Update<sp/>order<sp/>stat<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>UpdateOrderStats(ENUM_STRATEGY_STATS_PERIOD<sp/>_period)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Implement<sp/>support<sp/>for<sp/>_period.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>datetime<sp/>_last_update<sp/>=<sp/>TimeCurrent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_last_update<sp/>&gt;<sp/>TimeCurrent()<sp/>-<sp/>sparams.refresh_time)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;<sp/><sp/>//<sp/>Do<sp/>not<sp/>update<sp/>too<sp/>often.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>_total<sp/>=<sp/>0,<sp/>_won<sp/>=<sp/>0,<sp/>_lost<sp/>=<sp/>0,<sp/>_open<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_gross_profit<sp/>=<sp/>0,<sp/>_gross_loss<sp/>=<sp/>0,<sp/>_net_profit<sp/>=<sp/>0,<sp/>_order_profit<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>_order_datetime;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Trade::OrdersTotal();<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Select<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Market().GetSymbol()<sp/>==<sp/>Order::OrderSymbol()<sp/>&amp;&amp;<sp/>sparams.magic_no<sp/>==<sp/>Order::OrderMagicNumber())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_total++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_order_profit<sp/>=<sp/>Order::OrderProfit()<sp/>-<sp/>Order::OrderCommission()<sp/>-<sp/>Order::OrderSwap();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_net_profit<sp/>+=<sp/>_order_profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Order::OrderSelect(i,<sp/>SELECT_BY_POS,<sp/>MODE_TRADES))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_open++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_order_datetime<sp/>=<sp/>(datetime)OrderGetInteger(ORDER_TIME_DONE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>s_daily_net_profit<sp/>+=<sp/>@todo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>s_weekly_net_profit<sp/>+=<sp/>@todo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>s_monhtly_net_profit<sp/>+=<sp/>@todo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_order_profit<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_won++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gross_profit<sp/>+=<sp/>_order_profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lost++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_gross_loss<sp/>+=<sp/>_order_profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>stats.orders_open<sp/>=<sp/>_open;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stats_period[_period].orders_won<sp/>=<sp/>_won;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stats_period[_period].orders_lost<sp/>=<sp/>_lost;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stats_period[_period].orders_total<sp/>=<sp/>_total;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stats_period[_period].net_profit<sp/>=<sp/>_net_profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stats_period[_period].gross_profit<sp/>=<sp/>_gross_loss;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stats_period[_period].gross_loss<sp/>=<sp/>_gross_profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>stats_period[_period].profit_factor<sp/>=<sp/>_profit_factor;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_last_update<sp/>=<sp/>TimeCurrent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>profit<sp/>factor<sp/>of<sp/>the<sp/>strategy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetProfitFactor()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>current<sp/>spread<sp/>(in<sp/>pips).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetCurrSpread()<sp/>{<sp/>return<sp/>sparams.GetChart().GetSpreadInPips();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Convert<sp/>timeframe<sp/>constant<sp/>to<sp/>index<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint<sp/>TfToIndex(ENUM_TIMEFRAMES<sp/>_tf)<sp/>{<sp/>return<sp/>Chart::TfToIndex(_tf);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Strategy()<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Trading<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_lot_size<sp/>=<sp/>si_lot_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_lot_factor<sp/>=<sp/>GetLotSizeFactor();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_avg_spread<sp/>=<sp/>GetCurrSpread();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_tp_max<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_sl_max<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Statistics<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_orders_open<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetOrdersOpen();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_orders_total<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetOrdersTotal();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_orders_won<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetOrdersWon();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_orders_lost<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetOrdersLost();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_profit_factor<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetProfitFactor();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_avg_spread<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetAvgSpread();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_total_net_profit<sp/><sp/><sp/><sp/>=<sp/>GetTotalNetProfit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_total_gross_profit<sp/><sp/>=<sp/>GetTotalGrossProfit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_total_gross_loss<sp/><sp/><sp/><sp/>=<sp/>GetTotalGrossLoss();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_daily_net_profit<sp/><sp/><sp/><sp/>=<sp/>GetDailyNetProfit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_weekly_net_profit<sp/><sp/><sp/>=<sp/>GetWeeklyNetProfit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_monhtly_net_profit<sp/><sp/>=<sp/>GetMonthlyNetProfit();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Other<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s_refresh_time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Initialize<sp/>strategy.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>Init()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!sparams.GetChart().IsValidTf())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Warning(StringFormat(&quot;Could<sp/>not<sp/>initialize<sp/>%s<sp/>since<sp/>%s<sp/>timeframe<sp/>is<sp/>not<sp/>active!&quot;,<sp/>GetName(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.GetChart().TfToString()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FUNCTION__<sp/>+<sp/>&quot;:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Orders<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Open<sp/>an<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>OrderOpen(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>double<sp/>_lot_size<sp/>=<sp/>0,<sp/>string<sp/>_comment<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!sparams.trade.IsOrderAllowed())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Limit<sp/>of<sp/>open<sp/>and<sp/>pending<sp/>orders<sp/>has<sp/>reached<sp/>the<sp/>limit!&quot;,<sp/>__FUNCTION_LINE__);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prepare<sp/>order<sp/>request.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlTradeRequest<sp/>_request<sp/>=<sp/>{0};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.action<sp/>=<sp/>TRADE_ACTION_DEAL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.comment<sp/>=<sp/>_comment;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.deviation<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.magic<sp/>=<sp/>GetMagicNo();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.price<sp/>=<sp/>Market().GetOpenOffer(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.symbol<sp/>=<sp/>Market().GetSymbol();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.type<sp/>=<sp/>_cmd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.type_filling<sp/>=<sp/>Order::GetOrderFilling(_request.symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_request.volume<sp/>=<sp/>_lot_size<sp/>&gt;<sp/>0<sp/>?<sp/>_lot_size<sp/>:<sp/>fmax(sparams.GetLotSize(),<sp/>Market().GetVolumeMin());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ResetLastError();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(sparams.trade.Account().GetAccountFreeMarginCheck(_request.type,<sp/>_request.volume)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Prepare<sp/>order<sp/>parameters.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OrderParams<sp/>_oparams;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sparams.order_close_time<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MqlParam<sp/>_cond_args[]<sp/>=<sp/>{{TYPE_INT,<sp/>0}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cond_args[0].integer_value<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.order_close_time<sp/>&gt;<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>sparams.order_close_time<sp/>*<sp/>60</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(int)round(-sparams.order_close_time<sp/>*<sp/>sparams.GetChart().GetPeriodSeconds());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_oparams.SetConditionClose(ORDER_COND_LIFETIME_GT_ARG,<sp/>_cond_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>new<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Order<sp/>*_order<sp/>=<sp/>new<sp/>Order(_request,<sp/>_oparams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>sparams.trade.OrderAdd(_order);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OnOrderOpen(_order);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;No<sp/>free<sp/>margin<sp/>to<sp/>open<sp/>more<sp/>orders!&quot;,<sp/>__FUNCTION_LINE__);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Conditions<sp/>and<sp/>actions<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>for<sp/>Strategy<sp/>condition.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_STRATEGY_CONDITION<sp/>_cond</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Strategy<sp/>condition.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_STRATEGY_CONDITION<sp/>_cond,<sp/>MqlParam<sp/>&amp;_args[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>_arg1l<sp/>=<sp/>ArraySize(_args)<sp/>&gt;<sp/>0<sp/>?<sp/>Convert::MqlParamToInteger(_args[0])<sp/>:<sp/>WRONG_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_COND_IS_ENABLED:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>sparams.IsEnabled();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_COND_IS_SUSPENDED:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>sparams.IsSuspended();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_COND_IS_TREND:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_arg1l<sp/>=<sp/>_arg1l<sp/>!=<sp/>WRONG_VALUE<sp/>?<sp/>_arg1l<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>IsTrend((ENUM_ORDER_TYPE)_arg1l);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_COND_SIGNALOPEN:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>ArraySize(_args)<sp/>&gt;<sp/>1<sp/>?<sp/>(ENUM_ORDER_TYPE)_args[0].integer_value<sp/>:<sp/>ORDER_TYPE_BUY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>_method<sp/>=<sp/>ArraySize(_args)<sp/>&gt;<sp/>1<sp/>?<sp/>(int)_args[1].integer_value<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_level<sp/>=<sp/>ArraySize(_args)<sp/>&gt;<sp/>2<sp/>?<sp/>(float)_args[2].double_value<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SignalOpen(_cmd,<sp/>_method,<sp/>_level);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Invalid<sp/>EA<sp/>condition:<sp/>%s!&quot;,<sp/>EnumToString(_cond),<sp/>__FUNCTION_LINE__));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_STRATEGY_CONDITION<sp/>_cond,<sp/>long<sp/>_arg1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_args[]<sp/>=<sp/>{{TYPE_LONG}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_args[0].integer_value<sp/>=<sp/>_arg1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Strategy::CheckCondition(_cond,<sp/>_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_STRATEGY_CONDITION<sp/>_cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_args[]<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>CheckCondition(_cond,<sp/>_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Execute<sp/>Strategy<sp/>action.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_STRATEGY_ACTION<sp/>_action</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Strategy<sp/>action<sp/>to<sp/>execute.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>MqlParam<sp/>_args</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Strategy<sp/>action<sp/>arguments.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>the<sp/>action<sp/>has<sp/>been<sp/>executed<sp/>successfully.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ExecuteAction(ENUM_STRATEGY_ACTION<sp/>_action,<sp/>MqlParam<sp/>&amp;_args[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>arg1d<sp/>=<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>arg2d<sp/>=<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>arg1i<sp/>=<sp/>EMPTY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>arg2i<sp/>=<sp/>EMPTY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>arg_size<sp/>=<sp/>ArraySize(_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(arg_size<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg1d<sp/>=<sp/>_args[0].type<sp/>==<sp/>TYPE_DOUBLE<sp/>?<sp/>_args[0].double_value<sp/>:<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg1i<sp/>=<sp/>_args[0].type<sp/>==<sp/>TYPE_INT<sp/>?<sp/>_args[0].integer_value<sp/>:<sp/>EMPTY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(arg_size<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg2d<sp/>=<sp/>_args[1].type<sp/>==<sp/>TYPE_DOUBLE<sp/>?<sp/>_args[1].double_value<sp/>:<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg2i<sp/>=<sp/>_args[1].type<sp/>==<sp/>TYPE_INT<sp/>?<sp/>_args[1].integer_value<sp/>:<sp/>EMPTY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_action)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_DISABLE:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.Enabled(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_ENABLE:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.Enabled(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_SET_PPL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.SetPriceProfitLevel((float)arg1d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_SET_PPM:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.SetPriceProfitMethod((int)arg1i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_SET_PROP:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_args[1].type<sp/>==<sp/>TYPE_INT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.SetProperty((ENUM_STRATEGY_PROP_INT)arg1i,<sp/>(int)arg2i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.SetProperty((ENUM_STRATEGY_PROP_DBL)arg1i,<sp/>(float)arg2d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_SET_PSL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.SetPriceStopLevel((float)arg1d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_SET_PSM:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.SetPriceStopMethod((int)arg1i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_SUSPEND:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.Suspended(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>STRAT_ACTION_UNSUSPEND:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparams.Suspended(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Invalid<sp/>Strategy<sp/>action:<sp/>%s!&quot;,<sp/>EnumToString(_action),<sp/>__FUNCTION_LINE__));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ExecuteAction(ENUM_STRATEGY_ACTION<sp/>_action)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_args[]<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Strategy::ExecuteAction(_action,<sp/>_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Printers<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Prints<sp/>strategy&apos;s<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>ToString()<sp/>{<sp/>return<sp/>StringFormat(&quot;%s:<sp/>%s&quot;,<sp/>GetName(),<sp/>sparams.ToString());<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Virtual<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Event<sp/>on<sp/>order<sp/>close.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>OnOrderClose(Order<sp/>*_order)<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Event<sp/>on<sp/>strategy&apos;s<sp/>init.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>OnInit()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SetStops(GetPointer(this),<sp/>GetPointer(this));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(sparams.trade<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sparams.trade.SetStrategy(&amp;this);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Event<sp/>on<sp/>strategy&apos;s<sp/>order<sp/>open.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_order<sp/>Order<sp/>Instance<sp/>of<sp/>order<sp/>which<sp/>got<sp/>opened.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>OnOrderOpen(const<sp/>Order<sp/>&amp;_order)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(Logger().GetLevel()<sp/>&gt;=<sp/>V_INFO)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Info(_order.ToString(),<sp/>(string)_order.GetTicket());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResetLastError();<sp/>//<sp/>@fixme:<sp/>Error<sp/>69539</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Event<sp/>on<sp/>new<sp/>time<sp/>periods.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>unsigned<sp/>short<sp/>_periods<sp/>=<sp/>(DATETIME_MINUTE<sp/>|<sp/>DATETIME_HOUR);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>OnPeriod(_periods);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_periods<sp/>unsigned<sp/>short</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>List<sp/>of<sp/>periods<sp/>which<sp/>started.<sp/>See:<sp/>ENUM_DATETIME_UNIT.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>OnPeriod(unsigned<sp/>short<sp/>_periods<sp/>=<sp/>DATETIME_NONE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((_periods<sp/>&amp;<sp/>DATETIME_MINUTE)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>New<sp/>minute<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((_periods<sp/>&amp;<sp/>DATETIME_HOUR)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>New<sp/>hour<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((_periods<sp/>&amp;<sp/>DATETIME_DAY)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>New<sp/>day<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((_periods<sp/>&amp;<sp/>DATETIME_WEEK)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>New<sp/>week<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((_periods<sp/>&amp;<sp/>DATETIME_MONTH)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>New<sp/>month<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((_periods<sp/>&amp;<sp/>DATETIME_YEAR)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>New<sp/>year<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Filters<sp/>strategy&apos;s<sp/>market<sp/>tick.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_method<sp/>-<sp/>signal<sp/>method<sp/>to<sp/>filter<sp/>a<sp/>tick<sp/>(bitwise<sp/>AND<sp/>operation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@result<sp/>bool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>tick<sp/>should<sp/>be<sp/>processed,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>TickFilter(const<sp/>MqlTick<sp/>&amp;_tick,<sp/>const<sp/>int<sp/>_method)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_res<sp/>=<sp/>_method<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_method<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>0))<sp/>{<sp/><sp/>//<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>on<sp/>every<sp/>minute.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_res<sp/>|=<sp/>_tick.time<sp/>%<sp/>60<sp/>&lt;<sp/>last_tick.time<sp/>%<sp/>60;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>1))<sp/>{<sp/><sp/>//<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>low<sp/>and<sp/>high<sp/>ticks<sp/>of<sp/>a<sp/>bar.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_res<sp/>|=<sp/>_tick.bid<sp/>&gt;=<sp/>sparams.GetChart().GetHigh()<sp/>||<sp/>_tick.bid<sp/>&lt;=<sp/>sparams.GetChart().GetLow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>2))<sp/>{<sp/><sp/>//<sp/>4</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>only<sp/>peak<sp/>prices<sp/>of<sp/>each<sp/>minute.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>double<sp/>_peak_high<sp/>=<sp/>_tick.bid,<sp/>_peak_low<sp/>=<sp/>_tick.bid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_tick.time<sp/>%<sp/>60<sp/>&lt;<sp/>last_tick.time<sp/>%<sp/>60)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Resets<sp/>peaks<sp/>each<sp/>minute.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_peak_high<sp/>=<sp/>_peak_low<sp/>=<sp/>_tick.bid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Sets<sp/>new<sp/>peaks.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_peak_high<sp/>=<sp/>_tick.bid<sp/>&gt;<sp/>_peak_high<sp/>?<sp/>_tick.bid<sp/>:<sp/>_peak_high;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_peak_low<sp/>=<sp/>_tick.bid<sp/>&lt;<sp/>_peak_low<sp/>?<sp/>_tick.bid<sp/>:<sp/>_peak_low;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_res<sp/>|=<sp/>(_tick.bid<sp/>==<sp/>_peak_high)<sp/>||<sp/>(_tick.bid<sp/>==<sp/>_peak_low);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>3))<sp/>{<sp/><sp/>//<sp/>8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>only<sp/>unique<sp/>ticks<sp/>(avoid<sp/>duplicates).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_res<sp/>|=<sp/>_tick.bid<sp/>!=<sp/>last_tick.bid<sp/>&amp;&amp;<sp/>_tick.ask<sp/>!=<sp/>last_tick.ask;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>4))<sp/>{<sp/><sp/>//<sp/>16</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>ticks<sp/>in<sp/>the<sp/>middle<sp/>of<sp/>the<sp/>bar.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_res<sp/>|=<sp/>(sparams.GetChart().iTime()<sp/>+<sp/>(sparams.GetChart().GetPeriodSeconds()<sp/>/<sp/>2))<sp/>==<sp/>TimeCurrent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>5))<sp/>{<sp/><sp/>//<sp/>32</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>bar<sp/>open<sp/>price<sp/>ticks.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_res<sp/>|=<sp/>last_tick.time<sp/>&lt;<sp/>sparams.GetChart().GetBarTime();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>6))<sp/>{<sp/><sp/>//<sp/>64</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>every<sp/>10th<sp/>of<sp/>the<sp/>bar.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_res<sp/>|=<sp/>TimeCurrent()<sp/>%<sp/>(int)(sparams.GetChart().GetPeriodSeconds()<sp/>/<sp/>10)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>7))<sp/>{<sp/><sp/>//<sp/>128</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Process<sp/>tick<sp/>on<sp/>every<sp/>10<sp/>seconds.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_res<sp/>|=<sp/>_tick.time<sp/>%<sp/>10<sp/>&lt;<sp/>last_tick.time<sp/>%<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_tick<sp/>=<sp/>_tick;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>TickFilter(const<sp/>MqlTick<sp/>&amp;_tick)<sp/>{<sp/>return<sp/>TickFilter(_tick,<sp/>sparams.tick_filter_method);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>strategy&apos;s<sp/>trade<sp/>open<sp/>signal.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_cmd<sp/><sp/><sp/><sp/>-<sp/>type<sp/>of<sp/>trade<sp/>order<sp/>command</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_method<sp/>-<sp/>signal<sp/>method<sp/>to<sp/>open<sp/>a<sp/>trade<sp/>(bitwise<sp/>AND<sp/>operation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_level<sp/><sp/>-<sp/>signal<sp/>level<sp/>to<sp/>open<sp/>a<sp/>trade<sp/>(bitwise<sp/>AND<sp/>operation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@result<sp/>bool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>trade<sp/>should<sp/>be<sp/>opened,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>SignalOpen(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>int<sp/>_method<sp/>=<sp/>0,<sp/>float<sp/>_level<sp/>=<sp/>0.0f,<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>strategy&apos;s<sp/>trade<sp/>open<sp/>signal<sp/>additional<sp/>filter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_cmd<sp/><sp/><sp/><sp/>-<sp/>type<sp/>of<sp/>trade<sp/>order<sp/>command</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_method<sp/>-<sp/>signal<sp/>method<sp/>to<sp/>filter<sp/>a<sp/>trade<sp/>(bitwise<sp/>AND<sp/>operation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@result<sp/>bool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>trade<sp/>should<sp/>be<sp/>opened,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>SignalOpenFilter(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>int<sp/>_method<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_method<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>0))<sp/>_result<sp/>&amp;=<sp/>!sparams.trade.HasBarOrder(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>1))<sp/>_result<sp/>&amp;=<sp/>IsTrend(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>2))<sp/>_result<sp/>&amp;=<sp/>sparams.trade.IsPivot(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>3))<sp/>_result<sp/>&amp;=<sp/>DateTime::IsPeakHour();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(METHOD(_method,<sp/>4))<sp/>_result<sp/>&amp;=<sp/>sparams.trade.IsPeak(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(METHOD(_method,<sp/>5))<sp/>_result<sp/>&amp;=<sp/>Trade().IsRoundNumber(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(METHOD(_method,<sp/>6))<sp/>_result<sp/>&amp;=<sp/>Trade().IsHedging(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>strategy&apos;s<sp/>lot<sp/>size<sp/>boost<sp/>for<sp/>the<sp/>open<sp/>signal.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_cmd<sp/><sp/><sp/><sp/>-<sp/>type<sp/>of<sp/>trade<sp/>order<sp/>command</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_method<sp/>-<sp/>boost<sp/>method<sp/>(bitwise<sp/>AND<sp/>operation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@result<sp/>double</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>lot<sp/>size<sp/>multiplier<sp/>(0.0<sp/>=<sp/>normal,<sp/>0.1<sp/>=<sp/>1/10,<sp/>1.0<sp/>=<sp/>normal,<sp/>2.0<sp/>=<sp/>2x).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Range:<sp/>between<sp/>0.0<sp/>and<sp/>(max_risk<sp/>*<sp/>2).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>float<sp/>SignalOpenBoost(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>int<sp/>_method<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>_result<sp/>=<sp/>1.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_method<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(METHOD(_method,<sp/>0))<sp/>if<sp/>(Trade().IsTrend(_cmd))<sp/>_result<sp/>*=<sp/>1.1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(METHOD(_method,<sp/>1))<sp/>if<sp/>(Trade().IsPivot(_cmd))<sp/>_result<sp/>*=<sp/>1.1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(METHOD(_method,<sp/>2))<sp/>if<sp/>(Trade().IsPeakHours(_cmd))<sp/>_result<sp/>*=<sp/>1.1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(METHOD(_method,<sp/>3))<sp/>if<sp/>(Trade().IsRoundNumber(_cmd))<sp/>_result<sp/>*=<sp/>1.1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(METHOD(_method,<sp/>4))<sp/>if<sp/>(Trade().IsHedging(_cmd))<sp/>_result<sp/>*=<sp/>1.1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(METHOD(_method,<sp/>5))<sp/>if<sp/>(Trade().IsPeakBar(_cmd))<sp/>_result<sp/>*=<sp/>1.1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>strategy&apos;s<sp/>trade<sp/>close<sp/>signal.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_cmd<sp/><sp/><sp/><sp/>-<sp/>type<sp/>of<sp/>trade<sp/>order<sp/>command</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_method<sp/>-<sp/>signal<sp/>method<sp/>to<sp/>close<sp/>a<sp/>trade<sp/>(bitwise<sp/>AND<sp/>operation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_level<sp/><sp/>-<sp/>signal<sp/>level<sp/>to<sp/>close<sp/>a<sp/>trade<sp/>(bitwise<sp/>AND<sp/>operation)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@result<sp/>bool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>trade<sp/>should<sp/>be<sp/>closed,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>SignalClose(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>int<sp/>_method<sp/>=<sp/>0,<sp/>float<sp/>_level<sp/>=<sp/>0.0f,<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SignalOpen(Order::NegateOrderType(_cmd),<sp/>_method,<sp/>_level,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>price<sp/>stop<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_cmd<sp/><sp/><sp/><sp/>-<sp/>type<sp/>of<sp/>trade<sp/>order<sp/>command</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_mode<sp/><sp/><sp/>-<sp/>mode<sp/>for<sp/>price<sp/>stop<sp/>value<sp/>(ORDER_TYPE_TP<sp/>or<sp/>ORDER_TYPE_SL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_method<sp/>-<sp/>method<sp/>to<sp/>calculate<sp/>the<sp/>price<sp/>stop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_level<sp/><sp/>-<sp/>level<sp/>value<sp/>to<sp/>use<sp/>for<sp/>calculation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@result<sp/>bool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>current<sp/>stop<sp/>loss<sp/>value<sp/>when<sp/>_mode<sp/>is<sp/>ORDER_TYPE_SL</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>and<sp/>profit<sp/>take<sp/>when<sp/>_mode<sp/>is<sp/>ORDER_TYPE_TP.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>float<sp/>PriceStop(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>ENUM_ORDER_TYPE_VALUE<sp/>_mode,<sp/>int<sp/>_method<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_level<sp/>=<sp/>0.0f)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>trend<sp/>strength<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_tf<sp/>-<sp/>timeframe<sp/>to<sp/>use<sp/>for<sp/>trend<sp/>calculation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@result<sp/>bool</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>trend<sp/>strength<sp/>value<sp/>from<sp/>-1<sp/>(strong<sp/>bearish)<sp/>to<sp/>+1<sp/>(strong<sp/>bullish).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Value<sp/>closer<sp/>to<sp/>0<sp/>indicates<sp/>a<sp/>neutral<sp/>trend.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>float<sp/>TrendStrength(ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_D1,<sp/>int<sp/>_shift<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>_result<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Chart<sp/>*_c<sp/>=<sp/>sparams.GetChart();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_c.IsValidShift(_shift))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_bar1<sp/>=<sp/>_c.GetEntry(_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_range<sp/>=<sp/>_bar1.bar.ohlc.GetRange();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_range<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_open<sp/>=<sp/>(float)_c.GetOpen(_tf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_pp<sp/>=<sp/>_bar1.bar.ohlc.GetPivot();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>1<sp/>/<sp/>_range<sp/>*<sp/>(_open<sp/>-<sp/>_pp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>fmin(1,<sp/>fmax(-1,<sp/>_result));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Serializers<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>serialized<sp/>representation<sp/>of<sp/>the<sp/>object<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SerializerNodeType<sp/>Serialize(Serializer<sp/>&amp;_s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>_sparams<sp/>=<sp/>sparams.ToString();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>_sresults<sp/>=<sp/>sresult.ToString();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.Pass(this,<sp/>&quot;sparams&quot;,<sp/>_sparams);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.Pass(this,<sp/>&quot;sresults&quot;,<sp/>_sresults);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SerializerNodeObject;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/><sp/>//<sp/>STRATEGY_MQH</highlight></codeline>
    </programlisting>
    <location file="Strategy.mqh"/>
  </compounddef>
</doxygen>
