<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_account_8mqh" kind="file" language="C++">
    <compoundname>Account.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Prevents<sp/>processing<sp/>this<sp/>includes<sp/>file<sp/>for<sp/>the<sp/>second<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>ACCOUNT_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ACCOUNT_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Forward<sp/>class<sp/>declaration.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Account;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Account.enum.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Account.struct.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Array.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Chart.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Convert.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Orders.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;SymbolInfo.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Class<sp/>to<sp/>provide<sp/>functions<sp/>that<sp/>return<sp/>parameters<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Account<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Struct<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AccountSnapshot<sp/>snapshots[];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>init_balance,<sp/>start_balance,<sp/>start_credit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Store<sp/>daily,<sp/>weekly<sp/>and<sp/>monthly<sp/>account<sp/>statistics.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>acc_stats[FINAL_ENUM_ACC_STAT_VALUE][FINAL_ENUM_ACC_STAT_PERIOD][FINAL_ENUM_ACC_STAT_TYPE]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[FINAL_ENUM_ACC_STAT_INDEX];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Class<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Orders<sp/>*trades;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Orders<sp/>*history;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Orders<sp/>*dummy;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Defines.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ACC_OP_BALANCE<sp/>6<sp/><sp/>//<sp/>Undocumented<sp/>balance<sp/>history<sp/>statement<sp/>entry.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ACC_OP_CREDIT<sp/>7<sp/><sp/><sp/>//<sp/>Undocumented<sp/>credit<sp/>history<sp/>statement<sp/>entry.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Account()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>init_balance(CalcInitDeposit()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_balance(GetBalance()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_credit(GetCredit()),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trades(new<sp/>Orders(ORDERS_POOL_TRADES)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>history(new<sp/>Orders(ORDERS_POOL_HISTORY)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dummy(new<sp/>Orders(ORDERS_POOL_DUMMY))<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>deconstructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>~Account()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>trades;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>history;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>dummy;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>MT<sp/>account<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>current<sp/>account<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>AccountName()<sp/>{<sp/>return<sp/>AccountInfoString(ACCOUNT_NAME);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>GetAccountName()<sp/>{<sp/>return<sp/>AccountName();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>connected<sp/>server<sp/>name.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>AccountServer()<sp/>{<sp/>return<sp/>AccountInfoString(ACCOUNT_SERVER);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>GetServerName()<sp/>{<sp/>return<sp/>AccountServer();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>currency<sp/>name<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>AccountCurrency()<sp/>{<sp/>return<sp/>AccountInfoString(ACCOUNT_CURRENCY);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>GetCurrency()<sp/>{<sp/>return<sp/>AccountCurrency();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>brokerage<sp/>company<sp/>name<sp/>where<sp/>the<sp/>current<sp/>account<sp/>was<sp/>registered.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>AccountCompany()<sp/>{<sp/>return<sp/>AccountInfoString(ACCOUNT_COMPANY);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>GetCompanyName()<sp/>{<sp/>return<sp/>AccountCompany();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Double<sp/>getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>balance<sp/>value<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountBalance()<sp/>{<sp/>return<sp/>AccountInfoDouble(ACCOUNT_BALANCE);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetBalance()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Adds<sp/>caching.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>return<sp/>UpdateStats(ACC_BALANCE,<sp/>AccountBalance());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Account::AccountBalance();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>credit<sp/>value<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountCredit()<sp/>{<sp/>return<sp/>AccountInfoDouble(ACCOUNT_CREDIT);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetCredit()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Adds<sp/>caching.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>return<sp/>UpdateStats(ACC_CREDIT,<sp/>AccountCredit());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Account::AccountCredit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>profit<sp/>value<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountProfit()<sp/>{<sp/>return<sp/>AccountInfoDouble(ACCOUNT_PROFIT);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetProfit()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Adds<sp/>caching.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>return<sp/>UpdateStats(ACC_PROFIT,<sp/>AccountProfit());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Account::AccountProfit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>equity<sp/>value<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountEquity()<sp/>{<sp/>return<sp/>AccountInfoDouble(ACCOUNT_EQUITY);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetEquity()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Adds<sp/>caching.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>return<sp/>UpdateStats(ACC_EQUITY,<sp/>AccountEquity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Account::AccountEquity();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>margin<sp/>value<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountMargin()<sp/>{<sp/>return<sp/>AccountInfoDouble(ACCOUNT_MARGIN);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMarginUsed()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Adds<sp/>caching.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>return<sp/>UpdateStats(ACC_MARGIN_USED,<sp/>AccountMargin());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Account::AccountMargin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>account<sp/>available<sp/>margin<sp/>in<sp/>percentage.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMarginUsedInPct()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>100<sp/>/<sp/>GetMarginAvail()<sp/>*<sp/>GetMarginUsed();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>free<sp/>margin<sp/>value<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountFreeMargin()<sp/>{<sp/>return<sp/>AccountInfoDouble(ACCOUNT_MARGIN_FREE);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMarginFree()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Adds<sp/>caching.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>return<sp/>UpdateStats(ACC_MARGIN_FREE,<sp/>AccountFreeMargin());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Account::AccountFreeMargin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>current<sp/>account<sp/>number.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>AccountNumber()<sp/>{<sp/>return<sp/>AccountInfoInteger(ACCOUNT_LOGIN);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>long<sp/>GetLogin()<sp/>{<sp/>return<sp/>AccountNumber();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>leverage<sp/>of<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>AccountLeverage()<sp/>{<sp/>return<sp/>AccountInfoInteger(ACCOUNT_LEVERAGE);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>long<sp/>GetLeverage()<sp/>{<sp/>return<sp/>AccountLeverage();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>calculation<sp/>mode<sp/>for<sp/>the<sp/>Stop<sp/>Out<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>AccountStopoutMode()<sp/>{<sp/>return<sp/>(int)AccountInfoInteger(ACCOUNT_MARGIN_SO_MODE);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetStopoutMode()<sp/>{<sp/>return<sp/>AccountStopoutMode();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>Stop<sp/>Out<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Depending<sp/>on<sp/>the<sp/>set<sp/>ACCOUNT_MARGIN_SO_MODE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>is<sp/>expressed<sp/>in<sp/>percents<sp/>or<sp/>in<sp/>the<sp/>deposit<sp/>currency.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountStopoutLevel()<sp/>{<sp/>return<sp/>AccountInfoDouble(ACCOUNT_MARGIN_SO_SO);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetStopoutLevel()<sp/>{<sp/>return<sp/>AccountStopoutLevel();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>a<sp/>maximum<sp/>allowed<sp/>number<sp/>of<sp/>active<sp/>pending<sp/>orders<sp/>set<sp/>by<sp/>broker.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>the<sp/>limit<sp/>orders<sp/>(0<sp/>for<sp/>unlimited).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>AccountLimitOrders()<sp/>{<sp/>return<sp/>AccountInfoInteger(ACCOUNT_LIMIT_ORDERS);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>long<sp/>GetLimitOrders(uint<sp/>_max<sp/>=<sp/>999)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>_limit<sp/>=<sp/>AccountLimitOrders();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_limit<sp/>&gt;<sp/>0<sp/>?<sp/>_limit<sp/>:<sp/>_max;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Other<sp/>account<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>account<sp/>total<sp/>balance<sp/>(including<sp/>credit).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountTotalBalance()<sp/>{<sp/>return<sp/>AccountBalance()<sp/>+<sp/>AccountCredit();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetTotalBalance()<sp/>{<sp/>return<sp/>GetBalance()<sp/>+<sp/>GetCredit();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>account<sp/>available<sp/>margin.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountAvailMargin()<sp/>{<sp/>return<sp/>fmin(AccountFreeMargin(),<sp/>AccountTotalBalance());<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMarginAvail()<sp/>{<sp/>return<sp/>AccountAvailMargin();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>calculation<sp/>mode<sp/>of<sp/>free<sp/>margin<sp/>allowed<sp/>to<sp/>open<sp/>orders<sp/>on<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountFreeMarginMode()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>The<sp/>calculation<sp/>mode<sp/>can<sp/>take<sp/>the<sp/>following<sp/>values:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>0<sp/>-<sp/>floating<sp/>profit/loss<sp/>is<sp/>not<sp/>used<sp/>for<sp/>calculation;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>1<sp/>-<sp/>both<sp/>floating<sp/>profit<sp/>and<sp/>loss<sp/>on<sp/>opened<sp/>orders<sp/>on<sp/>the<sp/>current<sp/>account<sp/>are<sp/>used<sp/>for<sp/>free<sp/>margin<sp/>calculation;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>2<sp/>-<sp/>only<sp/>profit<sp/>value<sp/>is<sp/>used<sp/>for<sp/>calculation,<sp/>the<sp/>current<sp/>loss<sp/>on<sp/>opened<sp/>orders<sp/>is<sp/>not<sp/>considered;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>3<sp/>-<sp/>only<sp/>loss<sp/>value<sp/>is<sp/>used<sp/>for<sp/>calculation,<sp/>the<sp/>current<sp/>loss<sp/>on<sp/>opened<sp/>orders<sp/>is<sp/>not<sp/>considered.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::AccountFreeMarginMode();</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Not<sp/>implemented<sp/>yet.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>GetAccountFreeMarginMode()<sp/>{<sp/>return<sp/>Account::AccountFreeMarginMode();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>State<sp/>checkers<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Indicates<sp/>if<sp/>an<sp/>Expert<sp/>Advisor<sp/>is<sp/>allowed<sp/>to<sp/>trade<sp/>on<sp/>the<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>IsExpertEnabled()<sp/>{<sp/>return<sp/>(bool)AccountInfoInteger(ACCOUNT_TRADE_EXPERT);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>the<sp/>permission<sp/>to<sp/>trade<sp/>for<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>IsTradeAllowed()<sp/>{<sp/>return<sp/>(bool)AccountInfoInteger(ACCOUNT_TRADE_ALLOWED);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>if<sp/>the<sp/>Expert<sp/>Advisor<sp/>runs<sp/>on<sp/>a<sp/>demo<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>IsDemo()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::IsDemo();</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>AccountInfoInteger(ACCOUNT_TRADE_MODE)<sp/>==<sp/>ACCOUNT_TRADE_MODE_DEMO;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>type<sp/>of<sp/>account<sp/>(Demo<sp/>or<sp/>Live).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>GetType()<sp/>{<sp/>return<sp/>Account::GetServerName()<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>(IsDemo()<sp/>?<sp/>&quot;Demo&quot;<sp/>:<sp/>&quot;Live&quot;)<sp/>:<sp/>&quot;Off-line&quot;;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Setters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>UpdateStats(ENUM_ACC_STAT_VALUE<sp/>_type,<sp/>double<sp/>_value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>datetime<sp/>_last_check<sp/>=<sp/>TimeCurrent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_stats_rotate<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(uint<sp/>_pindex<sp/>=<sp/>0;<sp/>_pindex<sp/>&lt;<sp/>FINAL_ENUM_ACC_STAT_PERIOD;<sp/>_pindex++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_MIN][ACC_VALUE_CURR]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmin(acc_stats[_type][_pindex][ACC_VALUE_MIN][ACC_VALUE_CURR],<sp/>_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_MAX][ACC_VALUE_CURR]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmin(acc_stats[_type][_pindex][ACC_VALUE_MAX][ACC_VALUE_CURR],<sp/>_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_AVG][ACC_VALUE_CURR]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(acc_stats[_type][_pindex][ACC_VALUE_AVG][ACC_VALUE_CURR]<sp/>+<sp/>_value)<sp/>/<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(_pindex)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACC_DAILY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats_rotate<sp/>=<sp/>_last_check<sp/>&lt;<sp/>Chart::iTime(_Symbol,<sp/>PERIOD_D1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACC_WEEKLY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats_rotate<sp/>=<sp/>_last_check<sp/>&lt;<sp/>Chart::iTime(_Symbol,<sp/>PERIOD_W1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACC_MONTHLY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_stats_rotate<sp/>=<sp/>_last_check<sp/>&lt;<sp/>Chart::iTime(_Symbol,<sp/>PERIOD_MN1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_stats_rotate)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_MIN][ACC_VALUE_PREV]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_MIN][ACC_VALUE_CURR];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_MAX][ACC_VALUE_PREV]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_MAX][ACC_VALUE_CURR];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_AVG][ACC_VALUE_PREV]<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_AVG][ACC_VALUE_CURR];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_MIN][ACC_VALUE_CURR]<sp/>=<sp/>_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_MAX][ACC_VALUE_CURR]<sp/>=<sp/>_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_stats[_type][_pindex][ACC_VALUE_AVG][ACC_VALUE_CURR]<sp/>=<sp/>_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_last_check<sp/>=<sp/>TimeCurrent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Class<sp/>getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>account<sp/>init<sp/>balance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetInitBalance()<sp/>{<sp/>return<sp/>init_balance;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>account<sp/>start<sp/>balance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetStartBalance()<sp/>{<sp/>return<sp/>start_balance;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>account<sp/>init<sp/>credit.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetStartCredit()<sp/>{<sp/>return<sp/>start_credit;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Calculation<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>account<sp/>stopout<sp/>level<sp/>in<sp/>range:<sp/>0.0<sp/>-<sp/>1.0<sp/>where<sp/>1.0<sp/>is<sp/>100%.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Note:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/>-<sp/>if(AccountEquity()/AccountMargin()*100<sp/>&lt;<sp/>AccountStopoutLevel())<sp/>{<sp/>BrokerClosesOrders();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>GetAccountStopoutLevel()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>mode<sp/>=<sp/>AccountStopoutMode();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>level<sp/>=<sp/>AccountStopoutLevel();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(mode<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>level<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculation<sp/>of<sp/>percentage<sp/>ratio<sp/>between<sp/>margin<sp/>and<sp/>equity.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(double)level<sp/>/<sp/>100;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(mode<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Comparison<sp/>of<sp/>the<sp/>free<sp/>margin<sp/>level<sp/>to<sp/>the<sp/>absolute<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>1.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Add<sp/>logging.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(verbose)<sp/>PrintFormat(&quot;%s():<sp/>Not<sp/>supported<sp/>mode<sp/>(%d).&quot;,<sp/>__FUNCTION__,<sp/>mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>1.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>free<sp/>margin<sp/>that<sp/>remains<sp/>after<sp/>the<sp/>specified<sp/>order<sp/>has<sp/>been<sp/>opened<sp/>at<sp/>the<sp/>current<sp/>price<sp/>on<sp/>the<sp/>current</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Free<sp/>margin<sp/>that<sp/>remains<sp/>after<sp/>the<sp/>specified<sp/>order<sp/>has<sp/>been<sp/>opened<sp/>at<sp/>the<sp/>current<sp/>price<sp/>on<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>free<sp/>margin<sp/>is<sp/>insufficient,<sp/>an<sp/>error<sp/>134<sp/>(ERR_NOT_ENOUGH_MONEY)<sp/>will<sp/>be<sp/>generated.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>AccountFreeMarginCheck(string<sp/>_symbol,<sp/>ENUM_ORDER_TYPE<sp/>_cmd,<sp/>double<sp/>_volume)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Notes:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>AccountFreeMarginCheck<sp/>=<sp/><sp/>FreeMargin<sp/>-<sp/>Margin1Lot<sp/>*<sp/>Lot;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>FreeMargin<sp/>=<sp/>Equity<sp/>-<sp/>Margin;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Equity<sp/>=<sp/>Balance<sp/>+<sp/>Profit;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>FreeMargin<sp/>=<sp/><sp/>Balance<sp/>+<sp/>Profit<sp/>-<sp/>Margin;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>AccountFreeMarginCheck<sp/>=<sp/>Balance<sp/>+<sp/>Profit<sp/>-<sp/>Margin<sp/>-<sp/>Margin1Lot<sp/>*<sp/>Lot;</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::AccountFreeMarginCheck(_symbol,<sp/>_cmd,<sp/>_volume);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@see:<sp/>CAccountInfo::FreeMarginCheck</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_margin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(::OrderCalcMargin(_cmd,<sp/>_symbol,<sp/>_volume,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SymbolInfo::SymbolInfoDouble(_symbol,<sp/>(_cmd<sp/>==<sp/>ORDER_TYPE_BUY)<sp/>?<sp/>SYMBOL_ASK<sp/>:<sp/>SYMBOL_BID),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_margin)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>AccountInfoDouble(ACCOUNT_MARGIN_FREE)<sp/>-<sp/>_margin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>-1);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetAccountFreeMarginCheck(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>double<sp/>_volume)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>AccountFreeMarginCheck(_Symbol,<sp/>_cmd,<sp/>_volume);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>current<sp/>account<sp/>drawdown<sp/>in<sp/>percent.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>GetDrawdownInPct()<sp/>{<sp/>return<sp/>(100<sp/>/<sp/>AccountTotalBalance())<sp/>*<sp/>(AccountTotalBalance()<sp/>-<sp/>AccountEquity());<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>current<sp/>account<sp/>risk<sp/>margin<sp/>level.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>The<sp/>risk<sp/>is<sp/>calculated<sp/>based<sp/>on<sp/>the<sp/>stop<sp/>loss<sp/>sum<sp/>of<sp/>opened<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>value<sp/>from<sp/>0.0<sp/>(no<sp/>risk)<sp/>and<sp/>1.0<sp/>(100%<sp/>risk).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>The<sp/>risk<sp/>higher<sp/>than<sp/>1.0<sp/>means<sp/>that<sp/>the<sp/>risk<sp/>is<sp/>extremely<sp/>high.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetRiskMarginLevel(ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_avail_margin<sp/>=<sp/>AccountAvailMargin()<sp/>*<sp/>Convert::ValueToMoney(trades.TotalSL(_cmd));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_avail_margin<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>/<sp/>_avail_margin<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>initial<sp/>deposit<sp/>based<sp/>on<sp/>the<sp/>current<sp/>balance<sp/>and<sp/>previous<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>CalcInitDeposit()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>deposit<sp/>=<sp/>AccountInfoDouble(ACCOUNT_BALANCE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>Account::OrdersHistoryTotal()<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!Order::TryOrderSelect(i,<sp/>SELECT_BY_POS,<sp/>MODE_HISTORY))<sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>type<sp/>=<sp/>Order::OrderType();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initial<sp/>balance<sp/>not<sp/>considered.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>type<sp/>==<sp/>ACC_OP_BALANCE)<sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(type<sp/>==<sp/>ORDER_TYPE_BUY<sp/>||<sp/>type<sp/>==<sp/>ORDER_TYPE_SELL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>profit.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>profit<sp/>=<sp/>Order::OrderProfit()<sp/>+<sp/>Order::OrderCommission()<sp/>+<sp/>Order::OrderSwap();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>decrease<sp/>balance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deposit<sp/>-=<sp/>profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(type<sp/>==<sp/>ACC_OP_BALANCE<sp/>||<sp/>type<sp/>==<sp/>ACC_OP_CREDIT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deposit<sp/>-=<sp/>Order::OrderProfit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>deposit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>closed<sp/>orders<sp/>in<sp/>the<sp/>account<sp/>history<sp/>loaded<sp/>into<sp/>the<sp/>terminal.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>OrdersHistoryTotal()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::OrdersHistoryTotal();</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::HistorySelect(0,<sp/>TimeCurrent());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::HistoryOrdersTotal();</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculate<sp/>total<sp/>profit.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetTotalProfit()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>total_profit<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>id<sp/>=<sp/>0;<sp/>id<sp/>&lt;<sp/>ArrayRange(stats,<sp/>0);<sp/>id++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_profit<sp/>+=<sp/>stats[id][TOTAL_NET_PROFIT];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>total_profit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>min/max/avg<sp/>daily/weekly/monthly<sp/>account<sp/>balance/equity/margin.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetStatValue(ENUM_ACC_STAT_VALUE<sp/>_value_type,<sp/>ENUM_ACC_STAT_PERIOD<sp/>_period,<sp/>ENUM_ACC_STAT_TYPE<sp/>_stat_type,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_ACC_STAT_INDEX<sp/>_shift<sp/>=<sp/>ACC_VALUE_CURR)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@fixme</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>acc_stats[_value_type][_period][_stat_type][_shift];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>State<sp/>checkers<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>account<sp/>free<sp/>margin.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true,<sp/>when<sp/>free<sp/>margin<sp/>is<sp/>sufficient,<sp/>false<sp/>when<sp/>insufficient<sp/>or<sp/>on<sp/>error.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsFreeMargin(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>double<sp/>size_of_lot,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_res<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>margin<sp/>=<sp/>AccountFreeMarginCheck(_symbol,<sp/>_cmd,<sp/>size_of_lot);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(GetLastError()<sp/>==<sp/>134<sp/>/*<sp/>NOT_ENOUGH_MONEY<sp/>*/)<sp/>_res<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(_res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Conditions<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>for<sp/>account<sp/>condition.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_ACCOUNT_CONDITION<sp/>_cond</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Account<sp/>condition.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_ACCOUNT_CONDITION<sp/>_cond,<sp/>MqlParam<sp/>&amp;_args[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BALM_GT_YEARLY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BALM_LT_YEARLY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BALT_GT_WEEKLY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trade.Account().GetStatValue(ACC_BALANCE,<sp/>ACC_DAILY,<sp/><sp/>(ENUM_ACC_STAT_TYPE)<sp/>fmin(0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmax(FINAL_ENUM_ACC_STAT_TYPE<sp/>-<sp/>1,<sp/>GetArg(_index,<sp/>0,<sp/>ACC_VALUE_MAX))))<sp/>&gt;<sp/>trade.Account().GetStatValue(ACC_BALANCE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ACC_WEEKLY,<sp/>(ENUM_ACC_STAT_TYPE)<sp/>fmin(0,<sp/>fmax(FINAL_ENUM_ACC_STAT_TYPE<sp/>-<sp/>1,<sp/>GetArg(_index,<sp/>0,<sp/>ACC_VALUE_MAX))));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BALT_IN_LOSS:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BALT_IN_PROFIT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BALT_LT_WEEKLY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trade.Account().GetStatValue(ACC_BALANCE,<sp/>ACC_DAILY,<sp/><sp/>(ENUM_ACC_STAT_TYPE)<sp/>fmin(0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmax(FINAL_ENUM_ACC_STAT_TYPE<sp/>-<sp/>1,<sp/>GetArg(_index,<sp/>0,<sp/>ACC_VALUE_MAX))))<sp/>&lt;<sp/>trade.Account().GetStatValue(ACC_BALANCE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ACC_WEEKLY,<sp/>(ENUM_ACC_STAT_TYPE)<sp/>fmin(0,<sp/>fmax(FINAL_ENUM_ACC_STAT_TYPE<sp/>-<sp/>1,<sp/>GetArg(_index,<sp/>0,<sp/>ACC_VALUE_MAX))));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BALW_GT_MONTHLY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trade.Account().GetStatValue(ACC_BALANCE,<sp/>ACC_WEEKLY,<sp/><sp/>(ENUM_ACC_STAT_TYPE)<sp/>fmin(0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmax(FINAL_ENUM_ACC_STAT_TYPE<sp/>-<sp/>1,<sp/>GetArg(_index,<sp/>0,<sp/>ACC_VALUE_MAX))))<sp/>&gt;<sp/>trade.Account().GetStatValue(ACC_BALANCE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ACC_MONTHLY,<sp/>(ENUM_ACC_STAT_TYPE)<sp/>fmin(0,<sp/>fmax(FINAL_ENUM_ACC_STAT_TYPE<sp/>-<sp/>1,<sp/>GetArg(_index,<sp/>0,<sp/>ACC_VALUE_MAX))));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BALW_LT_MONTHLY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trade.Account().GetStatValue(ACC_BALANCE,<sp/>ACC_WEEKLY,<sp/><sp/>(ENUM_ACC_STAT_TYPE)<sp/>fmin(0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmax(FINAL_ENUM_ACC_STAT_TYPE<sp/>-<sp/>1,<sp/>GetArg(_index,<sp/>0,<sp/>ACC_VALUE_MAX))))<sp/>&lt;<sp/>trade.Account().GetStatValue(ACC_BALANCE,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ACC_MONTHLY,<sp/>(ENUM_ACC_STAT_TYPE)<sp/>fmin(0,<sp/>fmax(FINAL_ENUM_ACC_STAT_TYPE<sp/>-<sp/>1,<sp/>GetArg(_index,<sp/>0,<sp/>1))));<sp/>case</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ACCOUNT_COND_BALY_IN_LOSS:<sp/>return<sp/>trade.Account().GetProfit()<sp/>&lt;<sp/>trade.Account().GetProfit()<sp/>/<sp/>100<sp/>*<sp/>(100<sp/>-</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetArg(_index,<sp/>0,<sp/>10));<sp/>case<sp/>ACCOUNT_COND_BALY_IN_PROFIT:<sp/>return<sp/>trade.Account().GetProfit()<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trade.Account().GetProfit()<sp/>/<sp/>100<sp/>*<sp/>(100<sp/>+<sp/>GetArg(_index,<sp/>0,<sp/>10));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BAL_IN_LOSS:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetBalance()<sp/>&lt;<sp/>start_balance;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_BAL_IN_PROFIT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetBalance()<sp/>&gt;<sp/>start_balance;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_01PC_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountEquity()<sp/>&gt;<sp/>(AccountBalance()<sp/>+<sp/>AccountCredit())<sp/>/<sp/>100<sp/>*<sp/>101;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_01PC_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountEquity()<sp/>&gt;<sp/>(AccountBalance()<sp/>+<sp/>AccountCredit())<sp/>/<sp/>100<sp/>*<sp/>99;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_05PC_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountEquity()<sp/>&gt;<sp/>(AccountBalance()<sp/>+<sp/>AccountCredit())<sp/>/<sp/>100<sp/>*<sp/>105;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_05PC_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountEquity()<sp/>&gt;<sp/>(AccountBalance()<sp/>+<sp/>AccountCredit())<sp/>/<sp/>100<sp/>*<sp/>95;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_10PC_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountEquity()<sp/>&gt;<sp/>(AccountBalance()<sp/>+<sp/>AccountCredit())<sp/>/<sp/>100<sp/>*<sp/>110;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_10PC_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountEquity()<sp/>&gt;<sp/>(AccountBalance()<sp/>+<sp/>AccountCredit())<sp/>/<sp/>100<sp/>*<sp/>90;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_20PC_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountEquity()<sp/>&gt;<sp/>(AccountBalance()<sp/>+<sp/>AccountCredit())<sp/>/<sp/>100<sp/>*<sp/>120;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_20PC_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountEquity()<sp/>&gt;<sp/>(AccountBalance()<sp/>+<sp/>AccountCredit())<sp/>/<sp/>100<sp/>*<sp/>80;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_IN_LOSS:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetEquity()<sp/>&lt;<sp/>GetTotalBalance();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_EQUITY_IN_PROFIT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetEquity()<sp/>&gt;<sp/>GetTotalBalance();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_MARGIN_CALL_10PC:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_MARGIN_CALL_20PC:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_MARGIN_USED_10PC:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountMargin()<sp/>&gt;=<sp/>AccountEquity()<sp/>/<sp/>100<sp/>*<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_MARGIN_USED_20PC:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountMargin()<sp/>&gt;=<sp/>AccountEquity()<sp/>/<sp/>100<sp/>*<sp/>20;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_MARGIN_USED_50PC:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountMargin()<sp/>&gt;=<sp/>AccountEquity()<sp/>/<sp/>100<sp/>*<sp/>50;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_MARGIN_USED_80PC:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountMargin()<sp/>&gt;=<sp/>AccountEquity()<sp/>/<sp/>100<sp/>*<sp/>80;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ACCOUNT_COND_MARGIN_USED_99PC:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>AccountMargin()<sp/>&gt;=<sp/>AccountEquity()<sp/>/<sp/>100<sp/>*<sp/>99;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>logger.Error(StringFormat(&quot;Invalid<sp/>account<sp/>condition:<sp/>%s!&quot;,<sp/>EnumToString(_cond),<sp/>__FUNCTION_LINE__));</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__debug__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(StringFormat(&quot;%s:<sp/>Error:<sp/>Invalid<sp/>account<sp/>condition:<sp/>%d!&quot;,<sp/>__FUNCTION__,<sp/>_cond));</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_ACCOUNT_CONDITION<sp/>_cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_args[]<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Account::CheckCondition(_cond,<sp/>_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Printers<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>text<sp/>info<sp/>about<sp/>the<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>ToString()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>StringFormat(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Type:<sp/>%s,<sp/>Server/Company/Name:<sp/>%s/%s/%s,<sp/>Currency:<sp/>%s,<sp/>Balance:<sp/>%g,<sp/>Credit:<sp/>%g,<sp/>Equity:<sp/>%g,<sp/>Profit:<sp/>%g,<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Margin<sp/>Used/Free/Avail:<sp/>%g(%.1f%%)/%g/%g,<sp/>Orders<sp/>limit:<sp/>%g:<sp/>Leverage:<sp/>1:%d,<sp/>StopOut<sp/>Level:<sp/>%d<sp/>(Mode:<sp/>%d)&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetType(),<sp/>GetServerName(),<sp/>GetCompanyName(),<sp/>GetAccountName(),<sp/>GetCurrency(),<sp/>GetBalance(),<sp/>GetCredit(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetEquity(),<sp/>GetProfit(),<sp/>GetMarginUsed(),<sp/>GetMarginUsedInPct(),<sp/>GetMarginFree(),<sp/>GetMarginAvail(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetLimitOrders(),<sp/>GetLeverage(),<sp/>GetStopoutLevel(),<sp/>GetStopoutMode());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>info<sp/>about<sp/>the<sp/>account<sp/>in<sp/>CSV<sp/>format.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>ToCSV()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>StringFormat(&quot;%g,%g,%g,%g,%g,%g&quot;,<sp/>GetTotalBalance(),<sp/>GetEquity(),<sp/>GetProfit(),<sp/>GetMarginUsed(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetMarginFree(),<sp/>GetMarginAvail());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Snapshots<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Create<sp/>a<sp/>market<sp/>snapshot.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>MakeSnapshot()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>_size<sp/>=<sp/>Array::ArraySize(snapshots);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ArrayResize(snapshots,<sp/>_size<sp/>+<sp/>1,<sp/>100))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshots[_size].dtime<sp/>=<sp/>TimeCurrent();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshots[_size].balance<sp/>=<sp/>GetBalance();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshots[_size].credit<sp/>=<sp/>GetCredit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshots[_size].equity<sp/>=<sp/>GetEquity();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshots[_size].profit<sp/>=<sp/>GetProfit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshots[_size].margin_used<sp/>=<sp/>GetMarginUsed();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshots[_size].margin_free<sp/>=<sp/>GetMarginFree();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snapshots[_size].margin_avail<sp/>=<sp/>GetMarginAvail();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Class<sp/>access<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>Orders<sp/>class<sp/>to<sp/>access<sp/>the<sp/>current<sp/>trades.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Orders<sp/>*Trades()<sp/>{<sp/>return<sp/>trades;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Orders<sp/>*History()<sp/>{<sp/>return<sp/>history;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Orders<sp/>*Dummy()<sp/>{<sp/>return<sp/>dummy;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Serializers<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>serialized<sp/>representation<sp/>of<sp/>the<sp/>object<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SerializerNodeType<sp/>Serialize(Serializer<sp/>&amp;_s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>_text<sp/>=<sp/>ToString();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.Pass(this,<sp/>&quot;value&quot;,<sp/>_text);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SerializerNodeObject;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/><sp/>//<sp/>ACCOUNT_MQH</highlight></codeline>
    </programlisting>
    <location file="Account.mqh"/>
  </compounddef>
</doxygen>
