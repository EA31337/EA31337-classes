<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_trade_8mqh" kind="file" language="C++">
    <compoundname>Trade.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Forward<sp/>declaration.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Trade;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Trade<sp/>class</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>TRADE_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TRADE_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Account.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Action.enum.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Chart.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Condition.enum.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Convert.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;DictStruct.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Math.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Object.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Strategy.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Trade.enum.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Trade.struct.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Trade<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DictStruct&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>orders_active;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DictStruct&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>orders_history;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DictStruct&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>orders_pending;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TradeParams<sp/>tparams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Ref&lt;Order&gt;<sp/>order_last;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Strategy<sp/>*strategy;<sp/><sp/>//<sp/>Optional<sp/>pointer<sp/>to<sp/>Strategy<sp/>class.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Trade()<sp/>:<sp/>tparams(new<sp/>Account,<sp/>new<sp/>Chart,<sp/>new<sp/>Log),<sp/>order_last(NULL){};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Trade(ENUM_TIMEFRAMES<sp/>_tf,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>tparams(new<sp/>Account,<sp/>new<sp/>Chart(_tf,<sp/>_symbol),<sp/>new<sp/>Log),<sp/>order_last(NULL){};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Trade(TradeParams<sp/>&amp;_params)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>tparams(_params.account,<sp/>_params.chart,<sp/>_params.logger.Ptr(),<sp/>_params.slippage),<sp/>order_last(NULL){};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>copy<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Trade(const<sp/>Trade<sp/>&amp;_trade)<sp/>{<sp/>tparams<sp/>=<sp/>_trade.GetParams();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>deconstructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>~Trade()<sp/>{<sp/>tparams.DeleteObjects();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>params.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>Trade&apos;s<sp/>params.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TradeParams<sp/>GetParams()<sp/>const<sp/>{<sp/>return<sp/>tparams;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>list<sp/>of<sp/>active<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>DictStruct&apos;s<sp/>of<sp/>active<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DictStruct&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>*GetOrdersActive()<sp/>{<sp/>return<sp/>&amp;orders_active;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>list<sp/>of<sp/>history<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>DictStruct&apos;s<sp/>of<sp/>orders<sp/>from<sp/>history.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DictStruct&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>*GetOrdersHistory()<sp/>{<sp/>return<sp/>&amp;orders_history;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>list<sp/>of<sp/>pending<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>DictStruct&apos;s<sp/>of<sp/>pending<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DictStruct&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>*GetOrdersPending()<sp/>{<sp/>return<sp/>&amp;orders_pending;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Setters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetStrategy(Strategy<sp/>*_strategy)<sp/>{<sp/>strategy<sp/>=<sp/>_strategy;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>State<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>whether<sp/>the<sp/>price<sp/>is<sp/>in<sp/>its<sp/>peak<sp/>for<sp/>the<sp/>current<sp/>period.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsPeak(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Chart<sp/>*_c<sp/>=<sp/>tparams.chart;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_high<sp/>=<sp/>_c.GetHigh(_shift<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_low<sp/>=<sp/>_c.GetLow(_shift<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_open<sp/>=<sp/>_c.GetOpenOffer(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_low<sp/>!=<sp/>_high)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_BUY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_open<sp/>&gt;<sp/>_high;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_SELL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_open<sp/>&lt;<sp/>_low;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>if<sp/>the<sp/>current<sp/>price<sp/>is<sp/>in<sp/>pivot<sp/>point<sp/>level<sp/>given<sp/>the<sp/>order<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsPivot(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Chart<sp/>*_c<sp/>=<sp/>tparams.chart;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_high<sp/>=<sp/>_c.GetHigh(_shift<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_low<sp/>=<sp/>_c.GetLow(_shift<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_close<sp/>=<sp/>_c.GetClose(_shift<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_close<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>_low<sp/>!=<sp/>_high)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_pp<sp/>=<sp/>(float)(_high<sp/>+<sp/>_low<sp/>+<sp/>_close)<sp/>/<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_BUY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_c.GetOpenOffer(_cmd)<sp/>&gt;<sp/>_pp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_SELL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>_c.GetOpenOffer(_cmd)<sp/>&lt;<sp/>_pp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>if<sp/>trading<sp/>is<sp/>allowed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsTradeAllowed()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Needs<sp/>refactor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_result<sp/>&amp;=<sp/>_result<sp/>&amp;&amp;<sp/>(Trade::Account().IsExpertEnabled()<sp/>||<sp/>!Trade::Terminal().IsRealtime());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_result<sp/>&amp;=<sp/>_result<sp/>&amp;&amp;<sp/>Trade::Terminal().CheckPermissionToTrade();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(tparams.chart.GetBars()<sp/>&lt;<sp/>100)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Check<sp/>less<sp/>often.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Warning(&quot;Bars<sp/>less<sp/>than<sp/>100,<sp/>not<sp/>trading<sp/>yet.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Terminal<sp/>checks<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(Terminal::IsTradeContextBusy())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Check<sp/>less<sp/>often?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Trade<sp/>context<sp/>is<sp/>temporary<sp/>busy.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>the<sp/>EA<sp/>is<sp/>allowed<sp/>to<sp/>trade<sp/>and<sp/>trading<sp/>context<sp/>is<sp/>not<sp/>busy,<sp/>otherwise<sp/>returns<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>OrderSend(),<sp/>OrderClose(),<sp/>OrderCloseBy(),<sp/>OrderModify(),<sp/>OrderDelete()<sp/>trading<sp/>functions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>changing<sp/>the<sp/>state<sp/>of<sp/>a<sp/>trading<sp/>account<sp/>can<sp/>be<sp/>called<sp/>only<sp/>if<sp/>trading<sp/>by<sp/>Expert<sp/>Advisors</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>is<sp/>allowed<sp/>(the<sp/>&quot;Allow<sp/>live<sp/>trading&quot;<sp/>checkbox<sp/>is<sp/>enabled<sp/>in<sp/>the<sp/>Expert<sp/>Advisor<sp/>or<sp/>script<sp/>properties).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Terminal::IsRealtime()<sp/>&amp;&amp;<sp/>!Terminal::IsTradeAllowed())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Trade<sp/>is<sp/>not<sp/>allowed<sp/>at<sp/>the<sp/>moment,<sp/>check<sp/>the<sp/>settings!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(Terminal::IsRealtime()<sp/>&amp;&amp;<sp/>!Terminal::IsConnected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Terminal<sp/>is<sp/>not<sp/>connected!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(IsStopped())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Terminal<sp/>is<sp/>stopping!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(Terminal::IsRealtime()<sp/>&amp;&amp;<sp/>!Terminal::IsTradeAllowed())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Trading<sp/>is<sp/>not<sp/>allowed.<sp/>Market<sp/>may<sp/>be<sp/>closed<sp/>or<sp/>choose<sp/>the<sp/>right<sp/>symbol.<sp/>Otherwise<sp/>contact<sp/>your<sp/>broker.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(Terminal::IsRealtime()<sp/>&amp;&amp;<sp/>!Terminal::IsExpertEnabled())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;You<sp/>need<sp/>to<sp/>enable:<sp/>&apos;Enable<sp/>Expert<sp/>Advisor&apos;/&apos;AutoTrading&apos;.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Account<sp/>checks<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>the<sp/>permission<sp/>to<sp/>trade<sp/>for<sp/>the<sp/>current<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!Account::IsTradeAllowed())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Trade<sp/>is<sp/>not<sp/>allowed<sp/>for<sp/>this<sp/>account!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(tparams.account.GetMarginUsedInPct()<sp/>&gt;<sp/>tparams.GetRiskMargin())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Warning(&quot;Maximum<sp/>margin<sp/>risk<sp/>reached!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>if<sp/>this<sp/>trade<sp/>instance<sp/>has<sp/>active<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>HasActiveOrders()<sp/>{<sp/>return<sp/>orders_active.Size()<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>if<sp/>current<sp/>bar<sp/>has<sp/>active<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>HasBarOrder(ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ref&lt;Order&gt;<sp/>_order<sp/>=<sp/>order_last;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_order.IsSet()<sp/>&amp;&amp;<sp/>_order.Ptr().GetData().type<sp/>==<sp/>_cmd<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_order.Ptr().GetData().time_open<sp/>&gt;<sp/>tparams.chart.GetBarTime())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!_result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(DictStructIterator&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>iter<sp/>=<sp/>orders_active.Begin();<sp/>iter.IsValid();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_order<sp/>=<sp/>iter.Value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_order.Ptr().GetData().type<sp/>==<sp/>_cmd<sp/>&amp;&amp;<sp/>_order.Ptr().GetData().time_open<sp/>&gt;<sp/>tparams.chart.GetBarTime())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>the<sp/>limit<sp/>on<sp/>the<sp/>number<sp/>of<sp/>active<sp/>pending<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Validate<sp/>whether<sp/>the<sp/>amount<sp/>of<sp/>open<sp/>and<sp/>pending<sp/>orders</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>has<sp/>reached<sp/>the<sp/>limit<sp/>set<sp/>by<sp/>the<sp/>broker.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see:<sp/>https://www.mql5.com/en/articles/2555#account_limit_pending_orders</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsOrderAllowed()<sp/>{<sp/>return<sp/>(OrdersTotal()<sp/>&lt;<sp/>Account().GetLimitOrders());<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Calculation<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>the<sp/>margin<sp/>required<sp/>for<sp/>the<sp/>specified<sp/>order<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Note:<sp/>It<sp/>not<sp/>taking<sp/>into<sp/>account<sp/>current<sp/>pending<sp/>orders<sp/>and<sp/>open<sp/>positions.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/>The<sp/>function<sp/>returns<sp/>true<sp/>in<sp/>case<sp/>of<sp/>success;<sp/>otherwise<sp/>it<sp/>returns<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see:<sp/>https://www.mql5.com/en/docs/trading/ordercalcmargin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>OrderCalcMargin(ENUM_ORDER_TYPE<sp/>_action,<sp/><sp/>//<sp/>type<sp/>of<sp/>order</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>_symbol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>symbol<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_volume,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>volume</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_price,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>open<sp/>price</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>&amp;_margin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>variable<sp/>for<sp/>obtaining<sp/>the<sp/>margin<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>To<sp/>test.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_margin<sp/>=<sp/>GetMarginRequired(_symbol,<sp/>_action);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_margin<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::OrderCalcMargin(_action,<sp/>_symbol,<sp/>_volume,<sp/>_price,<sp/>_margin);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Free<sp/>margin<sp/>required<sp/>for<sp/>opening<sp/>a<sp/>position<sp/>with<sp/>the<sp/>volume<sp/>of<sp/>one<sp/>lot<sp/>in<sp/>the<sp/>appropriate<sp/>direction.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>GetMarginRequired(string<sp/>_symbol,<sp/>ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>ORDER_TYPE_BUY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>MarketInfo(_symbol,<sp/>MODE_MARGINREQUIRED);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://www.mql5.com/ru/forum/170952/page9#comment_4134898</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>https://www.mql5.com/en/docs/trading/ordercalcmargin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_margin_req;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>Trade::OrderCalcMargin(_cmd,<sp/>_symbol,<sp/>1,<sp/>SymbolInfo::GetAsk(_symbol),<sp/>_margin_req);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result<sp/>?<sp/>_margin_req<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMarginRequired(ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>ORDER_TYPE_BUY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetMarginRequired(Market().GetSymbol(),<sp/>_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Lot<sp/>size<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculate<sp/>the<sp/>maximal<sp/>lot<sp/>size<sp/>for<sp/>the<sp/>given<sp/>stop<sp/>loss<sp/>value<sp/>and<sp/>risk<sp/>margin.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>double<sp/>sl</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Stop<sp/>loss<sp/>to<sp/>calculate<sp/>the<sp/>lot<sp/>size<sp/>for.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>string<sp/>symbol</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Symbol<sp/>pair.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>maximum<sp/>safe<sp/>lot<sp/>size<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see:<sp/>https://www.mql5.com/en/code/8568</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMaxLotSize(double<sp/>_sl,<sp/>ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_cmd<sp/>=<sp/>_cmd<sp/>==<sp/>NULL<sp/>?<sp/>Order::OrderType()<sp/>:<sp/>_cmd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>risk_amount<sp/>=<sp/>Account().GetTotalBalance()<sp/>/<sp/>100<sp/>*<sp/>tparams.risk_margin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_ticks<sp/>=<sp/>fabs(_sl<sp/>-<sp/>Market().GetOpenOffer(_cmd))<sp/>/<sp/>Market().GetTickSize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>lot_size1<sp/>=<sp/>fmin(_sl,<sp/>_ticks)<sp/>&gt;<sp/>0<sp/>?<sp/>risk_amount<sp/>/<sp/>(_sl<sp/>*<sp/>(_ticks<sp/>/<sp/>100.0))<sp/>:<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lot_size1<sp/>*=<sp/>Market().GetVolumeMin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>double<sp/>lot_size2<sp/>=<sp/>1<sp/>/<sp/>(Market().GetTickValue()<sp/>*<sp/>sl<sp/>/<sp/>risk_margin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PrintFormat(&quot;SL=%g:<sp/>1<sp/>=<sp/>%g,<sp/>2<sp/>=<sp/>%g&quot;,<sp/>sl,<sp/>lot_size1,<sp/>lot_size2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Chart().NormalizeLots(lot_size1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMaxLotSize(unsigned<sp/>int<sp/>_pips,<sp/>ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetMaxLotSize(CalcOrderSLTP(_pips,<sp/>_cmd,<sp/>ORDER_TYPE_SL));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Validate<sp/>Take<sp/>Profit<sp/>value<sp/>for<sp/>the<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ValidTP(double<sp/>_value,<sp/>ENUM_ORDER_TYPE<sp/>_cmd,<sp/>double<sp/>_value_prev<sp/>=<sp/>WRONG_VALUE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_is_valid<sp/>=<sp/>_value<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>_value<sp/>!=<sp/>_value_prev;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_min_distance<sp/>=<sp/>Market().GetTradeDistanceInPips();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_price<sp/>=<sp/>Market().GetOpenOffer(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>_digits<sp/>=<sp/>Market().GetDigits();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OP_BUY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_is_valid<sp/>&amp;=<sp/>_value<sp/>&gt;<sp/>_price<sp/>&amp;&amp;<sp/>Convert::GetValueDiffInPips(_value,<sp/>_price,<sp/>true,<sp/>_digits)<sp/>&gt;<sp/>_min_distance;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OP_SELL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_is_valid<sp/>&amp;=<sp/>_value<sp/>&lt;<sp/>_price<sp/>&amp;&amp;<sp/>Convert::GetValueDiffInPips(_price,<sp/>_value,<sp/>true,<sp/>_digits)<sp/>&gt;<sp/>_min_distance;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_is_valid<sp/>&amp;=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_is_valid<sp/>&amp;&amp;<sp/>_value_prev<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_is_valid<sp/>&amp;=<sp/>Convert::GetValueDiffInPips(_value,<sp/>_value_prev,<sp/>true,<sp/>_digits)<sp/>&gt;<sp/>Market().GetTradeDistanceInPips();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_is_valid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Validate<sp/>Stop<sp/>Loss<sp/>value<sp/>for<sp/>the<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ValidSL(double<sp/>_value,<sp/>ENUM_ORDER_TYPE<sp/>_cmd,<sp/>double<sp/>_value_prev<sp/>=<sp/>WRONG_VALUE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_is_valid<sp/>=<sp/>_value<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>_value<sp/>!=<sp/>_value_prev;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_min_distance<sp/>=<sp/>Market().GetTradeDistanceInPips();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_price<sp/>=<sp/>Market().GetOpenOffer(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>_digits<sp/>=<sp/>Market().GetDigits();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OP_BUY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_is_valid<sp/>&amp;=<sp/>_value<sp/>&lt;<sp/>_price<sp/>&amp;&amp;<sp/>Convert::GetValueDiffInPips(_price,<sp/>_value,<sp/>true,<sp/>_digits)<sp/>&gt;<sp/>_min_distance;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>OP_SELL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_is_valid<sp/>&amp;=<sp/>_value<sp/>&gt;<sp/>_price<sp/>&amp;&amp;<sp/>Convert::GetValueDiffInPips(_value,<sp/>_price,<sp/>true,<sp/>_digits)<sp/>&gt;<sp/>_min_distance;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_is_valid<sp/>&amp;=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_is_valid<sp/>&amp;&amp;<sp/>_value_prev<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_is_valid<sp/>&amp;=<sp/>Convert::GetValueDiffInPips(_value,<sp/>_value_prev,<sp/>true,<sp/>_digits)<sp/>&gt;<sp/>Market().GetTradeDistanceInPips();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_is_valid;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Optimize<sp/>lot<sp/>size<sp/>for<sp/>open<sp/>based<sp/>on<sp/>the<sp/>consecutive<sp/>wins<sp/>and<sp/>losses.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>lots<sp/>(double)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Base<sp/>lot<sp/>size.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>win_factor<sp/>(double)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Lot<sp/>size<sp/>increase<sp/>factor<sp/>(in<sp/>%)<sp/>multiplied<sp/>by<sp/>consecutive<sp/>wins.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>loss_factor<sp/>(double)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Lot<sp/>size<sp/>increase<sp/>factor<sp/>(in<sp/>%)<sp/>multiplied<sp/>by<sp/>consecutive<sp/>losses.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>ols_orders<sp/>(double)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Maximum<sp/>number<sp/>of<sp/>recent<sp/>orders<sp/>to<sp/>check<sp/>for<sp/>consecutive<sp/>wins/losses.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>symbol<sp/>(string)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Optional<sp/>symbol<sp/>name<sp/>if<sp/>different<sp/>than<sp/>current.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>OptimizeLotSize(double<sp/>lots,<sp/>double<sp/>win_factor<sp/>=<sp/>1.0,<sp/>double<sp/>loss_factor<sp/>=<sp/>1.0,<sp/>int<sp/>ols_orders<sp/>=<sp/>100,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>_symbol<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>lotsize<sp/>=<sp/>lots;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>wins<sp/>=<sp/>0,<sp/>losses<sp/>=<sp/>0;<sp/><sp/><sp/><sp/>//<sp/>Number<sp/>of<sp/>consequent<sp/>losing<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>twins<sp/>=<sp/>0,<sp/>tlosses<sp/>=<sp/>0;<sp/><sp/>//<sp/>Total<sp/>number<sp/>of<sp/>consequent<sp/>losing<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(win_factor<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>loss_factor<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>lotsize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Calculate<sp/>number<sp/>of<sp/>wins<sp/>and<sp/>losses<sp/>orders<sp/>without<sp/>a<sp/>break.</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal">/*<sp/>@fixme:<sp/>Rewrite<sp/>without<sp/>using<sp/>CDealInfo.</highlight></codeline>
<codeline><highlight class="normal">CDealInfo<sp/>deal;</highlight></codeline>
<codeline><highlight class="normal">HistorySelect(0,<sp/>TimeCurrent());<sp/>//<sp/>Select<sp/>history<sp/>for<sp/>access.</highlight></codeline>
<codeline><highlight class="normal">*/</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_orders<sp/>=<sp/>Account::OrdersHistoryTotal();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>_orders<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>fmax(0,<sp/>_orders<sp/>-<sp/>ols_orders);<sp/>i--)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>@fixme:<sp/>Rewrite<sp/>without<sp/>using<sp/>CDealInfo.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>deal.Ticket(HistoryDealGetTicket(i));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(deal.Ticket()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(__FUNCTION__,<sp/>&quot;:<sp/>Error<sp/>in<sp/>history!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(deal.Symbol()<sp/>!=<sp/>Market().GetSymbol())<sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>profit<sp/>=<sp/>deal.Profit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>profit<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Order::OrderSelect(i,<sp/>SELECT_BY_POS,<sp/>MODE_HISTORY)<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(__FUNCTION__,<sp/>&quot;:<sp/>Error<sp/>in<sp/>history!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Order::OrderSymbol()<sp/>!=<sp/>Symbol()<sp/>||<sp/>Order::OrderType()<sp/>&gt;<sp/>ORDER_TYPE_SELL)<sp/>continue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>profit<sp/>=<sp/>Order::OrderProfit();</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(profit<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>losses<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wins++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wins<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>losses++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>twins<sp/>=<sp/>fmax(wins,<sp/>twins);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tlosses<sp/>=<sp/>fmax(losses,<sp/>tlosses);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lotsize<sp/>=<sp/>twins<sp/>&gt;<sp/>1<sp/>?<sp/>lotsize<sp/>+<sp/>(lotsize<sp/>/<sp/>100<sp/>*<sp/>win_factor<sp/>*<sp/>twins)<sp/>:<sp/>lotsize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lotsize<sp/>=<sp/>tlosses<sp/>&gt;<sp/>1<sp/>?<sp/>lotsize<sp/>+<sp/>(lotsize<sp/>/<sp/>100<sp/>*<sp/>loss_factor<sp/>*<sp/>tlosses)<sp/>:<sp/>lotsize;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Market().NormalizeLots(lotsize);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculate<sp/>size<sp/>of<sp/>the<sp/>lot<sp/>based<sp/>on<sp/>the<sp/>free<sp/>margin<sp/>or<sp/>balance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>CalcLotSize(double<sp/>_risk_margin<sp/>=<sp/>1,<sp/><sp/><sp/>//<sp/>Risk<sp/>margin<sp/>in<sp/>%.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_risk_ratio<sp/>=<sp/>1.0,<sp/><sp/>//<sp/>Risk<sp/>ratio<sp/>factor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint<sp/>_method<sp/>=<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Method<sp/>of<sp/>calculation<sp/>(0-3).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_lot_size<sp/>=<sp/>Market().GetVolumeMin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_avail_amount<sp/>=<sp/>_method<sp/>%<sp/>2<sp/>==<sp/>0<sp/>?<sp/>Account().GetMarginAvail()<sp/>:<sp/>Account().GetTotalBalance();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_method<sp/>==<sp/>0<sp/>||<sp/>_method<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_lot_size<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Market().NormalizeLots(_avail_amount<sp/>/<sp/>fmax(0.00001,<sp/>GetMarginRequired()<sp/>*<sp/>_risk_ratio)<sp/>/<sp/>100<sp/>*<sp/>_risk_ratio);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_risk_amount<sp/>=<sp/>_avail_amount<sp/>/<sp/>100<sp/>*<sp/>_risk_margin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_risk_value<sp/>=<sp/>Convert::MoneyToValue(_risk_amount,<sp/>Market().GetVolumeMin(),<sp/>Market().GetSymbol());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_tick_value<sp/>=<sp/>Market().GetTickSize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_lot_size<sp/>=<sp/>Market().NormalizeLots(_risk_value<sp/>*<sp/>_tick_value<sp/>*<sp/>_risk_ratio);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_lot_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Orders<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Open<sp/>an<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>OrderAdd(Order<sp/>*_order)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>_last_error<sp/>=<sp/>_order.GetData().last_error;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Logger().Link(_order.logger.Ptr());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ref&lt;Order&gt;<sp/>_ref_order<sp/>=<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_last_error)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>69539:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Error<sp/>while<sp/>opening<sp/>an<sp/>order!&quot;,<sp/>__FUNCTION_LINE__,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringFormat(&quot;Code:<sp/>%d,<sp/>Msg:<sp/>%s&quot;,<sp/>_last_error,<sp/>Terminal::GetErrorText(_last_error)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Pass-through.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ERR_NO_ERROR:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orders_active.Set(_order.GetTicket(),<sp/>_ref_order);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order_last<sp/>=<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Trigger:<sp/>OnOrder();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Cannot<sp/>add<sp/>order!&quot;,<sp/>__FUNCTION_LINE__,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringFormat(&quot;Code:<sp/>%d,<sp/>Msg:<sp/>%s&quot;,<sp/>_last_error,<sp/>Terminal::GetErrorText(_last_error)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Moves<sp/>active<sp/>order<sp/>to<sp/>history.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>OrderMoveToHistory(Order<sp/>*_order)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>orders_active.Unset(_order.GetTicket());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ref&lt;Order&gt;<sp/>_ref_order<sp/>=<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>result<sp/>=<sp/>orders_history.Set(_order.GetTicket(),<sp/>_ref_order);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(strategy<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strategy.OnOrderClose(_order);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>OrderMoveToHistory(unsigned<sp/>long<sp/>_ticket)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ref&lt;Order&gt;<sp/>_order<sp/>=<sp/>orders_active.GetByKey(_ticket);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>OrderMoveToHistory(_order.Ptr());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>market<sp/>and<sp/>pending<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/trading/orderstotal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/trading/positionstotal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>OrdersTotal()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::OrdersTotal();</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::OrdersTotal()<sp/>+<sp/>::PositionsTotal();</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Orders<sp/>close<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Close<sp/>all<sp/>orders.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Note:<sp/>It<sp/>will<sp/>only<sp/>affect<sp/>trades<sp/>managed<sp/>by<sp/>this<sp/>class<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>number<sp/>of<sp/>successfully<sp/>closed<sp/>trades.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>On<sp/>error,<sp/>returns<sp/>-1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>OrdersCloseAll(string<sp/>_comment<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_oid<sp/>=<sp/>0,<sp/>_closed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ref&lt;Order&gt;<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_comment<sp/>=<sp/>_comment<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>_comment<sp/>:<sp/>__FUNCTION__;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(DictStructIterator&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>iter<sp/>=<sp/>orders_active.Begin();<sp/>iter.IsValid();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_order<sp/>=<sp/>iter.Value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_order.Ptr().IsOpen())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!_order.Ptr().OrderClose(_comment))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().AddLastError(__FUNCTION_LINE__,<sp/>_order.Ptr().GetData().last_error);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order_last<sp/>=<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_closed++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OrderMoveToHistory(_order.Ptr());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_closed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Close<sp/>orders<sp/>by<sp/>order<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>number<sp/>of<sp/>successfully<sp/>closed<sp/>trades.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>On<sp/>error,<sp/>returns<sp/>-1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>OrdersCloseViaCmd(ENUM_ORDER_TYPE<sp/>_cmd,<sp/>string<sp/>_comment<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_oid<sp/>=<sp/>0,<sp/>_closed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ref&lt;Order&gt;<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_comment<sp/>=<sp/>_comment<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>_comment<sp/>:<sp/>__FUNCTION__;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(DictStructIterator&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>iter<sp/>=<sp/>orders_active.Begin();<sp/>iter.IsValid();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_order<sp/>=<sp/>iter.Value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_order.Ptr().IsOpen())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_order.Ptr().GetRequest().type<sp/>==<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!_order.Ptr().OrderClose(_comment))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(&quot;Error<sp/>while<sp/>closing<sp/>order!&quot;,<sp/>__FUNCTION_LINE__,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringFormat(&quot;Code:<sp/>%d&quot;,<sp/>_order.Ptr().GetData().last_error));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order_last<sp/>=<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_closed++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OrderMoveToHistory(_order.Ptr());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_closed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Close<sp/>orders<sp/>based<sp/>on<sp/>the<sp/>property<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Note:<sp/>It<sp/>will<sp/>only<sp/>affect<sp/>trades<sp/>managed<sp/>by<sp/>this<sp/>class<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>number<sp/>of<sp/>successfully<sp/>closed<sp/>trades.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>On<sp/>error,<sp/>returns<sp/>-1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>OrdersCloseViaProp(ENUM_ORDER_PROPERTY_INTEGER<sp/>_prop,<sp/>long<sp/>_value,<sp/>string<sp/>_comment<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_oid<sp/>=<sp/>0,<sp/>_closed<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ref&lt;Order&gt;<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_comment<sp/>=<sp/>_comment<sp/>!=<sp/>&quot;&quot;<sp/>?<sp/>_comment<sp/>:<sp/>__FUNCTION__;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(DictStructIterator&lt;long,<sp/>Ref&lt;Order&gt;&gt;<sp/>iter<sp/>=<sp/>orders_active.Begin();<sp/>iter.IsValid();<sp/>++iter)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_order<sp/>=<sp/>iter.Value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_order.Ptr().IsOpen())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_order.Ptr().OrderGet(_prop)<sp/>==<sp/>_value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!_order.Ptr().OrderClose(_comment))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().AddLastError(__FUNCTION_LINE__,<sp/>_order.Ptr().GetData().last_error);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>order_last<sp/>=<sp/>_order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_closed++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OrderMoveToHistory(_order.Ptr());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_closed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculate<sp/>available<sp/>lot<sp/>size<sp/>given<sp/>the<sp/>risk<sp/>margin.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint<sp/>CalcMaxLotSize(double<sp/>risk_margin<sp/>=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_avail_margin<sp/>=<sp/>Account().AccountAvailMargin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_opened_lots<sp/>=<sp/>Trades().GetOpenLots();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculate<sp/>number<sp/>of<sp/>allowed<sp/>orders<sp/>to<sp/>open.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>long<sp/>CalcMaxOrders(double<sp/>volume_size,<sp/>double<sp/>_risk_ratio<sp/>=<sp/>1.0,<sp/>long<sp/>prev_max_orders<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>hard_limit<sp/>=<sp/>0,<sp/>bool<sp/>smooth<sp/>=<sp/>true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_avail_margin<sp/>=<sp/>fmin(Account().GetMarginFree(),<sp/>Account().GetBalance()<sp/>+<sp/>Account().GetCredit());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_avail_margin<sp/>==<sp/>0<sp/>||<sp/>volume_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_margin_required<sp/>=<sp/>GetMarginRequired();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_avail_orders<sp/>=<sp/>_avail_margin<sp/>/<sp/>_margin_required<sp/>/<sp/>volume_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>new_max_orders<sp/>=<sp/>(long)(_avail_orders<sp/>*<sp/>_risk_ratio);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(hard_limit<sp/>&gt;<sp/>0)<sp/>new_max_orders<sp/>=<sp/>fmin(hard_limit,<sp/>new_max_orders);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(smooth<sp/>&amp;&amp;<sp/>new_max_orders<sp/>&gt;<sp/>prev_max_orders)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Increase<sp/>the<sp/>limit<sp/>smoothly.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(prev_max_orders<sp/>+<sp/>new_max_orders)<sp/>/<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>new_max_orders;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>TP/SL<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>maximal<sp/>order<sp/>stop<sp/>loss<sp/>value<sp/>given<sp/>the<sp/>risk<sp/>margin<sp/>(in<sp/>%).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>int<sp/>cmd</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Trade<sp/>command<sp/>(e.g.<sp/>OP_BUY/OP_SELL).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>double<sp/>lot_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Lot<sp/>size<sp/>to<sp/>take<sp/>into<sp/>account.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>double<sp/>risk_margin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Maximum<sp/>account<sp/>margin<sp/>to<sp/>risk<sp/>(in<sp/>%).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>maximum<sp/>stop<sp/>loss<sp/>price<sp/>value<sp/>for<sp/>the<sp/>given<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMaxSLTP(ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>NULL,<sp/>double<sp/>_lot_size<sp/>=<sp/>0,<sp/>ENUM_ORDER_TYPE_VALUE<sp/>_mode<sp/>=<sp/>ORDER_TYPE_SL,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_risk_margin<sp/>=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_price<sp/>=<sp/>_cmd<sp/>==<sp/>NULL<sp/>?<sp/>Order::OrderOpenPrice()<sp/>:<sp/>Market().GetOpenOffer(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>For<sp/>the<sp/>new<sp/>orders,<sp/>use<sp/>the<sp/>available<sp/>margin<sp/>for<sp/>calculation,<sp/>otherwise<sp/>use<sp/>the<sp/>account<sp/>balance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_margin<sp/>=<sp/>Convert::MoneyToValue(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_cmd<sp/>==<sp/>NULL<sp/>?<sp/>Account().GetMarginAvail()<sp/>:<sp/>Account().GetTotalBalance())<sp/>/<sp/>100<sp/>*<sp/>_risk_margin,<sp/>_lot_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Market().GetSymbol());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_cmd<sp/>=<sp/>_cmd<sp/>==<sp/>NULL<sp/>?<sp/>Order::OrderType()<sp/>:<sp/>_cmd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_lot_size<sp/>=<sp/>_lot_size<sp/>&lt;=<sp/>0<sp/>?<sp/>fmax(Order::OrderLots(),<sp/>Market().GetVolumeMin())<sp/>:<sp/>_lot_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_price<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Chart().GetTradeDistanceInValue()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>+<sp/>Convert::MoneyToValue(AccountInfo().GetTotalBalance()<sp/>/<sp/>100<sp/>*<sp/>_risk_margin,<sp/>_lot_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>+<sp/>Convert::MoneyToValue(AccountInfo().GetMarginAvail()<sp/>/<sp/>100<sp/>*<sp/>_risk_margin,<sp/>_lot_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_margin<sp/>*<sp/>Order::OrderDirection(_cmd,<sp/>_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMaxSL(ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>NULL,<sp/>double<sp/>_lot_size<sp/>=<sp/>0,<sp/>double<sp/>_risk_margin<sp/>=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetMaxSLTP(_cmd,<sp/>_lot_size,<sp/>ORDER_TYPE_SL,<sp/>_risk_margin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetMaxTP(ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>NULL,<sp/>double<sp/>_lot_size<sp/>=<sp/>0,<sp/>double<sp/>_risk_margin<sp/>=<sp/>1.0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetMaxSLTP(_cmd,<sp/>_lot_size,<sp/>ORDER_TYPE_TP,<sp/>_risk_margin);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>value<sp/>of<sp/>stop<sp/>loss<sp/>for<sp/>the<sp/>new<sp/>order<sp/>given<sp/>the<sp/>pips<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>CalcOrderSLTP(double<sp/>_value,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Value<sp/>in<sp/>pips.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_ORDER_TYPE<sp/>_cmd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Order<sp/>type<sp/>(e.g.<sp/>buy<sp/>or<sp/>sell).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_ORDER_TYPE_VALUE<sp/>_mode<sp/><sp/>//<sp/>Type<sp/>of<sp/>value<sp/>(stop<sp/>loss<sp/>or<sp/>take<sp/>profit).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_price<sp/>=<sp/>_cmd<sp/>==<sp/>NULL<sp/>?<sp/>Order::OrderOpenPrice()<sp/>:<sp/>Market().GetOpenOffer(_cmd);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_cmd<sp/>=<sp/>_cmd<sp/>==<sp/>NULL<sp/>?<sp/>Order::OrderType()<sp/>:<sp/>_cmd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PrintFormat(&quot;#%d:<sp/>%s/%s:<sp/>%g<sp/>(%g/%g)<sp/>+<sp/>%g<sp/>*<sp/>%g<sp/>*<sp/>%g<sp/>=<sp/>%g&quot;,<sp/>Order::OrderTicket(),<sp/>EnumToString(_cmd),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>EnumToString(_mode),<sp/>_price,<sp/>Bid,<sp/>Ask,<sp/>_value,<sp/>Market().GetPipSize(),<sp/>Order::OrderDirection(_cmd,<sp/>_mode),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Market().GetOpenOffer(_cmd)<sp/>+<sp/>_value<sp/>*<sp/>Market().GetPipSize()<sp/>*<sp/>Order::OrderDirection(_cmd,<sp/>_mode));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_value<sp/>&gt;<sp/>0<sp/>?<sp/>_price<sp/>+<sp/>_value<sp/>*<sp/>Market().GetPipSize()<sp/>*<sp/>Order::OrderDirection(_cmd,<sp/>_mode)<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>CalcOrderSL(double<sp/>_value,<sp/>ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{<sp/>return<sp/>CalcOrderSLTP(_value,<sp/>_cmd,<sp/>ORDER_TYPE_SL);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>CalcOrderTP(double<sp/>_value,<sp/>ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{<sp/>return<sp/>CalcOrderSLTP(_value,<sp/>_cmd,<sp/>ORDER_TYPE_TP);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>safer<sp/>SL/TP<sp/>based<sp/>on<sp/>the<sp/>two<sp/>SL<sp/>or<sp/>TP<sp/>input<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetSaferSLTP(double<sp/>_value1,<sp/>double<sp/>_value2,<sp/>ENUM_ORDER_TYPE<sp/>_cmd,<sp/>ENUM_ORDER_TYPE_VALUE<sp/>_mode)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_value1<sp/>&lt;=<sp/>0<sp/>||<sp/>_value2<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Market().NormalizeSLTP(fmax(_value1,<sp/>_value2),<sp/>_cmd,<sp/>_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_BUY_LIMIT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_BUY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(_mode)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_SL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Market().NormalizeSLTP(_value1<sp/>&gt;<sp/>_value2<sp/>?<sp/>_value1<sp/>:<sp/>_value2,<sp/>_cmd,<sp/>_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_TP:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Market().NormalizeSLTP(_value1<sp/>&lt;<sp/>_value2<sp/>?<sp/>_value1<sp/>:<sp/>_value2,<sp/>_cmd,<sp/>_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Invalid<sp/>mode:<sp/>%s!&quot;,<sp/>EnumToString(_mode),<sp/>__FUNCTION__));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_SELL_LIMIT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_SELL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(_mode)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_SL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Market().NormalizeSLTP(_value1<sp/>&lt;<sp/>_value2<sp/>?<sp/>_value1<sp/>:<sp/>_value2,<sp/>_cmd,<sp/>_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ORDER_TYPE_TP:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Market().NormalizeSLTP(_value1<sp/>&gt;<sp/>_value2<sp/>?<sp/>_value1<sp/>:<sp/>_value2,<sp/>_cmd,<sp/>_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Invalid<sp/>mode:<sp/>%s!&quot;,<sp/>EnumToString(_mode),<sp/>__FUNCTION__));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Invalid<sp/>order<sp/>type:<sp/>%s!&quot;,<sp/>EnumToString(_cmd),<sp/>__FUNCTION__));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetSaferSLTP(double<sp/>_value1,<sp/>double<sp/>_value2,<sp/>double<sp/>_value3,<sp/>ENUM_ORDER_TYPE<sp/>_cmd,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_ORDER_TYPE_VALUE<sp/>_mode)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetSaferSLTP(GetSaferSLTP(_value1,<sp/>_value2,<sp/>_cmd,<sp/>_mode),<sp/>_value3,<sp/>_cmd,<sp/>_mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetSaferSL(double<sp/>_value1,<sp/>double<sp/>_value2,<sp/>ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetSaferSLTP(_value1,<sp/>_value2,<sp/>_cmd,<sp/>ORDER_TYPE_SL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetSaferSL(double<sp/>_value1,<sp/>double<sp/>_value2,<sp/>double<sp/>_value3,<sp/>ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetSaferSLTP(GetSaferSLTP(_value1,<sp/>_value2,<sp/>_cmd,<sp/>ORDER_TYPE_SL),<sp/>_value3,<sp/>_cmd,<sp/>ORDER_TYPE_SL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetSaferTP(double<sp/>_value1,<sp/>double<sp/>_value2,<sp/>ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetSaferSLTP(_value1,<sp/>_value2,<sp/>_cmd,<sp/>ORDER_TYPE_TP);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetSaferTP(double<sp/>_value1,<sp/>double<sp/>_value2,<sp/>double<sp/>_value3,<sp/>ENUM_ORDER_TYPE<sp/>_cmd)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetSaferSLTP(GetSaferSLTP(_value1,<sp/>_value2,<sp/>_cmd,<sp/>ORDER_TYPE_TP),<sp/>_value3,<sp/>_cmd,<sp/>ORDER_TYPE_TP);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>the<sp/>best<sp/>SL/TP<sp/>value<sp/>for<sp/>the<sp/>order<sp/>given<sp/>the<sp/>limits.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>CalcBestSLTP(double<sp/>_value,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Suggested<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_max_pips,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Maximal<sp/>amount<sp/>of<sp/>pips.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_ORDER_TYPE_VALUE<sp/>_mode,<sp/><sp/>//<sp/>Type<sp/>of<sp/>value<sp/>(stop<sp/>loss<sp/>or<sp/>take<sp/>profit).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_ORDER_TYPE<sp/>_cmd<sp/>=<sp/>NULL,<sp/><sp/>//<sp/>Order<sp/>type<sp/>(e.g.<sp/>buy<sp/>or<sp/>sell).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_lot_size<sp/>=<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Lot<sp/>size<sp/>of<sp/>the<sp/>order.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_max_value1<sp/>=<sp/>_max_pips<sp/>&gt;<sp/>0<sp/>?<sp/>CalcOrderSLTP(_max_pips,<sp/>_cmd,<sp/>_mode)<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_max_value2<sp/>=<sp/>tparams.risk_margin<sp/>&gt;<sp/>0<sp/>?<sp/>GetMaxSLTP(_cmd,<sp/>_lot_size,<sp/>_mode)<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_res<sp/>=<sp/>Market().NormalizePrice(GetSaferSLTP(_value,<sp/>_max_value1,<sp/>_max_value2,<sp/>_cmd,<sp/>_mode));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PrintFormat(&quot;%s/%s:<sp/>Value:<sp/>%g&quot;,<sp/>EnumToString(_cmd),<sp/>EnumToString(_mode),<sp/>_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PrintFormat(&quot;%s/%s:<sp/>Max<sp/>value<sp/>1:<sp/>%g&quot;,<sp/>EnumToString(_cmd),<sp/>EnumToString(_mode),<sp/>_max_value1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PrintFormat(&quot;%s/%s:<sp/>Max<sp/>value<sp/>2:<sp/>%g&quot;,<sp/>EnumToString(_cmd),<sp/>EnumToString(_mode),<sp/>_max_value2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>PrintFormat(&quot;%s/%s:<sp/>Result:<sp/>%g&quot;,<sp/>EnumToString(_cmd),<sp/>EnumToString(_mode),<sp/>_res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_res;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Trend<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>the<sp/>current<sp/>market<sp/>trend.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>method<sp/>(int)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Bitwise<sp/>trend<sp/>method<sp/>to<sp/>use.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>tf<sp/>(ENUM_TIMEFRAMES)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Frequency<sp/>based<sp/>on<sp/>the<sp/>given<sp/>timeframe.<sp/>Use<sp/>NULL<sp/>for<sp/>the<sp/>current.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>symbol<sp/>(string)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Symbol<sp/>pair<sp/>to<sp/>check<sp/>against<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>simple<sp/>(bool)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>use<sp/>simple<sp/>trend<sp/>calculation.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>positive<sp/>value<sp/>for<sp/>bullish,<sp/>negative<sp/>for<sp/>bearish,<sp/>zero<sp/>for<sp/>neutral<sp/>market<sp/>trend.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@todo:<sp/>Improve<sp/>number<sp/>of<sp/>increases<sp/>for<sp/>bull/bear<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetTrend(int<sp/>method,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>NULL,<sp/>bool<sp/>simple<sp/>=<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>datetime<sp/>_last_trend_check<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>_last_trend<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>symbol<sp/>=<sp/>Market().GetSymbol();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_last_trend_check<sp/>==<sp/>Chart().GetBarTime(_tf))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_last_trend;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>bull<sp/>=<sp/>0,<sp/>bear<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(simple<sp/>&amp;&amp;<sp/>method<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>&amp;<sp/>1)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_MN1,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_MN1,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_MN1,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_MN1,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>&amp;<sp/>2)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_W1,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_W1,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_W1,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_W1,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>&amp;<sp/>4)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_D1,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_D1,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_D1,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_D1,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>&amp;<sp/>8)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_H4,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_H4,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_H4,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_H4,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>&amp;<sp/>16)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_H1,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_H1,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_H1,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_H1,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>&amp;<sp/>32)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M30,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_M30,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M30,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_M30,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>&amp;<sp/>64)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M15,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_M15,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M15,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_M15,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>&amp;<sp/>128)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M5,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_M5,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M5,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_M5,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(Chart().GetOpen(PERIOD_H12,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_H12,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(Chart().GetOpen(PERIOD_H12,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_H12,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(Chart().GetOpen(PERIOD_H8,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_H8,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(Chart().GetOpen(PERIOD_H8,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_H8,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(Chart().GetOpen(PERIOD_H6,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_H6,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(Chart().GetOpen(PERIOD_H6,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_H6,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(Chart().GetOpen(PERIOD_H2,<sp/>0)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_H2,<sp/>1))<sp/>bull++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>if<sp/>(Chart().GetOpen(PERIOD_H2,<sp/>0)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_H2,<sp/>1))<sp/>bear++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(method<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>%<sp/>1)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(_counter<sp/>=<sp/>0;<sp/>_counter<sp/>&lt;<sp/>3;<sp/>_counter++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_MN1,<sp/>_counter)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_MN1,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bull<sp/>+=<sp/>30;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Chart().GetOpen(PERIOD_MN1,<sp/>_counter)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_MN1,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bear<sp/>+=<sp/>30;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>%<sp/>2)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(_counter<sp/>=<sp/>0;<sp/>_counter<sp/>&lt;<sp/>8;<sp/>_counter++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_W1,<sp/>_counter)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_W1,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bull<sp/>+=<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Chart().GetOpen(PERIOD_W1,<sp/>_counter)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_W1,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bear<sp/>+=<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>%<sp/>4)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(_counter<sp/>=<sp/>0;<sp/>_counter<sp/>&lt;<sp/>7;<sp/>_counter++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_D1,<sp/>_counter)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_D1,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bull<sp/>+=<sp/>1440<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Chart().GetOpen(PERIOD_D1,<sp/>_counter)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_D1,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bear<sp/>+=<sp/>1440<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>%<sp/>8)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(_counter<sp/>=<sp/>0;<sp/>_counter<sp/>&lt;<sp/>24;<sp/>_counter++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_H4,<sp/>_counter)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_H4,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bull<sp/>+=<sp/>240<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Chart().GetOpen(PERIOD_H4,<sp/>_counter)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_H4,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bear<sp/>+=<sp/>240<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>%<sp/>16)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(_counter<sp/>=<sp/>0;<sp/>_counter<sp/>&lt;<sp/>24;<sp/>_counter++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_H1,<sp/>_counter)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_H1,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bull<sp/>+=<sp/>60<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Chart().GetOpen(PERIOD_H1,<sp/>_counter)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_H1,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bear<sp/>+=<sp/>60<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>%<sp/>32)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(_counter<sp/>=<sp/>0;<sp/>_counter<sp/>&lt;<sp/>48;<sp/>_counter++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M30,<sp/>_counter)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_M30,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bull<sp/>+=<sp/>30<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Chart().GetOpen(PERIOD_M30,<sp/>_counter)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_M30,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bear<sp/>+=<sp/>30<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>%<sp/>64)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(_counter<sp/>=<sp/>0;<sp/>_counter<sp/>&lt;<sp/>96;<sp/>_counter++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M15,<sp/>_counter)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_M15,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bull<sp/>+=<sp/>15<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Chart().GetOpen(PERIOD_M15,<sp/>_counter)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_M15,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bear<sp/>+=<sp/>15<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((method<sp/>%<sp/>128)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(_counter<sp/>=<sp/>0;<sp/>_counter<sp/>&lt;<sp/>288;<sp/>_counter++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart().GetOpen(PERIOD_M5,<sp/>_counter)<sp/>&gt;<sp/>Chart().GetClose(PERIOD_M5,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bull<sp/>+=<sp/>5<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Chart().GetOpen(PERIOD_M5,<sp/>_counter)<sp/>&lt;<sp/>Chart().GetClose(PERIOD_M5,<sp/>_counter<sp/>+<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bear<sp/>+=<sp/>5<sp/>/<sp/>1440;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_last_trend<sp/>=<sp/>(bull<sp/>-<sp/>bear);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_last_trend_check<sp/>=<sp/>Chart().GetBarTime(_tf,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Logger().Debug(StringFormat(&quot;%s:<sp/>%g&quot;,<sp/>__FUNCTION__,<sp/>_last_trend));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_last_trend;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>the<sp/>current<sp/>market<sp/>trend.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>method<sp/>(int)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/>Bitwise<sp/>trend<sp/>method<sp/>to<sp/>use.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>tf<sp/>(ENUM_TIMEFRAMES)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Frequency<sp/>based<sp/>on<sp/>the<sp/>given<sp/>timeframe.<sp/>Use<sp/>NULL<sp/>for<sp/>the<sp/>current.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>symbol<sp/>(string)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>Symbol<sp/>pair<sp/>to<sp/>check<sp/>against<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>simple<sp/>(bool)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>If<sp/>true,<sp/>use<sp/>simple<sp/>trend<sp/>calculation.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>Buy<sp/>operation<sp/>for<sp/>bullish,<sp/>Sell<sp/>for<sp/>bearish,<sp/>otherwise<sp/>NULL<sp/>for<sp/>neutral<sp/>market<sp/>trend.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ENUM_ORDER_TYPE<sp/>GetTrendOp(int<sp/>method,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>NULL,<sp/>bool<sp/>simple<sp/>=<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_curr_trend<sp/>=<sp/>GetTrend(method,<sp/>_tf,<sp/>simple);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_curr_trend<sp/>==<sp/>0<sp/>?<sp/>(ENUM_ORDER_TYPE)(ORDER_TYPE_BUY<sp/>+<sp/>ORDER_TYPE_SELL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(_curr_trend<sp/>&gt;<sp/>0<sp/>?<sp/>ORDER_TYPE_BUY<sp/>:<sp/>ORDER_TYPE_SELL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Conditions<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>for<sp/>trade<sp/>condition.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_TRADE_CONDITION<sp/>_cond</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Trade<sp/>condition.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>MqlParam[]<sp/>_args</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Condition<sp/>arguments.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_TRADE_CONDITION<sp/>_cond,<sp/>MqlParam<sp/>&amp;_args[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>_arg1l<sp/>=<sp/>ArraySize(_args)<sp/>&gt;<sp/>0<sp/>?<sp/>Convert::MqlParamToInteger(_args[0])<sp/>:<sp/>WRONG_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>_arg2l<sp/>=<sp/>ArraySize(_args)<sp/>&gt;<sp/>1<sp/>?<sp/>Convert::MqlParamToInteger(_args[1])<sp/>:<sp/>WRONG_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TRADE_COND_ALLOWED_NOT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>!IsTradeAllowed();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TRADE_COND_IS_PEAK:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_arg1l<sp/>=<sp/>_arg1l<sp/>!=<sp/>WRONG_VALUE<sp/>?<sp/>_arg1l<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_arg2l<sp/>=<sp/>_arg2l<sp/>!=<sp/>WRONG_VALUE<sp/>?<sp/>_arg2l<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>IsPeak((ENUM_ORDER_TYPE)_arg1l,<sp/>(int)_arg2l);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TRADE_COND_IS_PIVOT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_arg1l<sp/>=<sp/>_arg1l<sp/>!=<sp/>WRONG_VALUE<sp/>?<sp/>_arg1l<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_arg2l<sp/>=<sp/>_arg2l<sp/>!=<sp/>WRONG_VALUE<sp/>?<sp/>_arg2l<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>IsPivot((ENUM_ORDER_TYPE)_arg1l,<sp/>(int)_arg2l);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>case<sp/>TRADE_ORDER_CONDS_IN_TREND:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>case<sp/>TRADE_ORDER_CONDS_IN_TREND_NOT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Invalid<sp/>trade<sp/>condition:<sp/>%s!&quot;,<sp/>EnumToString(_cond),<sp/>__FUNCTION_LINE__));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_TRADE_CONDITION<sp/>_cond,<sp/>long<sp/>_arg1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_args[]<sp/>=<sp/>{{TYPE_LONG}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_args[0].integer_value<sp/>=<sp/>_arg1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Trade::CheckCondition(_cond,<sp/>_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_TRADE_CONDITION<sp/>_cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_args[]<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Trade::CheckCondition(_cond,<sp/>_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Actions<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Execute<sp/>trade<sp/>action.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_TRADE_ACTION<sp/>_action</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Trade<sp/>action<sp/>to<sp/>execute.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>MqlParam<sp/>_args</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Trade<sp/>action<sp/>arguments.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ExecuteAction(ENUM_TRADE_ACTION<sp/>_action,<sp/>MqlParam<sp/>&amp;_args[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>arg1<sp/>=<sp/>(ArraySize(_args)<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>_args[0].type<sp/>==<sp/>TYPE_DOUBLE)<sp/>?<sp/>_args[0].double_value<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_action)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TRADE_ACTION_ORDERS_CLOSE_ALL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>OrdersCloseAll()<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TRADE_ACTION_ORDERS_CLOSE_IN_TREND:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>OrdersCloseViaCmd(GetTrendOp(0))<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TRADE_ACTION_ORDERS_CLOSE_IN_TREND_NOT:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>OrdersCloseViaCmd(Order::NegateOrderType(GetTrendOp(0)))<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TRADE_ACTION_ORDERS_CLOSE_TYPE_BUY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>OrdersCloseViaCmd(ORDER_TYPE_BUY)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>TRADE_ACTION_ORDERS_CLOSE_TYPE_SELL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>OrdersCloseViaCmd(ORDER_TYPE_SELL)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Invalid<sp/>trade<sp/>action:<sp/>%s!&quot;,<sp/>EnumToString(_action),<sp/>__FUNCTION_LINE__));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ExecuteAction(ENUM_TRADE_ACTION<sp/>_action)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_args[]<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Trade::ExecuteAction(_action,<sp/>_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Printer<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>textual<sp/>representation<sp/>of<sp/>the<sp/>Trade<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>ToString()<sp/>{<sp/>return<sp/>StringFormat(&quot;Margin<sp/>required:<sp/>%g/lot&quot;,<sp/>GetMarginRequired());<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Class<sp/>handlers<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>pointer<sp/>to<sp/>Account<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Account<sp/>*Account()<sp/>{<sp/>return<sp/>tparams.account;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>pointer<sp/>to<sp/>account&apos;s<sp/>trades.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Orders<sp/>*Trades()<sp/>{<sp/>return<sp/>tparams.account.Trades();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Return<sp/>pointer<sp/>to<sp/>Market<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Market<sp/>*Market()<sp/>{<sp/>return<sp/>(Market<sp/>*)GetPointer(tparams.chart);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>pointer<sp/>to<sp/>Chart<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Chart<sp/>*Chart()<sp/>{<sp/>return<sp/>tparams.chart;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>pointer<sp/>to<sp/>the<sp/>Terminal<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Terminal<sp/>*Terminal()<sp/>{<sp/>return<sp/>(Terminal<sp/>*)GetPointer(tparams.chart);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>pointer<sp/>to<sp/>Log<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Log<sp/>*Logger()<sp/>{<sp/>return<sp/>tparams.logger.Ptr();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/><sp/>//<sp/>TRADE_MQH</highlight></codeline>
    </programlisting>
    <location file="Trade.mqh"/>
  </compounddef>
</doxygen>
