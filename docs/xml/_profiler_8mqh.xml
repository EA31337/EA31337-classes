<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_profiler_8mqh" kind="file" language="C++">
    <compoundname>Profiler.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Collection.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Timer.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>macros.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PROFILER_SET_MIN(ms)<sp/><sp/><sp/><sp/><sp/>Profiler::min_time<sp/>=<sp/>ms;</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PROFILER_START<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>Timer<sp/>*_timer<sp/>=<sp/>NULL;<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>_timer<sp/>=<sp/>_timer<sp/>?<sp/>_timer<sp/>:<sp/>new<sp/>Timer(__FUNCTION__);<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>((Timer<sp/>*)<sp/>Profiler::timers.Get(_timer)).Start();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>PROFILER_STOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Timer<sp/>*)<sp/>Profiler::timers.Get(_timer)).Stop();</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PROFILER_STOP_PRINT<sp/><sp/>((Timer<sp/>*)<sp/>Profiler::timers.Get(_timer)).Stop().PrintOnMax(Profiler::min_time);</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PROFILER_PRINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Print(Profiler::timers.ToString(Profiler::min_time));</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PROFILER_DEINIT<sp/><sp/><sp/><sp/><sp/><sp/>Profiler::Deinit();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Class<sp/>to<sp/>provide<sp/>performance<sp/>profiler<sp/>functionality.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Profiler<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Collection&lt;Timer&gt;<sp/>*timers;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>ulong<sp/>min_time;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>Class<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Class<sp/>deconstructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Profiler()<sp/><sp/>{<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>~Profiler()<sp/>{<sp/>Deinit();<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>Deinit()<sp/>{<sp/>delete<sp/>Profiler::timers;<sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Initialize<sp/>static<sp/>global<sp/>variables.</highlight></codeline>
<codeline><highlight class="normal">Collection&lt;Timer&gt;<sp/>*Profiler::timers<sp/>=<sp/>new<sp/>Collection&lt;Timer&gt;(MQLInfoString(MQL_PROGRAM_NAME));</highlight></codeline>
<codeline><highlight class="normal">ulong<sp/>Profiler::min_time<sp/>=<sp/>1;</highlight></codeline>
    </programlisting>
    <location file="Profiler.mqh"/>
  </compounddef>
</doxygen>
