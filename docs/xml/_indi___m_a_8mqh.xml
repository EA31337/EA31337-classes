<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_indi___m_a_8mqh" kind="file" language="C++">
    <compoundname>Indi_MA.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Prevents<sp/>processing<sp/>this<sp/>includes<sp/>file<sp/>for<sp/>the<sp/>second<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>INDI_MA_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>INDI_MA_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;../Dict.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;../DictObject.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;../Indicator.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;../Refs.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;../String.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>global<sp/>functions<sp/>(for<sp/>MQL4<sp/>backward<sp/>compability).</highlight></codeline>
<codeline><highlight class="normal">double<sp/>iMA(string<sp/>_symbol,<sp/>int<sp/>_tf,<sp/>int<sp/>_ma_period,<sp/>int<sp/>_ma_shift,<sp/>int<sp/>_ma_method,<sp/>int<sp/>_ap,<sp/>int<sp/>_shift)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Indi_MA::iMA(_symbol,<sp/>(ENUM_TIMEFRAMES)_tf,<sp/>_ma_period,<sp/>_ma_shift,<sp/>(ENUM_MA_METHOD)_ma_method,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ENUM_APPLIED_PRICE)_ap,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">double<sp/>iMAOnArray(double<sp/>&amp;_arr[],<sp/>int<sp/>_total,<sp/>int<sp/>_period,<sp/>int<sp/>_ma_shift,<sp/>int<sp/>_ma_method,<sp/>int<sp/>_shift,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>cache_name<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Indi_MA::iMAOnArray(_arr,<sp/>_total,<sp/>_period,<sp/>_ma_shift,<sp/>_ma_method,<sp/>_shift,<sp/>cache_name);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Structs.</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>MAParams<sp/>:<sp/>IndicatorParams<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>period;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>ma_shift;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ENUM_MA_METHOD<sp/>ma_method;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ENUM_APPLIED_PRICE<sp/>applied_price;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Struct<sp/>constructors.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>MAParams(unsigned<sp/>int<sp/>_period,<sp/>int<sp/>_ma_shift,<sp/>ENUM_MA_METHOD<sp/>_ma_method,<sp/>ENUM_APPLIED_PRICE<sp/>_ap,<sp/>int<sp/>_shift<sp/>=<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>period(_period),<sp/>ma_shift(_ma_shift),<sp/>ma_method(_ma_method),<sp/>applied_price(_ap)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>itype<sp/>=<sp/>INDI_MA;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>max_modes<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>_shift;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SetDataValueType(TYPE_DOUBLE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>MAParams(MAParams<sp/>&amp;_params,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this<sp/>=<sp/>_params;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>tf<sp/>=<sp/>_tf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Implements<sp/>the<sp/>Moving<sp/>Average<sp/>indicator.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Indi_MA<sp/>:<sp/>public<sp/>Indicator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MAParams<sp/>params;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Indi_MA(MAParams<sp/>&amp;_p)<sp/>:<sp/>params(_p.period,<sp/>_p.shift,<sp/>_p.ma_method,<sp/>_p.applied_price),<sp/>Indicator((IndicatorParams)_p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params<sp/>=<sp/>_p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Indi_MA(MAParams<sp/>&amp;_p,<sp/>ENUM_TIMEFRAMES<sp/>_tf)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>params(_p.period,<sp/>_p.shift,<sp/>_p.ma_method,<sp/>_p.applied_price),<sp/>Indicator(INDI_MA,<sp/>_tf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params<sp/>=<sp/>_p;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>indicator<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/indicators/ima</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/indicators/ima</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>iMA(string<sp/>_symbol,<sp/>ENUM_TIMEFRAMES<sp/>_tf,<sp/>unsigned<sp/>int<sp/>_ma_period,<sp/>unsigned<sp/>int<sp/>_ma_shift,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_MA_METHOD<sp/>_ma_method,<sp/>ENUM_APPLIED_PRICE<sp/>_applied_price,<sp/>int<sp/>_shift<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indicator<sp/>*_obj<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ResetLastError();</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iMA(_symbol,<sp/>_tf,<sp/>_ma_period,<sp/>_ma_shift,<sp/>_ma_method,<sp/>_applied_price,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>_handle<sp/>=<sp/>Object::IsValid(_obj)<sp/>?<sp/>_obj.GetState().GetHandle()<sp/>:<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_res[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ResetLastError();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_handle<sp/>==<sp/>NULL<sp/>||<sp/>_handle<sp/>==<sp/>INVALID_HANDLE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((_handle<sp/>=<sp/>::iMA(_symbol,<sp/>_tf,<sp/>_ma_period,<sp/>_ma_shift,<sp/>_ma_method,<sp/>_applied_price))<sp/>==<sp/>INVALID_HANDLE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetUserError(ERR_USER_INVALID_HANDLE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(Object::IsValid(_obj))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_obj.SetHandle(_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(Terminal::IsVisualMode())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>To<sp/>avoid<sp/>error<sp/>4806<sp/>(ERR_INDICATOR_DATA_NOT_FOUND),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>we<sp/>check<sp/>the<sp/>number<sp/>of<sp/>calculated<sp/>data<sp/>only<sp/>in<sp/>visual<sp/>mode.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>_bars_calc<sp/>=<sp/>BarsCalculated(_handle);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(GetLastError()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(_bars_calc<sp/>&lt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetUserError(ERR_USER_INVALID_BUFF_NUM);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(CopyBuffer(_handle,<sp/>0,<sp/>_shift,<sp/>1,<sp/>_res)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_res[0];</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>MA<sp/>on<sp/>another<sp/>indicator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>We<sp/>are<sp/>operating<sp/>on<sp/>given<sp/>indicator&apos;s<sp/>data.<sp/>To<sp/>select<sp/>which<sp/>buffer<sp/>we<sp/>use,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>we<sp/>need<sp/>to<sp/>set<sp/>&quot;indi_mode&quot;<sp/>parameter<sp/>for<sp/>current<sp/>indicator.<sp/>It<sp/>defaults<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>0<sp/>(the<sp/>first<sp/>value).<sp/>For<sp/>example:<sp/>if<sp/>Price<sp/>indicator<sp/>has<sp/>four<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>(OHCL),<sp/>we<sp/>can<sp/>use<sp/>this<sp/>indicator<sp/>to<sp/>operate<sp/>over<sp/>Price<sp/>indicator,<sp/>and<sp/>set</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>indi_mode<sp/>to<sp/>e.g.,<sp/>PRICE_LOW<sp/>or<sp/>PRICE_CLOSE.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>iMAOnIndicator(Indicator<sp/>*_indi,<sp/>string<sp/>_symbol,<sp/>ENUM_TIMEFRAMES<sp/>_tf,<sp/>unsigned<sp/>int<sp/>_ma_period,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>_ma_shift,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_MA_METHOD<sp/>_ma_method,<sp/><sp/>//<sp/>(MT4/MT5):<sp/>MODE_SMA,<sp/>MODE_EMA,<sp/>MODE_SMMA,<sp/>MODE_LWMA</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>_shift<sp/>=<sp/>0,<sp/>Indicator<sp/>*_obj<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>indi_values[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArrayResize(indi_values,<sp/>_ma_period<sp/>+<sp/>_ma_shift);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(int)_ma_period<sp/>+<sp/>(int)_ma_shift;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>indi_values[i]<sp/>=<sp/>_indi[i][0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>iMAOnArray(indi_values,<sp/>0,<sp/>_ma_period,<sp/>_ma_shift,<sp/>_ma_method,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>MA<sp/>on<sp/>the<sp/>array<sp/>of<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>iMAOnArray(double<sp/>&amp;price[],<sp/>int<sp/>total,<sp/>int<sp/>period,<sp/>int<sp/>ma_shift,<sp/>int<sp/>ma_method,<sp/>int<sp/>shift,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>cache_name<sp/>=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iMAOnArray(price,<sp/>total,<sp/>period,<sp/>ma_shift,<sp/>ma_method,<sp/>shift);</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(cache_name<sp/>!=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>String<sp/>cache_key;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>not<sp/>add<sp/>shifts<sp/>here!<sp/>It<sp/>would<sp/>invalidate<sp/>cache<sp/>for<sp/>each<sp/>call<sp/>and<sp/>break<sp/>the<sp/>whole<sp/>algorithm.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_key.Add(cache_name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_key.Add(period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache_key.Add(ma_method);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note<sp/>that<sp/>OnCalculateProxy()<sp/>method<sp/>sets<sp/>incoming<sp/>price<sp/>array<sp/>as<sp/>not<sp/>series.<sp/>It<sp/>will<sp/>be<sp/>reverted<sp/>back<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>SetPrevCalculated().<sp/>It<sp/>is<sp/>done<sp/>in<sp/>such<sp/>way<sp/>to<sp/>not<sp/>force<sp/>user<sp/>to<sp/>remember<sp/>to<sp/>set</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IndicatorCalculateCache<sp/>cache<sp/>=<sp/>Indicator::OnCalculateProxy(cache_key.ToString(),<sp/>price,<sp/>total);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>prev_calculated<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indi_MA::Calculate(total,<sp/>cache.prev_calculated,<sp/>0,<sp/>price,<sp/>cache.buffer1,<sp/>ma_method,<sp/>period);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note<sp/>that<sp/>SetPrevCalculated()<sp/>reverts<sp/>back<sp/>price<sp/>array<sp/>to<sp/>previous<sp/>&quot;as<sp/>series&quot;<sp/>state.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cache.SetPrevCalculated(price,<sp/>prev_calculated);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Returns<sp/>value<sp/>from<sp/>first<sp/>calculation<sp/>buffer<sp/>(cache&apos;s<sp/>buffer1).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>cache.GetValue(1,<sp/>shift<sp/>+<sp/>ma_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Change<sp/>algorithm<sp/>to<sp/>not<sp/>assume<sp/>that<sp/>array<sp/>is<sp/>set<sp/>as<sp/>series?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>buf[],<sp/>arr[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>pos,<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>sum,<sp/>lsum;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(total<sp/>==<sp/>0)<sp/>total<sp/>=<sp/>ArraySize(price);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(total<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>total<sp/>&lt;<sp/>period)<sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(shift<sp/>&gt;<sp/>total<sp/>-<sp/>period<sp/>-<sp/>ma_shift)<sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(ma_method)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_SMA:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>=<sp/>ArrayCopy(arr,<sp/>price,<sp/>0,<sp/>shift<sp/>+<sp/>ma_shift,<sp/>period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArrayResize(buf,<sp/>total)<sp/>&lt;<sp/>0)<sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>total<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>period;<sp/>i++,<sp/>pos--)<sp/>sum<sp/>+=<sp/>arr[pos];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(pos<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>arr[pos];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>=<sp/>sum<sp/>/<sp/>period;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>arr[pos<sp/>+<sp/>period<sp/>-<sp/>1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(buf[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_EMA:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArrayResize(buf,<sp/>total)<sp/>&lt;<sp/>0)<sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>pr<sp/>=<sp/>2.0<sp/>/<sp/>(period<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>total<sp/>-<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(pos<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pos<sp/>==<sp/>total<sp/>-<sp/>2)<sp/>buf[pos<sp/>+<sp/>1]<sp/>=<sp/>price[pos<sp/>+<sp/>1];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>=<sp/>price[pos]<sp/>*<sp/>pr<sp/>+<sp/>buf[pos<sp/>+<sp/>1]<sp/>*<sp/>(1<sp/>-<sp/>pr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(buf[shift<sp/>+<sp/>ma_shift]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_SMMA:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArrayResize(buf,<sp/>total)<sp/>&lt;<sp/>0)<sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>total<sp/>-<sp/>period;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(pos<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pos<sp/>==<sp/>total<sp/>-<sp/>period)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0,<sp/>k<sp/>=<sp/>pos;<sp/>i<sp/>&lt;<sp/>period;<sp/>i++,<sp/>k++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>price[k];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[k]<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>buf[pos<sp/>+<sp/>1]<sp/>*<sp/>(period<sp/>-<sp/>1)<sp/>+<sp/>price[pos];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>=<sp/>sum<sp/>/<sp/>period;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(buf[shift<sp/>+<sp/>ma_shift]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_LWMA:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArrayResize(buf,<sp/>total)<sp/>&lt;<sp/>0)<sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsum<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>_price;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>weight<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>total<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>period;<sp/>i++,<sp/>pos--)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_price<sp/>=<sp/>price[pos];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>_price<sp/>*<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsum<sp/>+=<sp/>_price;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight<sp/>+=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>pos<sp/>+<sp/>period;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(pos<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf[pos]<sp/>=<sp/>sum<sp/>/<sp/>weight;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pos<sp/>==<sp/>0)<sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_price<sp/>=<sp/>price[pos];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>-<sp/>lsum<sp/>+<sp/>_price<sp/>*<sp/>period;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsum<sp/>-=<sp/>price[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lsum<sp/>+=<sp/>_price;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(buf[shift<sp/>+<sp/>ma_shift]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(0);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>Simple<sp/>Moving<sp/>Average<sp/>(SMA).<sp/>The<sp/>same<sp/>as<sp/>in<sp/>&quot;Example<sp/>Moving<sp/>Average&quot;<sp/>indicator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>CalculateSimpleMA(int<sp/>rates_total,<sp/>int<sp/>prev_calculated,<sp/>int<sp/>begin,<sp/>const<sp/>double<sp/>&amp;price[],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>&amp;ExtLineBuffer[],<sp/>int<sp/>InpMAPeriod)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>limit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>first<sp/>calculation<sp/>or<sp/>number<sp/>of<sp/>bars<sp/>was<sp/>changed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(prev_calculated<sp/>==<sp/>0)<sp/><sp/>//<sp/>first<sp/>calculation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>InpMAPeriod<sp/>+<sp/>begin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//---<sp/>set<sp/>empty<sp/>value<sp/>for<sp/>first<sp/>limit<sp/>bars</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit<sp/>-<sp/>1;<sp/>i++)<sp/>ExtLineBuffer[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//---<sp/>calculate<sp/>first<sp/>visible<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>firstValue<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>begin;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>firstValue<sp/>+=<sp/>price[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>firstValue<sp/>/=<sp/>InpMAPeriod;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[limit<sp/>-<sp/>1]<sp/>=<sp/>firstValue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>prev_calculated<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>main<sp/>loop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>limit;<sp/>i<sp/>&lt;<sp/>rates_total<sp/>&amp;&amp;<sp/>!IsStopped();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[i]<sp/>=<sp/>ExtLineBuffer[i<sp/>-<sp/>1]<sp/>+<sp/>(price[i]<sp/>-<sp/>price[i<sp/>-<sp/>InpMAPeriod])<sp/>/<sp/>InpMAPeriod;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>Exponential<sp/>Moving<sp/>Average<sp/>(EMA).<sp/>The<sp/>same<sp/>as<sp/>in<sp/>&quot;Example<sp/>Moving<sp/>Average&quot;<sp/>indicator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>CalculateEMA(int<sp/>rates_total,<sp/>int<sp/>prev_calculated,<sp/>int<sp/>begin,<sp/>const<sp/>double<sp/>&amp;price[],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>&amp;ExtLineBuffer[],<sp/>int<sp/>InpMAPeriod)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>limit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>SmoothFactor<sp/>=<sp/>2.0<sp/>/<sp/>(1.0<sp/>+<sp/>InpMAPeriod);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>first<sp/>calculation<sp/>or<sp/>number<sp/>of<sp/>bars<sp/>was<sp/>changed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(prev_calculated<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>InpMAPeriod<sp/>+<sp/>begin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[begin]<sp/>=<sp/>price[begin];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>begin<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[i]<sp/>=<sp/>price[i]<sp/>*<sp/>SmoothFactor<sp/>+<sp/>ExtLineBuffer[i<sp/>-<sp/>1]<sp/>*<sp/>(1.0<sp/>-<sp/>SmoothFactor);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>prev_calculated<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>main<sp/>loop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>limit;<sp/>i<sp/>&lt;<sp/>rates_total<sp/>&amp;&amp;<sp/>!IsStopped();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[i]<sp/>=<sp/>price[i]<sp/>*<sp/>SmoothFactor<sp/>+<sp/>ExtLineBuffer[i<sp/>-<sp/>1]<sp/>*<sp/>(1.0<sp/>-<sp/>SmoothFactor);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>Linearly<sp/>Weighted<sp/>Moving<sp/>Average<sp/>(LWMA).<sp/>The<sp/>same<sp/>as<sp/>in<sp/>&quot;Example<sp/>Moving<sp/>Average&quot;<sp/>indicator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>CalculateLWMA(int<sp/>rates_total,<sp/>int<sp/>prev_calculated,<sp/>int<sp/>begin,<sp/>const<sp/>double<sp/>&amp;price[],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>&amp;ExtLineBuffer[],<sp/>int<sp/>InpMAPeriod)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>limit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>int<sp/>weightsum;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>sum;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>first<sp/>calculation<sp/>or<sp/>number<sp/>of<sp/>bars<sp/>was<sp/>changed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(prev_calculated<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weightsum<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>InpMAPeriod<sp/>+<sp/>begin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//---<sp/>set<sp/>empty<sp/>value<sp/>for<sp/>first<sp/>limit<sp/>bars</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>ExtLineBuffer[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//---<sp/>calculate<sp/>first<sp/>visible<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>firstValue<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>begin;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>k<sp/>=<sp/>i<sp/>-<sp/>begin<sp/>+<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weightsum<sp/>+=<sp/>k;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstValue<sp/>+=<sp/>k<sp/>*<sp/>price[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>firstValue<sp/>/=<sp/>(double)weightsum;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[limit<sp/>-<sp/>1]<sp/>=<sp/>firstValue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>prev_calculated<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>main<sp/>loop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>limit;<sp/>i<sp/>&lt;<sp/>rates_total<sp/>&amp;&amp;<sp/>!IsStopped();<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>InpMAPeriod;<sp/>j++)<sp/>sum<sp/>+=<sp/>(InpMAPeriod<sp/>-<sp/>j)<sp/>*<sp/>price[i<sp/>-<sp/>j];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[i]<sp/>=<sp/>sum<sp/>/<sp/>weightsum;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>Smoothed<sp/>Moving<sp/>Average<sp/>(SMMA).<sp/>The<sp/>same<sp/>as<sp/>in<sp/>&quot;Example<sp/>Moving<sp/>Average&quot;<sp/>indicator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>CalculateSmoothedMA(int<sp/>rates_total,<sp/>int<sp/>prev_calculated,<sp/>int<sp/>begin,<sp/>const<sp/>double<sp/>&amp;price[],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>&amp;ExtLineBuffer[],<sp/>int<sp/>InpMAPeriod)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i,<sp/>limit;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>first<sp/>calculation<sp/>or<sp/>number<sp/>of<sp/>bars<sp/>was<sp/>changed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(prev_calculated<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>InpMAPeriod<sp/>+<sp/>begin;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//---<sp/>set<sp/>empty<sp/>value<sp/>for<sp/>first<sp/>limit<sp/>bars</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>limit<sp/>-<sp/>1;<sp/>i++)<sp/>ExtLineBuffer[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//---<sp/>calculate<sp/>first<sp/>visible<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>firstValue<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>begin;<sp/>i<sp/>&lt;<sp/>limit;<sp/>i++)<sp/>firstValue<sp/>+=<sp/>price[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>firstValue<sp/>/=<sp/>InpMAPeriod;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[limit<sp/>-<sp/>1]<sp/>=<sp/>firstValue;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>prev_calculated<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>main<sp/>loop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>limit;<sp/>i<sp/>&lt;<sp/>rates_total<sp/>&amp;&amp;<sp/>!IsStopped();<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExtLineBuffer[i]<sp/>=<sp/>(ExtLineBuffer[i<sp/>-<sp/>1]<sp/>*<sp/>(InpMAPeriod<sp/>-<sp/>1)<sp/>+<sp/>price[i])<sp/>/<sp/>InpMAPeriod;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculates<sp/>Moving<sp/>Average.<sp/>The<sp/>same<sp/>as<sp/>in<sp/>&quot;Example<sp/>Moving<sp/>Average&quot;<sp/>indicator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>Calculate(const<sp/>int<sp/>rates_total,<sp/>const<sp/>int<sp/>prev_calculated,<sp/>const<sp/>int<sp/>begin,<sp/>const<sp/>double<sp/>&amp;price[],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>&amp;ExtLineBuffer[],<sp/>int<sp/>InpMAMethod,<sp/>int<sp/>InpMAPeriod)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>check<sp/>for<sp/>bars<sp/>count</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(rates_total<sp/>&lt;<sp/>InpMAPeriod<sp/>-<sp/>1<sp/>+<sp/>begin)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(0);<sp/><sp/>//<sp/>not<sp/>enough<sp/>bars<sp/>for<sp/>calculation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//---<sp/>first<sp/>calculation<sp/>or<sp/>number<sp/>of<sp/>bars<sp/>was<sp/>changed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(prev_calculated<sp/>==<sp/>0)<sp/>ArrayInitialize(ExtLineBuffer,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>calculation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(InpMAMethod)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_EMA:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalculateEMA(rates_total,<sp/>prev_calculated,<sp/>begin,<sp/>price,<sp/>ExtLineBuffer,<sp/>InpMAPeriod);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_LWMA:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalculateLWMA(rates_total,<sp/>prev_calculated,<sp/>begin,<sp/>price,<sp/>ExtLineBuffer,<sp/>InpMAPeriod);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_SMMA:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalculateSmoothedMA(rates_total,<sp/>prev_calculated,<sp/>begin,<sp/>price,<sp/>ExtLineBuffer,<sp/>InpMAPeriod);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_SMA:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalculateSimpleMA(rates_total,<sp/>prev_calculated,<sp/>begin,<sp/>price,<sp/>ExtLineBuffer,<sp/>InpMAPeriod);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//---<sp/>return<sp/>value<sp/>of<sp/>prev_calculated<sp/>for<sp/>next<sp/>call</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(rates_total);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>SimpleMA(const<sp/>int<sp/>position,<sp/>const<sp/>int<sp/>period,<sp/>const<sp/>double<sp/>&amp;price[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>period;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>price[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>period;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>indicator&apos;s<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetValue(int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ResetLastError();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_value<sp/>=<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(params.idstype)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>IDATA_BUILTIN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istate.handle<sp/>=<sp/>istate.is_changed<sp/>?<sp/>INVALID_HANDLE<sp/>:<sp/>istate.handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_value<sp/>=<sp/>Indi_MA::iMA(GetSymbol(),<sp/>GetTf(),<sp/>GetPeriod(),<sp/>GetMAShift(),<sp/>GetMAMethod(),<sp/>GetAppliedPrice(),<sp/>_shift,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPointer(this));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>IDATA_ICUSTOM:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>istate.handle<sp/>=<sp/>istate.is_changed<sp/>?<sp/>INVALID_HANDLE<sp/>:<sp/>istate.handle;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_value<sp/>=<sp/>iCustom(istate.handle,<sp/>GetSymbol(),<sp/>GetTf(),<sp/>params.custom_indi_name,<sp/>/*<sp/>[<sp/>*/<sp/>GetPeriod(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetMAShift(),<sp/>GetMAMethod(),<sp/>GetAppliedPrice()<sp/>/*<sp/>]<sp/>*/,<sp/>0,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>IDATA_INDICATOR:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Calculating<sp/>MA<sp/>value<sp/>from<sp/>specified<sp/>indicator.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_value<sp/>=<sp/>Indi_MA::iMAOnIndicator(params.indi_data,<sp/>GetSymbol(),<sp/>GetTf(),<sp/>GetPeriod(),<sp/>GetMAShift(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetMAMethod(),<sp/>_shift,<sp/>GetPointer(this));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>istate.is_ready<sp/>=<sp/>_LastError<sp/>==<sp/>ERR_NO_ERROR;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>istate.is_changed<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>indicator&apos;s<sp/>struct<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>IndicatorDataEntry<sp/>GetEntry(int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>_bar_time<sp/>=<sp/>GetBarTime(_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>_position;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>IndicatorDataEntry<sp/>_entry(params.max_modes);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(idata.KeyExists(_bar_time,<sp/>_position))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_entry<sp/>=<sp/>idata.GetByPos(_position);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_entry.timestamp<sp/>=<sp/>GetBarTime(_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_entry.values[0]<sp/>=<sp/>GetValue(_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_entry.SetFlag(INDI_ENTRY_FLAG_IS_VALID,<sp/>!_entry.HasValue((double)NULL)<sp/>&amp;&amp;<sp/>!_entry.HasValue(EMPTY_VALUE)<sp/>&amp;&amp;<sp/>!_entry.HasValue(DBL_MAX));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_entry.IsValid())<sp/>idata.Add(_entry,<sp/>_bar_time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_entry;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>indicator&apos;s<sp/>entry<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MqlParam<sp/>GetEntryValue(int<sp/>_shift<sp/>=<sp/>0,<sp/>int<sp/>_mode<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_param<sp/>=<sp/>{TYPE_DOUBLE};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GetEntry(_shift).values[_mode].Get(_param.double_value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_param;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>period<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Averaging<sp/>period<sp/>for<sp/>the<sp/>calculation<sp/>of<sp/>the<sp/>moving<sp/>average.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>GetPeriod()<sp/>{<sp/>return<sp/>params.period;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>MA<sp/>shift<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Indicators<sp/>line<sp/>offset<sp/>relate<sp/>to<sp/>the<sp/>chart<sp/>by<sp/>timeframe.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>GetMAShift()<sp/>{<sp/>return<sp/>params.ma_shift;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Set<sp/>MA<sp/>method<sp/>(smoothing<sp/>type).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ENUM_MA_METHOD<sp/>GetMAMethod()<sp/>{<sp/>return<sp/>params.ma_method;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>applied<sp/>price<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>The<sp/>desired<sp/>price<sp/>base<sp/>for<sp/>calculations.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ENUM_APPLIED_PRICE<sp/>GetAppliedPrice()<sp/>{<sp/>return<sp/>params.applied_price;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Setters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Set<sp/>period<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Averaging<sp/>period<sp/>for<sp/>the<sp/>calculation<sp/>of<sp/>the<sp/>moving<sp/>average.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetPeriod(unsigned<sp/>int<sp/>_period)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>istate.is_changed<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.period<sp/>=<sp/>_period;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Set<sp/>MA<sp/>shift<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetMAShift(int<sp/>_ma_shift)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>istate.is_changed<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.ma_shift<sp/>=<sp/>_ma_shift;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Set<sp/>MA<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Indicators<sp/>line<sp/>offset<sp/>relate<sp/>to<sp/>the<sp/>chart<sp/>by<sp/>timeframe.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetMAMethod(ENUM_MA_METHOD<sp/>_ma_method)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>istate.is_changed<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.ma_method<sp/>=<sp/>_ma_method;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Set<sp/>applied<sp/>price<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>The<sp/>desired<sp/>price<sp/>base<sp/>for<sp/>calculations.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://docs.mql4.com/constants/indicatorconstants/prices#enum_applied_price_enum</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/constants/indicatorconstants/prices#enum_applied_price_enum</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetAppliedPrice(ENUM_APPLIED_PRICE<sp/>_applied_price)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>istate.is_changed<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>params.applied_price<sp/>=<sp/>_applied_price;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/><sp/>//<sp/>INDI_MA_MQH</highlight></codeline>
    </programlisting>
    <location file="Indicators/Indi_MA.mqh"/>
  </compounddef>
</doxygen>
