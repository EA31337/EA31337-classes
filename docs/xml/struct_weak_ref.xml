<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="struct_weak_ref" kind="struct" language="C++" prot="public">
    <compoundname>WeakRef</compoundname>
    <includes refid="_refs_8struct_8h" local="no">Refs.struct.h</includes>
    <templateparamlist>
      <param>
        <type>typename X</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" prot="public" static="no" mutable="no">
        <type>ReferenceCounter *</type>
        <definition>ReferenceCounter* WeakRef&lt; X &gt;::ptr_ref_counter</definition>
        <argsstring></argsstring>
        <name>ptr_ref_counter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to object holding reference counts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="143" column="20" bodyfile="Refs.struct.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_weak_ref_1a62db41e1b3ea0c45d3ac3ffff7463bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>WeakRef&lt; X &gt;::WeakRef</definition>
        <argsstring>(X *_ptr=NULL)</argsstring>
        <name>WeakRef</name>
        <param>
          <type>X *</type>
          <declname>_ptr</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="149" column="3" bodyfile="Refs.struct.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1a9efcf93ac0009806b82702c3160d94c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>WeakRef&lt; X &gt;::WeakRef</definition>
        <argsstring>(WeakRef&lt; X &gt; &amp;ref)</argsstring>
        <name>WeakRef</name>
        <param>
          <type><ref refid="struct_weak_ref" kindref="compound">WeakRef</ref>&lt; X &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="154" column="3" bodyfile="Refs.struct.h" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1ad6f435eac19be8b177bad9cdaafff281" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>WeakRef&lt; X &gt;::WeakRef</definition>
        <argsstring>(Ref&lt; X &gt; &amp;ref)</argsstring>
        <name>WeakRef</name>
        <param>
          <type><ref refid="struct_ref" kindref="compound">Ref</ref>&lt; X &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="159" column="3" bodyfile="Refs.struct.h" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1acad10135370faa504a349c0ece73f8ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>WeakRef&lt; X &gt;::~WeakRef</definition>
        <argsstring>()</argsstring>
        <name>~WeakRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="164" column="3" bodyfile="Refs.struct.h" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1a10b548008889097b7682818df932fd72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool WeakRef&lt; X &gt;::ObjectExists</definition>
        <argsstring>()</argsstring>
        <name>ObjectExists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="166" column="8" bodyfile="Refs.struct.h" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1aabd08dc1d7f2cc06e1fdf4c77feadc72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>X *</type>
        <definition>X* WeakRef&lt; X &gt;::Ptr</definition>
        <argsstring>()</argsstring>
        <name>Ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="168" column="5" bodyfile="Refs.struct.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1acabdc551703ae3c20511d75ebbfcca03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void WeakRef&lt; X &gt;::operator=</definition>
        <argsstring>(X *_ptr)</argsstring>
        <name>operator=</name>
        <param>
          <type>X *</type>
          <declname>_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a strong reference to the given object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="173" column="8" bodyfile="Refs.struct.h" bodystart="173" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1a10439f14c6c3391d998e429f3e1bdcde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void WeakRef&lt; X &gt;::operator=</definition>
        <argsstring>(WeakRef&lt; X &gt; &amp;right)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="struct_weak_ref" kindref="compound">WeakRef</ref>&lt; X &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a weak reference to the given weakly-referenced object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="199" column="8" bodyfile="Refs.struct.h" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1a2848e4cbcb10b9d2a48f3ee7151cffcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void WeakRef&lt; X &gt;::operator=</definition>
        <argsstring>(Ref&lt; X &gt; &amp;right)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="struct_ref" kindref="compound">Ref</ref>&lt; X &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes a weak reference to the strongly-referenced object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="204" column="8" bodyfile="Refs.struct.h" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="struct_weak_ref_1af844d30361dd97434a27b7d3b70882ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void WeakRef&lt; X &gt;::Unset</definition>
        <argsstring>()</argsstring>
        <name>Unset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unbinds holding reference. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Refs.struct.h" line="209" column="8" bodyfile="Refs.struct.h" bodystart="209" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class used to hold weak reference to reference-counted object. </para>
    </detaileddescription>
    <location file="Refs.struct.h" line="139" column="1" bodyfile="Refs.struct.h" bodystart="139" bodyend="231"/>
    <listofallmembers>
      <member refid="struct_weak_ref_1a10b548008889097b7682818df932fd72" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>ObjectExists</name></member>
      <member refid="struct_weak_ref_1acabdc551703ae3c20511d75ebbfcca03" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>operator=</name></member>
      <member refid="struct_weak_ref_1a10439f14c6c3391d998e429f3e1bdcde" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>operator=</name></member>
      <member refid="struct_weak_ref_1a2848e4cbcb10b9d2a48f3ee7151cffcf" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>operator=</name></member>
      <member refid="struct_weak_ref_1aabd08dc1d7f2cc06e1fdf4c77feadc72" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>Ptr</name></member>
      <member refid="struct_weak_ref_1afa2d507f7d0a2bd9bc33978cb6c3acf6" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>ptr_ref_counter</name></member>
      <member refid="struct_weak_ref_1af844d30361dd97434a27b7d3b70882ea" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>Unset</name></member>
      <member refid="struct_weak_ref_1a62db41e1b3ea0c45d3ac3ffff7463bd5" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>WeakRef</name></member>
      <member refid="struct_weak_ref_1a9efcf93ac0009806b82702c3160d94c0" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>WeakRef</name></member>
      <member refid="struct_weak_ref_1ad6f435eac19be8b177bad9cdaafff281" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>WeakRef</name></member>
      <member refid="struct_weak_ref_1acad10135370faa504a349c0ece73f8ec" prot="public" virt="non-virtual"><scope>WeakRef</scope><name>~WeakRef</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
