<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_chart_8mqh" kind="file" language="C++">
    <compoundname>Chart.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@file</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Class<sp/>to<sp/>provide<sp/>chart,<sp/>timeframe<sp/>and<sp/>timeseries<sp/>operations.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@docs</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/chart_operations</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>-<sp/>https://www.mql5.com/en/docs/series</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Class<sp/>dependencies.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Chart;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Market;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Prevents<sp/>processing<sp/>this<sp/>includes<sp/>file<sp/>for<sp/>the<sp/>second<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>CHART_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CHART_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Chart.enum.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Chart.struct.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Condition.enum.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Convert.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Market.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Serializer.mqh&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>structs<sp/>(for<sp/>MQL4<sp/>backward<sp/>compatibility).</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Struct<sp/>arrays<sp/>that<sp/>contains<sp/>given<sp/>values<sp/>of<sp/>each<sp/>bar<sp/>of<sp/>the<sp/>current<sp/>chart.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>For<sp/>MQL4<sp/>backward<sp/>compatibility.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>@docs:<sp/>https://docs.mql4.com/predefined</highlight></codeline>
<codeline><highlight class="normal">ChartBarTime<sp/>Time;</highlight></codeline>
<codeline><highlight class="normal">ChartPriceClose<sp/>Close;</highlight></codeline>
<codeline><highlight class="normal">ChartPriceHigh<sp/>High;</highlight></codeline>
<codeline><highlight class="normal">ChartPriceLow<sp/>Low;</highlight></codeline>
<codeline><highlight class="normal">ChartPriceOpen<sp/>Open;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>global<sp/>functions<sp/>(for<sp/>MQL4<sp/>backward<sp/>compatibility).</highlight></codeline>
<codeline><highlight class="normal">int<sp/>iBarShift(string<sp/>_symbol,<sp/>int<sp/>_tf,<sp/>datetime<sp/>_time,<sp/>bool<sp/>_exact<sp/>=<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Chart::iBarShift(_symbol,<sp/>(ENUM_TIMEFRAMES)_tf,<sp/>_time,<sp/>_exact);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">double<sp/>iClose(string<sp/>_symbol,<sp/>int<sp/>_tf,<sp/>int<sp/>_shift)<sp/>{<sp/>return<sp/>Chart::iClose(_symbol,<sp/>(ENUM_TIMEFRAMES)_tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>type<sp/>of<sp/>periods.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>@see:<sp/>https://docs.mql4.com/constants/chartconstants/enum_timeframes</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TFS<sp/>21</highlight></codeline>
<codeline><highlight class="normal">const<sp/>ENUM_TIMEFRAMES<sp/>TIMEFRAMES_LIST[TFS]<sp/>=<sp/>{PERIOD_M1,<sp/><sp/>PERIOD_M2,<sp/><sp/>PERIOD_M3,<sp/><sp/>PERIOD_M4,<sp/><sp/>PERIOD_M5,<sp/><sp/>PERIOD_M6,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PERIOD_M10,<sp/>PERIOD_M12,<sp/>PERIOD_M15,<sp/>PERIOD_M20,<sp/>PERIOD_M30,<sp/>PERIOD_H1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PERIOD_H2,<sp/><sp/>PERIOD_H3,<sp/><sp/>PERIOD_H4,<sp/><sp/>PERIOD_H6,<sp/><sp/>PERIOD_H8,<sp/><sp/>PERIOD_H12,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PERIOD_D1,<sp/><sp/>PERIOD_W1,<sp/><sp/>PERIOD_MN1};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Class<sp/>to<sp/>provide<sp/>chart,<sp/>timeframe<sp/>and<sp/>timeseries<sp/>operations.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Chart<sp/>:<sp/>public<sp/>Market<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Structs.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ChartEntry<sp/>chart_saves[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ChartParams<sp/>cparams;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Stores<sp/>information<sp/>about<sp/>the<sp/>prices,<sp/>volumes<sp/>and<sp/>spread.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MqlRates<sp/>rates[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ChartEntry<sp/>c_entry;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Stores<sp/>indicator<sp/>instances.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>@todo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Dict&lt;long,<sp/>Indicator&gt;<sp/>indis;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Variables.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>datetime<sp/>last_bar_time;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Current<sp/>tick<sp/>index<sp/>(incremented<sp/>every<sp/>OnTick()).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>tick_index;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Current<sp/>bar<sp/>index<sp/>(incremented<sp/>every<sp/>OnTick()<sp/>if<sp/>IsNewBar()<sp/>is<sp/>true).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>bar_index;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>Chart(ChartParams<sp/>&amp;_cparams,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cparams(_cparams.tf),<sp/>Market(_symbol),<sp/>last_bar_time(GetBarTime()),<sp/>tick_index(-1),<sp/>bar_index(-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>the<sp/>first<sp/>BarOHLC<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SaveChartEntry();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>Chart(ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cparams(_tf),<sp/>Market(_symbol),<sp/>last_bar_time(GetBarTime()),<sp/>tick_index(-1),<sp/>bar_index(-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>the<sp/>first<sp/>BarOHLC<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SaveChartEntry();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Chart(ENUM_TIMEFRAMES_INDEX<sp/>_tfi,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>cparams(_tfi),<sp/>Market(_symbol),<sp/>last_bar_time(GetBarTime()),<sp/>tick_index(-1),<sp/>bar_index(-1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>the<sp/>first<sp/>BarOHLC<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SaveChartEntry();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Class<sp/>constructor.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>~Chart()<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>Chart<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>long<sp/>GetId()<sp/>{<sp/>return<sp/>ChartID();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>the<sp/>current<sp/>timeframe.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ENUM_TIMEFRAMES<sp/>GetTf()<sp/>{<sp/>return<sp/>cparams.tf;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>chart<sp/>entry.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>ChartEntry<sp/>GetEntry(ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>unsigned<sp/>int<sp/>_shift<sp/>=<sp/>0,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>_time<sp/>=<sp/>Chart::iTime(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ChartEntry<sp/>_chart_entry;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_time<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_open<sp/>=<sp/>(float)Chart::iOpen(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_high<sp/>=<sp/>(float)Chart::iHigh(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_low<sp/>=<sp/>(float)Chart::iLow(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_close<sp/>=<sp/>(float)Chart::iClose(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarOHLC<sp/>_ohlc(_open,<sp/>_high,<sp/>_low,<sp/>_close,<sp/>_time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarEntry<sp/>_bar_entry(_ohlc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_chart_entry.SetBar(_bar_entry);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_chart_entry;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ChartEntry<sp/>GetEntry(unsigned<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>_time<sp/>=<sp/>GetBarTime(_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ChartEntry<sp/>_chart_entry;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_time<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Adds<sp/>caching.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_open<sp/>=<sp/>(float)GetOpen(_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_high<sp/>=<sp/>(float)GetHigh(_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_low<sp/>=<sp/>(float)GetLow(_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>_close<sp/>=<sp/>(float)GetClose(_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarOHLC<sp/>_ohlc(_open,<sp/>_high,<sp/>_low,<sp/>_close,<sp/>_time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarEntry<sp/>_bar_entry(_ohlc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_chart_entry.SetBar(_bar_entry);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_chart_entry;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Convert<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Convert<sp/>period<sp/>to<sp/>proper<sp/>chart<sp/>timeframe<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>ENUM_TIMEFRAMES<sp/>IndexToTf(ENUM_TIMEFRAMES_INDEX<sp/>index)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Convert<sp/>it<sp/>into<sp/>a<sp/>loop<sp/>and<sp/>using<sp/>tf<sp/>constant,<sp/>see:<sp/>TfToIndex().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(index)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M1;<sp/><sp/>//<sp/>For<sp/>1<sp/>minute.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M2;<sp/><sp/>//<sp/>For<sp/>2<sp/>minutes<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M3:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M3;<sp/><sp/>//<sp/>For<sp/>3<sp/>minutes<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M4:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M4;<sp/><sp/>//<sp/>For<sp/>4<sp/>minutes<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M5:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M5;<sp/><sp/>//<sp/>For<sp/>5<sp/>minutes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M6:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M6;<sp/><sp/>//<sp/>For<sp/>6<sp/>minutes<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M10:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M10;<sp/><sp/>//<sp/>For<sp/>10<sp/>minutes<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M12:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M12;<sp/><sp/>//<sp/>For<sp/>12<sp/>minutes<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M15:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M15;<sp/><sp/>//<sp/>For<sp/>15<sp/>minutes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M20:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M20;<sp/><sp/>//<sp/>For<sp/>20<sp/>minutes<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>M30:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_M30;<sp/><sp/>//<sp/>For<sp/>30<sp/>minutes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>H1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_H1;<sp/><sp/>//<sp/>For<sp/>1<sp/>hour.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>H2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_H2;<sp/><sp/>//<sp/>For<sp/>2<sp/>hours<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>H3:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_H3;<sp/><sp/>//<sp/>For<sp/>3<sp/>hours<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>H4:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_H4;<sp/><sp/>//<sp/>For<sp/>4<sp/>hours.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>H6:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_H6;<sp/><sp/>//<sp/>For<sp/>6<sp/>hours<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>H8:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_H8;<sp/><sp/>//<sp/>For<sp/>8<sp/>hours<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>H12:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_H12;<sp/><sp/>//<sp/>For<sp/>12<sp/>hours<sp/>(non-standard).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>D1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_D1;<sp/><sp/>//<sp/>Daily.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>W1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_W1;<sp/><sp/>//<sp/>Weekly.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MN1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>PERIOD_MN1;<sp/><sp/>//<sp/>Monthly.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Convert<sp/>timeframe<sp/>constant<sp/>to<sp/>index<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>ENUM_TIMEFRAMES_INDEX<sp/>TfToIndex(ENUM_TIMEFRAMES<sp/>_tf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_tf<sp/>=<sp/>(_tf<sp/>==<sp/>0<sp/>||<sp/>_tf<sp/>==<sp/>PERIOD_CURRENT)<sp/>?<sp/>(ENUM_TIMEFRAMES)_Period<sp/>:<sp/>_tf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ArraySize(TIMEFRAMES_LIST);<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TIMEFRAMES_LIST[i]<sp/>==<sp/>_tf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ENUM_TIMEFRAMES_INDEX)i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ENUM_TIMEFRAMES_INDEX<sp/>TfToIndex()<sp/>{<sp/>return<sp/>TfToIndex(cparams.tf);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>text<sp/>representation<sp/>of<sp/>the<sp/>timeframe<sp/>constant.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>TfToString(const<sp/>ENUM_TIMEFRAMES<sp/>_tf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>StringSubstr(EnumToString((_tf<sp/>==<sp/>0<sp/>||<sp/>_tf<sp/>==<sp/>PERIOD_CURRENT<sp/>?<sp/>(ENUM_TIMEFRAMES)_Period<sp/>:<sp/>_tf)),<sp/>7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>TfToString()<sp/>{<sp/>return<sp/>TfToString(cparams.tf);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>text<sp/>representation<sp/>of<sp/>the<sp/>timeframe<sp/>index.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>IndexToString(ENUM_TIMEFRAMES_INDEX<sp/>_tfi)<sp/>{<sp/>return<sp/>TfToString(IndexToTf(_tfi));<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>State<sp/>checking<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Validates<sp/>whether<sp/>given<sp/>timeframe<sp/>is<sp/>valid.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>IsValidShift(int<sp/>_shift,<sp/>ENUM_TIMEFRAMES<sp/>_tf,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)<sp/>{<sp/>return<sp/>Chart::iTime(_symbol,<sp/>_tf,<sp/>_shift)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsValidShift(int<sp/>_shift)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetBarTime(_shift)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Validates<sp/>whether<sp/>given<sp/>timeframe<sp/>is<sp/>valid.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>IsValidTf(ENUM_TIMEFRAMES<sp/>_tf,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)<sp/>{<sp/>return<sp/>Chart::iOpen(_symbol,<sp/>_tf)<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsValidTf()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>is_valid<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>is_valid<sp/>?<sp/>is_valid<sp/>:<sp/>GetOpen()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Validate<sp/>whether<sp/>given<sp/>timeframe<sp/>index<sp/>is<sp/>valid.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>IsValidTfIndex(ENUM_TIMEFRAMES_INDEX<sp/>_tfi,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>IsValidTf(IndexToTf(_tfi),<sp/>_symbol);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsValidTfIndex()<sp/>{<sp/>return<sp/>IsValidTfIndex(cparams.tfi,<sp/>symbol);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Timeseries<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>@see:<sp/>https://docs.mql4.com/series<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>open<sp/>time<sp/>price<sp/>value<sp/>for<sp/>the<sp/>bar<sp/>of<sp/>indicated<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>If<sp/>local<sp/>history<sp/>is<sp/>empty<sp/>(not<sp/>loaded),<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>datetime<sp/>iTime(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>_result<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>::iTime(_symbol,<sp/>_tf,<sp/>_shift);<sp/><sp/>//<sp/>Same<sp/>as:<sp/>Time[_shift]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(GetLastError()<sp/>==<sp/>4066)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>When<sp/>last<sp/>error<sp/>is<sp/>4066<sp/>(ERR_HISTORY_WILL_UPDATED).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>requested<sp/>history<sp/>data<sp/>in<sp/>updating<sp/>state.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@see:<sp/>https://book.mql4.com/appendix/errors</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResetLastError();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>_arr[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>MQL4::TFMigrate(_tf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Improves<sp/>performance<sp/>by<sp/>caching<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>(_shift<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>::CopyTime(_symbol,<sp/>_tf,<sp/>_shift,<sp/>1,<sp/>_arr)<sp/>&gt;<sp/>0)<sp/>?<sp/>_arr[0]<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>datetime<sp/>GetBarTime(ENUM_TIMEFRAMES<sp/>_tf,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iTime(symbol,<sp/>_tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>datetime<sp/>GetBarTime(unsigned<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iTime(symbol,<sp/>cparams.tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>datetime<sp/>GetLastBarTime()<sp/>{<sp/>return<sp/>last_bar_time;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>open<sp/>price<sp/>value<sp/>for<sp/>the<sp/>bar<sp/>of<sp/>indicated<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>If<sp/>local<sp/>history<sp/>is<sp/>empty<sp/>(not<sp/>loaded),<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>iOpen(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iOpen(_symbol,<sp/>_tf,<sp/>_shift);<sp/><sp/>//<sp/>Same<sp/>as:<sp/>Open[_shift]</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_arr[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(_arr,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(_shift<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>CopyOpen(_symbol,<sp/>_tf,<sp/>_shift,<sp/>1,<sp/>_arr)<sp/>&gt;<sp/>0)<sp/>?<sp/>_arr[0]<sp/>:<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetOpen(ENUM_TIMEFRAMES<sp/>_tf,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iOpen(symbol,<sp/>_tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetOpen(uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iOpen(symbol,<sp/>cparams.tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>close<sp/>price<sp/>value<sp/>for<sp/>the<sp/>bar<sp/>of<sp/>indicated<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>If<sp/>local<sp/>history<sp/>is<sp/>empty<sp/>(not<sp/>loaded),<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see<sp/>http://docs.mql4.com/series/iclose</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>iClose(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iClose(_symbol,<sp/>_tf,<sp/>_shift);<sp/><sp/>//<sp/>Same<sp/>as:<sp/>Close[_shift]</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_arr[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(_arr,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(_shift<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>CopyClose(_symbol,<sp/>_tf,<sp/>_shift,<sp/>1,<sp/>_arr)<sp/>&gt;<sp/>0)<sp/>?<sp/>_arr[0]<sp/>:<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetClose(ENUM_TIMEFRAMES<sp/>_tf,<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iClose(symbol,<sp/>_tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetClose(int<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iClose(symbol,<sp/>cparams.tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>low<sp/>price<sp/>value<sp/>for<sp/>the<sp/>bar<sp/>of<sp/>indicated<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>If<sp/>local<sp/>history<sp/>is<sp/>empty<sp/>(not<sp/>loaded),<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>iLow(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iLow(_symbol,<sp/>_tf,<sp/>_shift);<sp/><sp/>//<sp/>Same<sp/>as:<sp/>Low[_shift]</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_arr[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(_arr,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(_shift<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>CopyLow(_symbol,<sp/>_tf,<sp/>_shift,<sp/>1,<sp/>_arr)<sp/>&gt;<sp/>0)<sp/>?<sp/>_arr[0]<sp/>:<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetLow(ENUM_TIMEFRAMES<sp/>_tf,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iLow(symbol,<sp/>_tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetLow(uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iLow(symbol,<sp/>cparams.tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>low<sp/>price<sp/>value<sp/>for<sp/>the<sp/>bar<sp/>of<sp/>indicated<sp/>symbol.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>If<sp/>local<sp/>history<sp/>is<sp/>empty<sp/>(not<sp/>loaded),<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>iHigh(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iHigh(_symbol,<sp/>_tf,<sp/>_shift);<sp/><sp/>//<sp/>Same<sp/>as:<sp/>High[_shift]</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_arr[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(_arr,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(_shift<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>CopyHigh(_symbol,<sp/>_tf,<sp/>_shift,<sp/>1,<sp/>_arr)<sp/>&gt;<sp/>0)<sp/>?<sp/>_arr[0]<sp/>:<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetHigh(ENUM_TIMEFRAMES<sp/>_tf,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>iHigh(symbol,<sp/>_tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetHigh(uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>iHigh(symbol,<sp/>cparams.tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>current<sp/>price<sp/>value<sp/>given<sp/>applied<sp/>price<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>iPrice(ENUM_APPLIED_PRICE<sp/>_ap,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>_result<sp/>=<sp/>EMPTY_VALUE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_ap)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Close<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRICE_CLOSE:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>Chart::iClose(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Open<sp/>price.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRICE_OPEN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>Chart::iOpen(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>maximum<sp/>price<sp/>for<sp/>the<sp/>period.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRICE_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>Chart::iHigh(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>minimum<sp/>price<sp/>for<sp/>the<sp/>period.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRICE_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>Chart::iLow(_symbol,<sp/>_tf,<sp/>_shift);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Median<sp/>price:<sp/>(high<sp/>+<sp/>low)/2.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRICE_MEDIAN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>(Chart::iHigh(_symbol,<sp/>_tf,<sp/>_shift)<sp/>+<sp/>Chart::iLow(_symbol,<sp/>_tf,<sp/>_shift))<sp/>/<sp/>2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Typical<sp/>price:<sp/>(high<sp/>+<sp/>low<sp/>+<sp/>close)/3.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRICE_TYPICAL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>(Chart::iHigh(_symbol,<sp/>_tf,<sp/>_shift)<sp/>+<sp/>Chart::iLow(_symbol,<sp/>_tf,<sp/>_shift)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Chart::iClose(_symbol,<sp/>_tf,<sp/>_shift))<sp/>/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Weighted<sp/>close<sp/>price:<sp/>(high<sp/>+<sp/>low<sp/>+<sp/>close<sp/>+<sp/>close)/4.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>PRICE_WEIGHTED:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>(Chart::iHigh(_symbol,<sp/>_tf,<sp/>_shift)<sp/>+<sp/>Chart::iLow(_symbol,<sp/>_tf,<sp/>_shift)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Chart::iClose(_symbol,<sp/>_tf,<sp/>_shift)<sp/>+<sp/>Chart::iClose(_symbol,<sp/>_tf,<sp/>_shift))<sp/>/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetPrice(ENUM_APPLIED_PRICE<sp/>_ap,<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>Chart::iPrice(_ap,<sp/>symbol,<sp/>cparams.tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>price<sp/>value<sp/>given<sp/>applied<sp/>price<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>float<sp/>GetAppliedPrice(ENUM_APPLIED_PRICE<sp/>_ap,<sp/>float<sp/>_o,<sp/>float<sp/>_h,<sp/>float<sp/>_c,<sp/>float<sp/>_l)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>BarOHLC<sp/>_bar(_o,<sp/>_h,<sp/>_c,<sp/>_l);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_bar.GetAppliedPrice(_ap);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>tick<sp/>volume<sp/>value<sp/>for<sp/>the<sp/>bar.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>If<sp/>local<sp/>history<sp/>is<sp/>empty<sp/>(not<sp/>loaded),<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>long<sp/>iVolume(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iVolume(_symbol,<sp/>_tf,<sp/>_shift);<sp/><sp/>//<sp/>Same<sp/>as:<sp/>Volume[_shift]</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>_arr[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(_arr,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(_shift<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>CopyTickVolume(_symbol,<sp/>_tf,<sp/>_shift,<sp/>1,<sp/>_arr)<sp/>&gt;<sp/>0)<sp/>?<sp/>_arr[0]<sp/>:<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>long<sp/>GetVolume(ENUM_TIMEFRAMES<sp/>_tf,<sp/>uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>iVolume(symbol,<sp/>_tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>long<sp/>GetVolume(uint<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>iVolume(symbol,<sp/>cparams.tf,<sp/>_shift);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>shift<sp/>of<sp/>the<sp/>maximum<sp/>value<sp/>over<sp/>a<sp/>specific<sp/>number<sp/>of<sp/>periods<sp/>depending<sp/>on<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>iHighest(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>int<sp/>_type<sp/>=<sp/>MODE_HIGH,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint<sp/>_count<sp/>=<sp/>WHOLE_ARRAY,<sp/>int<sp/>_start<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iHighest(_symbol,<sp/>_tf,<sp/>_type,<sp/>_count,<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_start<sp/>&lt;<sp/>0)<sp/>return<sp/>(-1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_count<sp/>=<sp/>(_count<sp/>&lt;=<sp/>0<sp/>?<sp/>Chart::iBars(_symbol,<sp/>_tf)<sp/>:<sp/>_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>arr_d[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>arr_l[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>arr_dt[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(arr_d,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_type)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_OPEN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyOpen(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyLow(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyHigh(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_CLOSE:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyClose(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_VOLUME:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArraySetAsSeries(arr_l,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyTickVolume(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_l);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ArrayMaximum(arr_l,<sp/>0,<sp/>_count)<sp/>+<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_TIME:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArraySetAsSeries(arr_dt,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyTime(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_dt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ArrayMaximum(arr_dt,<sp/>0,<sp/>_count)<sp/>+<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(ArrayMaximum(arr_d,<sp/>0,<sp/>_count)<sp/>+<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetHighest(ENUM_TIMEFRAMES<sp/>_tf,<sp/>int<sp/>type,<sp/>int<sp/>_count<sp/>=<sp/>WHOLE_ARRAY,<sp/>int<sp/>_start<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>iHighest(symbol,<sp/>_tf,<sp/>type,<sp/>_count,<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetHighest(int<sp/>type,<sp/>int<sp/>_count<sp/>=<sp/>WHOLE_ARRAY,<sp/>int<sp/>_start<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>iHighest(symbol,<sp/>cparams.tf,<sp/>type,<sp/>_count,<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>shift<sp/>of<sp/>the<sp/>lowest<sp/>value<sp/>over<sp/>a<sp/>specific<sp/>number<sp/>of<sp/>periods<sp/>depending<sp/>on<sp/>type.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>iLowest(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT,<sp/>int<sp/>_type<sp/>=<sp/>MODE_LOW,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>_count<sp/>=<sp/>WHOLE_ARRAY,<sp/>int<sp/>_start<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iLowest(_symbol,<sp/>_tf,<sp/>_type,<sp/>_count,<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_start<sp/>&lt;<sp/>0)<sp/>return<sp/>(-1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_count<sp/>=<sp/>(_count<sp/>&lt;=<sp/>0<sp/>?<sp/>iBars(_symbol,<sp/>_tf)<sp/>:<sp/>_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>arr_d[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>arr_l[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>arr_dt[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ArraySetAsSeries(arr_d,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_type)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_OPEN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyOpen(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyLow(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyHigh(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_CLOSE:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyClose(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_VOLUME:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArraySetAsSeries(arr_l,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyTickVolume(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_l);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ArrayMinimum(arr_l,<sp/>0,<sp/>_count)<sp/>+<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_TIME:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArraySetAsSeries(arr_dt,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyTime(_symbol,<sp/>_tf,<sp/>_start,<sp/>_count,<sp/>arr_dt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(ArrayMinimum(arr_dt,<sp/>0,<sp/>_count)<sp/>+<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(ArrayMinimum(arr_d,<sp/>0,<sp/>_count)<sp/>+<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetLowest(int<sp/>_type,<sp/>int<sp/>_count<sp/>=<sp/>WHOLE_ARRAY,<sp/>int<sp/>_start<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>iLowest(symbol,<sp/>cparams.tf,<sp/>_type,<sp/>_count,<sp/>_start);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bars<sp/>on<sp/>the<sp/>specified<sp/>chart.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>iBars(string<sp/>_symbol<sp/>=<sp/>NULL,<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>PERIOD_CURRENT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>In<sp/>MQL4,<sp/>for<sp/>the<sp/>current<sp/>chart,<sp/>the<sp/>information<sp/>about<sp/>the<sp/>amount<sp/>of<sp/>bars<sp/>is<sp/>in<sp/>the<sp/>Bars<sp/>predefined<sp/>variable.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iBars(_symbol,<sp/>_tf);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>_MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>MQL4::TFMigrate(_tf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Bars(_symbol,<sp/>_tf);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetBars()<sp/>{<sp/>return<sp/>Chart::iBars(symbol,<sp/>cparams.tf);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Search<sp/>for<sp/>a<sp/>bar<sp/>by<sp/>its<sp/>time.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>the<sp/>index<sp/>of<sp/>the<sp/>bar<sp/>which<sp/>covers<sp/>the<sp/>specified<sp/>time.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>iBarShift(string<sp/>_symbol,<sp/>ENUM_TIMEFRAMES<sp/>_tf,<sp/>datetime<sp/>_time,<sp/>bool<sp/>_exact<sp/>=<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::iBarShift(_symbol,<sp/>_tf,<sp/>_time,<sp/>_exact);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(_time<sp/>&lt;<sp/>0)<sp/>return<sp/>(-1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>arr[],<sp/>_time0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>ENUM_TIMEFRAMES<sp/>_tf<sp/>=<sp/>MQL4::TFMigrate(_tf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>CopyTime(_symbol,<sp/>_tf,<sp/>0,<sp/>1,<sp/>arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_time0<sp/>=<sp/>arr[0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(CopyTime(_symbol,<sp/>_tf,<sp/>_time,<sp/>_time0,<sp/>arr)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArraySize(arr)<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ArraySize(arr)<sp/>-<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>_time<sp/>&lt;<sp/>_time0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>GetBarShift(datetime<sp/>_time,<sp/>bool<sp/>_exact<sp/>=<sp/>false)<sp/>{<sp/>return<sp/>iBarShift(symbol,<sp/>cparams.tf,<sp/>_time,<sp/>_exact);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Get<sp/>peak<sp/>price<sp/>at<sp/>given<sp/>number<sp/>of<sp/>bars.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>In<sp/>case<sp/>of<sp/>error,<sp/>check<sp/>it<sp/>via<sp/>GetLastError().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetPeakPrice(int<sp/>bars,<sp/>int<sp/>mode,<sp/>int<sp/>index,<sp/>ENUM_TIMEFRAMES<sp/>timeframe<sp/>=<sp/>PERIOD_CURRENT)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>ibar<sp/>=<sp/>-1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Add<sp/>symbol<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>peak_price<sp/>=<sp/>GetOpen(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(mode)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibar<sp/>=<sp/>iHighest(symbol,<sp/>timeframe,<sp/>MODE_HIGH,<sp/>bars,<sp/>index);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ibar<sp/>&gt;=<sp/>0<sp/>?<sp/>GetHigh(timeframe,<sp/>ibar)<sp/>:<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MODE_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibar<sp/>=<sp/>iLowest(symbol,<sp/>timeframe,<sp/>MODE_LOW,<sp/>bars,<sp/>index);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ibar<sp/>&gt;=<sp/>0<sp/>?<sp/>GetLow(timeframe,<sp/>ibar)<sp/>:<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetPeakPrice(int<sp/>bars,<sp/>int<sp/>mode<sp/>=<sp/>MODE_HIGH,<sp/>int<sp/>index<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetPeakPrice(bars,<sp/>mode,<sp/>index,<sp/>cparams.tf);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>List<sp/>active<sp/>timeframes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>_all<sp/>bool<sp/>If<sp/>true,<sp/>return<sp/>also<sp/>non-active<sp/>timeframes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>textual<sp/>representation<sp/>of<sp/>list<sp/>of<sp/>timeframes.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>ListTimeframes(bool<sp/>_all<sp/>=<sp/>false,<sp/>string<sp/>_prefix<sp/>=<sp/>&quot;Timeframes:<sp/>&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>output<sp/>=<sp/>_prefix;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(ENUM_TIMEFRAMES_INDEX<sp/>_tfi<sp/>=<sp/>0;<sp/>_tfi<sp/>&lt;<sp/>FINAL_ENUM_TIMEFRAMES_INDEX;<sp/>_tfi++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_all)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>StringFormat(&quot;%s:<sp/>%s;<sp/>&quot;,<sp/>IndexToString(_tfi),<sp/>IsValidTfIndex(_tfi)<sp/>?<sp/>&quot;On&quot;<sp/>:<sp/>&quot;Off&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>IsValidTfIndex(_tfi)<sp/>?<sp/>IndexToString(_tfi)<sp/>+<sp/>&quot;;<sp/>&quot;<sp/>:<sp/>&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Chart<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>a<sp/>flag<sp/>hiding<sp/>indicators.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>After<sp/>the<sp/>Expert<sp/>Advisor<sp/>has<sp/>been<sp/>tested<sp/>and<sp/>the<sp/>appropriate<sp/>chart<sp/>opened,<sp/>the<sp/>flagged<sp/>indicators<sp/>will<sp/>not<sp/>be<sp/>drawn</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>testing<sp/>chart.<sp/>Every<sp/>indicator<sp/>called<sp/>will<sp/>first<sp/>be<sp/>flagged<sp/>with<sp/>the<sp/>current<sp/>hiding<sp/>flag.<sp/>It<sp/>must<sp/>be<sp/>noted</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>that<sp/>only<sp/>those<sp/>indicators<sp/>can<sp/>be<sp/>drawn<sp/>in<sp/>the<sp/>testing<sp/>chart<sp/>that<sp/>are<sp/>directly<sp/>called<sp/>from<sp/>the<sp/>expert<sp/>under<sp/>test.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>_hide<sp/>bool<sp/>Flag<sp/>for<sp/>hiding<sp/>indicators<sp/>when<sp/>testing.<sp/>Set<sp/>true<sp/>to<sp/>hide<sp/>created<sp/>indicators,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>HideTestIndicators(bool<sp/>_hide<sp/>=<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::HideTestIndicators(_hide);</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::TesterHideIndicators(_hide);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Calculation<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Calculate<sp/>modelling<sp/>quality.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/articles/1486</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>-<sp/>https://www.mql5.com/en/articles/1513</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>CalcModellingQuality(ENUM_TIMEFRAMES<sp/>TimePr<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>nBarsInM1<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>nBarsInPr<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>nBarsInNearPr<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ENUM_TIMEFRAMES<sp/>TimeNearPr<sp/>=<sp/>PERIOD_M1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>ModellingQuality<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>StartGen<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>StartBar<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>StartGenM1<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>HistoryTotal<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>modeling_start_time<sp/>=<sp/>D&apos;1971.01.01<sp/>00:00&apos;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>NULL)<sp/>TimePr<sp/>=<sp/>(ENUM_TIMEFRAMES)Period();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_M1)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_M1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_M5)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_M1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_M15)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_M5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_M30)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_M15;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_H1)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_M30;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_H4)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_H1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_D1)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_H4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_W1)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_D1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_MN1)<sp/>TimeNearPr<sp/>=<sp/>PERIOD_W1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>1<sp/>minute.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>nBars<sp/>=<sp/>fmin(iBars(NULL,<sp/>TimePr)<sp/>*<sp/>TimePr,<sp/>iBars(NULL,<sp/>PERIOD_M1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBars;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart::iOpen(NULL,<sp/>PERIOD_M1,<sp/>i)<sp/>&gt;=<sp/>0.000001)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart::iTime(NULL,<sp/>PERIOD_M1,<sp/>i)<sp/>&gt;=<sp/>modeling_start_time)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBarsInM1++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Nearest<sp/>time.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nBars<sp/>=<sp/>iBars(NULL,<sp/>TimePr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBars;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart::iOpen(NULL,<sp/>TimePr,<sp/>i)<sp/>&gt;=<sp/>0.000001)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart::iTime(NULL,<sp/>TimePr,<sp/>i)<sp/>&gt;=<sp/>modeling_start_time)<sp/>nBarsInPr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Period<sp/>time.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nBars<sp/>=<sp/>fmin(iBars(NULL,<sp/>TimePr)<sp/>*<sp/>TimePr<sp/>/<sp/>TimeNearPr,<sp/>iBars(NULL,<sp/>TimeNearPr));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nBars;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart::iOpen(NULL,<sp/>TimeNearPr,<sp/>(int)i)<sp/>&gt;=<sp/>0.000001)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Chart::iTime(NULL,<sp/>TimeNearPr,<sp/>i)<sp/>&gt;=<sp/>modeling_start_time)<sp/>nBarsInNearPr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HistoryTotal<sp/>=<sp/>nBarsInPr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nBarsInM1<sp/>=<sp/>nBarsInM1<sp/>/<sp/>TimePr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>nBarsInNearPr<sp/>=<sp/>nBarsInNearPr<sp/>*<sp/>TimeNearPr<sp/>/<sp/>TimePr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>StartGenM1<sp/>=<sp/>HistoryTotal<sp/>-<sp/>nBarsInM1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>StartBar<sp/>=<sp/>HistoryTotal<sp/>-<sp/>nBarsInPr;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>StartBar<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>StartGen<sp/>=<sp/>HistoryTotal<sp/>-<sp/>nBarsInNearPr;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TimePr<sp/>==<sp/>PERIOD_M1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StartGenM1<sp/>=<sp/>HistoryTotal;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StartGen<sp/>=<sp/>StartGenM1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>((HistoryTotal<sp/>-<sp/>StartBar)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ModellingQuality<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((0.25<sp/>*<sp/>(StartGen<sp/>-<sp/>StartBar)<sp/>+<sp/>0.5<sp/>*<sp/>(StartGenM1<sp/>-<sp/>StartGen)<sp/>+<sp/>0.9<sp/>*<sp/>(HistoryTotal<sp/>-<sp/>StartGenM1))<sp/>/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(HistoryTotal<sp/>-<sp/>StartBar))<sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>100;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(ModellingQuality);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>number<sp/>of<sp/>seconds<sp/>in<sp/>a<sp/>period.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>unsigned<sp/>int<sp/>PeriodSeconds(ENUM_TIMEFRAMES<sp/>_tf)<sp/>{<sp/>return<sp/>::PeriodSeconds(_tf);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>GetPeriodSeconds()<sp/>{<sp/>return<sp/>Chart::PeriodSeconds(cparams.tf);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>number<sp/>of<sp/>minutes<sp/>in<sp/>a<sp/>period.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>PeriodMinutes(ENUM_TIMEFRAMES<sp/>_tf)<sp/>{<sp/>return<sp/>Chart::PeriodSeconds(_tf)<sp/>/<sp/>60;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetPeriodMinutes()<sp/>{<sp/>return<sp/>Chart::PeriodMinutes(cparams.tf);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>number<sp/>of<sp/>hours<sp/>in<sp/>a<sp/>period.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>double<sp/>PeriodHours(ENUM_TIMEFRAMES<sp/>_tf)<sp/>{<sp/>return<sp/>Chart::PeriodSeconds(_tf)<sp/>/<sp/>(60<sp/>*<sp/>60);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>GetPeriodHours()<sp/>{<sp/>return<sp/>Chart::PeriodHours(cparams.tf);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Setters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>chart<sp/>entry.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetEntry(ChartEntry<sp/>&amp;_entry)<sp/>{<sp/>c_entry<sp/>=<sp/>_entry;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Sets<sp/>open<sp/>time<sp/>value<sp/>for<sp/>the<sp/>last<sp/>bar<sp/>of<sp/>indicated<sp/>symbol<sp/>with<sp/>timeframe.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>SetLastBarTime()<sp/>{<sp/>last_bar_time<sp/>=<sp/>GetBarTime();<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>State<sp/>checking<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>whether<sp/>the<sp/>price<sp/>is<sp/>in<sp/>its<sp/>peak<sp/>for<sp/>the<sp/>current<sp/>period.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>IsPeak(ENUM_TIMEFRAMES<sp/>_period,<sp/>string<sp/>_symbol<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>GetAsk(_symbol)<sp/>&gt;=<sp/>Chart::iHigh(_symbol,<sp/>_period)<sp/>||<sp/>GetAsk(_symbol)<sp/>&lt;=<sp/>Chart::iLow(_symbol,<sp/>_period);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsPeak()<sp/>{<sp/>return<sp/>IsPeak(cparams.tf,<sp/>symbol);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Acknowledges<sp/>chart<sp/>that<sp/>new<sp/>tick<sp/>happened.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>OnTick()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>++tick_index;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(GetLastBarTime()<sp/>!=<sp/>GetBarTime())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bar_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>current<sp/>tick<sp/>index<sp/>(incremented<sp/>every<sp/>OnTick()).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>GetTickIndex()<sp/>{<sp/>return<sp/>tick_index<sp/>==<sp/>-1<sp/>?<sp/>0<sp/>:<sp/>tick_index;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>current<sp/>bar<sp/>index<sp/>(incremented<sp/>every<sp/>OnTick()<sp/>if<sp/>IsNewBar()<sp/>is<sp/>true).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>int<sp/>GetBarIndex()<sp/>{<sp/>return<sp/>bar_index<sp/>==<sp/>-1<sp/>?<sp/>0<sp/>:<sp/>bar_index;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Check<sp/>if<sp/>there<sp/>is<sp/>a<sp/>new<sp/>bar<sp/>to<sp/>parse.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>IsNewBar()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>static<sp/>datetime<sp/>_last_itime<sp/>=<sp/>iTime();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>_result<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(GetLastBarTime()<sp/>!=<sp/>GetBarTime())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetLastBarTime();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_result<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>_result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Chart<sp/>operations<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Redraws<sp/>the<sp/>current<sp/>chart<sp/>forcedly.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@see:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>https://docs.mql4.com/chart_operations/chartredraw</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>WindowRedraw()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQLBUILD__</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL4__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::WindowRedraw();</highlight></codeline>
<codeline><highlight class="normal">#else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::ChartRedraw(0);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">#else<sp/><sp/>//<sp/>C++</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;@todo:<sp/>%s\n&quot;,<sp/>&quot;WindowRedraw()&quot;);</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Getters<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Gets<sp/>chart<sp/>entry.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ChartEntry<sp/>GetEntry()<sp/>const<sp/>{<sp/>return<sp/>c_entry;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>list<sp/>of<sp/>modelling<sp/>quality<sp/>for<sp/>all<sp/>periods.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>string<sp/>GetModellingQuality()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>output<sp/>=<sp/>&quot;Modelling<sp/>Quality:<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>StringFormat(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;%s:<sp/>%.2f%%,<sp/>%s:<sp/>%.2f%%,<sp/>%s:<sp/>%.2f%%,<sp/>%s:<sp/>%.2f%%,<sp/>%s:<sp/>%.2f%%,<sp/>%s:<sp/>%.2f%%,<sp/>%s:<sp/>%.2f%%,<sp/>%s:<sp/>%.2f%%,<sp/>%s:<sp/>%.2f%%;&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;M1&quot;,<sp/>CalcModellingQuality(PERIOD_M1),<sp/>&quot;M5&quot;,<sp/>CalcModellingQuality(PERIOD_M5),<sp/>&quot;M15&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalcModellingQuality(PERIOD_M15),<sp/>&quot;M30&quot;,<sp/>CalcModellingQuality(PERIOD_M30),<sp/>&quot;H1&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalcModellingQuality(PERIOD_H1),<sp/>&quot;H4&quot;,<sp/>CalcModellingQuality(PERIOD_H4),<sp/>&quot;D1&quot;,<sp/>CalcModellingQuality(PERIOD_D1),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;W1&quot;,<sp/>CalcModellingQuality(PERIOD_W1),<sp/>&quot;MN1&quot;,<sp/>CalcModellingQuality(PERIOD_MN1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Conditions<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Checks<sp/>for<sp/>chart<sp/>condition.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>ENUM_CHART_CONDITION<sp/>_cond</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Chart<sp/>condition.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param<sp/>MqlParam<sp/>_args</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Trade<sp/>action<sp/>arguments.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>when<sp/>the<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_CHART_CONDITION<sp/>_cond,<sp/>MqlParam<sp/>&amp;_args[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(_cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_ASK_BAR_PEAK:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>IsPeak();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_ASK_GT_BAR_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetAsk()<sp/>&gt;<sp/>GetHigh();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_ASK_GT_BAR_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetAsk()<sp/>&gt;<sp/>GetLow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_ASK_LT_BAR_HIGH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetAsk()<sp/>&lt;<sp/>GetHigh();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_ASK_LT_BAR_LOW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetAsk()<sp/>&lt;<sp/>GetLow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_PP:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_centry.bar.ohlc.GetPivot();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_R1:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_r1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_R2:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_r2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_R3:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_r3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_R4:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_r4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_S1:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_s1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_S2:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_s2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_S3:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_s3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_GT_PP_S4:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&gt;<sp/>_s4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_PP:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_centry.bar.ohlc.GetPivot();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_R1:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_r1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_R2:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_r2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_R3:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_r3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_R4:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_r4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_S1:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_s1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_S2:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_s2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_S3:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_s3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_CLOSE_LT_PP_S4:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>Chart::GetEntry(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_centry.bar.ohlc.GetPivots(cparams.pp_type,<sp/>_pp,<sp/>_r1,<sp/>_r2,<sp/>_r3,<sp/>_r4,<sp/>_s1,<sp/>_s2,<sp/>_s3,<sp/>_s4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetClose()<sp/>&lt;<sp/>_s4;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_HIGHEST_CURR_20:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetHighest(MODE_CLOSE,<sp/>20)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_HIGHEST_CURR_50:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetHighest(MODE_CLOSE,<sp/>50)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_HIGHEST_PREV_20:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetHighest(MODE_CLOSE,<sp/>20)<sp/>==<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_HIGHEST_PREV_50:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetHighest(MODE_CLOSE,<sp/>50)<sp/>==<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_HIGH_GT_OPEN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetHigh()<sp/>&gt;<sp/>GetOpen();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_HIGH_LT_OPEN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetHigh()<sp/>&lt;<sp/>GetOpen();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_INDEX_EQ_ARG:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Current<sp/>bar&apos;s<sp/>index<sp/>equals<sp/>argument<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArraySize(_args)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetBarIndex()<sp/>==<sp/>Convert::MqlParamToInteger(_args[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetUserError(ERR_INVALID_PARAMETER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_INDEX_GT_ARG:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Current<sp/>bar&apos;s<sp/>index<sp/>greater<sp/>than<sp/>argument<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArraySize(_args)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetBarIndex()<sp/>&gt;<sp/>Convert::MqlParamToInteger(_args[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetUserError(ERR_INVALID_PARAMETER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_INDEX_LT_ARG:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Current<sp/>bar&apos;s<sp/>index<sp/>lower<sp/>than<sp/>argument<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ArraySize(_args)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetBarIndex()<sp/>&lt;<sp/>Convert::MqlParamToInteger(_args[0]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetUserError(ERR_INVALID_PARAMETER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_LOWEST_CURR_20:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetLowest(MODE_CLOSE,<sp/>20)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_LOWEST_CURR_50:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetLowest(MODE_CLOSE,<sp/>50)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_LOWEST_PREV_20:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetLowest(MODE_CLOSE,<sp/>20)<sp/>==<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_LOWEST_PREV_50:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetLowest(MODE_CLOSE,<sp/>50)<sp/>==<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_LOW_GT_OPEN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetLow()<sp/>&gt;<sp/>GetOpen();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_LOW_LT_OPEN:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>GetLow()<sp/>&lt;<sp/>GetOpen();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_NEW:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>IsNewBar();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>/*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_NEW_DAY:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_NEW_HOUR:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_NEW_MONTH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_NEW_WEEK:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>CHART_COND_BAR_NEW_YEAR:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>@todo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logger().Error(StringFormat(&quot;Invalid<sp/>market<sp/>condition:<sp/>%s!&quot;,<sp/>EnumToString(_cond),<sp/>__FUNCTION_LINE__));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>CheckCondition(ENUM_CHART_CONDITION<sp/>_cond)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MqlParam<sp/>_args[]<sp/>=<sp/>{};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Chart::CheckCondition(_cond,<sp/>_args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Printer<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>textual<sp/>representation<sp/>of<sp/>the<sp/>Chart<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>ToString(unsigned<sp/>int<sp/>_shift<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>StringFormat(&quot;%s:<sp/>%s&quot;,<sp/>TfToString(),<sp/>GetEntry(_shift).ToCSV());<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Other<sp/>methods<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Snapshots<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Save<sp/>the<sp/>current<sp/>BarOHLC<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>true<sp/>if<sp/>BarOHLC<sp/>values<sp/>has<sp/>been<sp/>saved,<sp/>otherwise<sp/>false.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>SaveChartEntry()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>@todo:<sp/>Use<sp/>MqlRates.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>_last<sp/>=<sp/>ArraySize(chart_saves);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ArrayResize(chart_saves,<sp/>_last<sp/>+<sp/>1,<sp/>100))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chart_saves[_last].bar.ohlc.time<sp/>=<sp/>Chart::iTime();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chart_saves[_last].bar.ohlc.open<sp/>=<sp/>(float)Chart::GetOpen();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chart_saves[_last].bar.ohlc.high<sp/>=<sp/>(float)Chart::GetHigh();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chart_saves[_last].bar.ohlc.low<sp/>=<sp/>(float)Chart::GetLow();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chart_saves[_last].bar.ohlc.close<sp/>=<sp/>(float)Chart::GetClose();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Load<sp/>stored<sp/>BarOHLC<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@param</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>_index<sp/>uint<sp/>Index<sp/>of<sp/>the<sp/>element<sp/>in<sp/>BarOHLC<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>@return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/><sp/><sp/>Returns<sp/>BarOHLC<sp/>struct<sp/>element.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ChartEntry<sp/>LoadChartEntry(uint<sp/>_index<sp/>=<sp/>0)<sp/>{<sp/>return<sp/>chart_saves[_index];<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Return<sp/>size<sp/>of<sp/>BarOHLC<sp/>array.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ulong<sp/>SizeChartEntry()<sp/>{<sp/>return<sp/>ArraySize(chart_saves);<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Serializers<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*<sp/>Returns<sp/>serialized<sp/>representation<sp/>of<sp/>the<sp/>object<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>SerializerNodeType<sp/>Serialize(Serializer<sp/>&amp;_s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ChartEntry<sp/>_centry<sp/>=<sp/>GetEntry();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_s.PassStruct(this,<sp/>&quot;centry&quot;,<sp/>_centry);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>SerializerNodeObject;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
    </programlisting>
    <location file="Chart.mqh"/>
  </compounddef>
</doxygen>
