<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_m_q_l4_8mqh" kind="file" language="C++">
    <compoundname>MQL4.mqh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EA31337<sp/>framework<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>2016-2021,<sp/>31337<sp/>Investments<sp/>Ltd<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://github.com/EA31337<sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>@file</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Provide<sp/>backward<sp/>compatibility<sp/>for<sp/>MQL4<sp/>in<sp/>MT5/MQL5.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Prevents<sp/>processing<sp/>this<sp/>includes<sp/>file<sp/>for<sp/>the<sp/>second<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>MQL4_MQH</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MQL4_MQH</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/>Declaration<sp/>of<sp/>constants</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Index<sp/>in<sp/>the<sp/>order<sp/>pool.</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>SELECT_BY_POS</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SELECT_BY_POS<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Some<sp/>of<sp/>standard<sp/>MQL4<sp/>constants<sp/>are<sp/>absent<sp/>in<sp/>MQL5,<sp/>therefore<sp/>they<sp/>should<sp/>be<sp/>declared<sp/>as<sp/>below.</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>show_inputs<sp/>script_show_inputs</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>extern<sp/>input</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>init<sp/>OnInit</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Point<sp/>_Point</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Digits<sp/>_Digits</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>macros<sp/>for<sp/>MQL5.</highlight></codeline>
<codeline><highlight class="normal">/*<sp/>@fixme:<sp/>Conflicts<sp/>with<sp/>SymbolInfo::Ask()<sp/>method.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Ask<sp/>SymbolInfo::GetAsk(_Symbol)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Bid<sp/>SymbolInfo::GetAsk(_Symbol)</highlight></codeline>
<codeline><highlight class="normal">//#define<sp/>Bid<sp/>(::SymbolInfoDouble(_Symbol,<sp/>::SYMBOL_BID))</highlight></codeline>
<codeline><highlight class="normal">//#define<sp/>Ask<sp/>(::SymbolInfoDouble(_Symbol,<sp/>::SYMBOL_ASK))</highlight></codeline>
<codeline><highlight class="normal">*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>macros<sp/>for<sp/>MQL5.</highlight></codeline>
<codeline><highlight class="normal">/*<sp/>@fixme:<sp/>error:<sp/>macro<sp/>too<sp/>complex</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Day(void)<sp/>DateTime::Day()</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DayOfWeek(void)<sp/>SymbolInfo::DayOfWeek()</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DayOfYear(void)<sp/>SymbolInfo::DayOfYear()</highlight></codeline>
<codeline><highlight class="normal">*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Define<sp/>boolean<sp/>values.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>True<sp/>true</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>False<sp/>false</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TRUE<sp/>true</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>FALSE<sp/>false</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">/*<sp/>@fixme:<sp/>If<sp/>this<sp/>is<sp/>defined,<sp/>cannot<sp/>call:<sp/>DateTime::TimeToStr().</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>TimeToStr</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TimeToStr(time_value,<sp/>flags)<sp/>TimeToString(time_value,<sp/>flags)</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">*/</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>DoubleToStr</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DoubleToStr<sp/>DoubleToString</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>StrToTime<sp/>StringToTime</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CurTime<sp/>TimeCurrent</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>LocalTime<sp/>TimeLocal</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Mode<sp/>constants.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_TRADES<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_HISTORY<sp/>1</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DOUBLE_VALUE<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>FLOAT_VALUE<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>LONG_VALUE<sp/>INT_VALUE</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Chart.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CHART_BAR<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>CHART_CANDLE<sp/>1</highlight></codeline>
<codeline><highlight class="normal">//---</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>MODE_ASCEND</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_ASCEND<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>MODE_DESCEND</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_DESCEND<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">//---</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_LOW<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_HIGH<sp/>2</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_OPEN<sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_CLOSE<sp/>3</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_VOLUME<sp/>4</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_REAL_VOLUME<sp/>5</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_TIME<sp/>5</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_BID<sp/>9</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_ASK<sp/>10</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_POINT<sp/>11</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_DIGITS<sp/>12</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_SPREAD<sp/>13</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_STOPLEVEL<sp/>14</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_LOTSIZE<sp/>15</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_TICKVALUE<sp/>16</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_TICKSIZE<sp/>17</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_SWAPLONG<sp/>18</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_SWAPSHORT<sp/>19</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_STARTING<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_EXPIRATION<sp/>21</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_TRADEALLOWED<sp/>22</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_TICK_SIZE<sp/>21</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_TICK_VALUE<sp/>22</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_MINLOT<sp/>23</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_LOTSTEP<sp/>24</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_MAXLOT<sp/>25</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_SWAPTYPE<sp/>26</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_PROFITCALCMODE<sp/>27</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_MARGINCALCMODE<sp/>28</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_MARGININIT<sp/>29</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_MARGINMAINTENANCE<sp/>30</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_MARGINHEDGED<sp/>31</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_MARGINREQUIRED<sp/>32</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MODE_FREEZELEVEL<sp/>33</highlight></codeline>
<codeline><highlight class="normal">//<sp/>--</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OP_BUY<sp/>ORDER_TYPE_BUY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Buy</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OP_SELL<sp/>ORDER_TYPE_SELL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Sell</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OP_BUYLIMIT<sp/>ORDER_TYPE_BUY_LIMIT<sp/><sp/><sp/>//<sp/>Pending<sp/>order<sp/>of<sp/>BUY<sp/>LIMIT<sp/>type</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OP_SELLLIMIT<sp/>ORDER_TYPE_SELL_LIMIT<sp/>//<sp/>Pending<sp/>order<sp/>of<sp/>SELL<sp/>LIMIT<sp/>type</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OP_BUYSTOP<sp/>ORDER_TYPE_BUY_STOP<sp/><sp/><sp/><sp/><sp/>//<sp/>Pending<sp/>order<sp/>of<sp/>BUY<sp/>STOP<sp/>type</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OP_SELLSTOP<sp/>ORDER_TYPE_SELL_STOP<sp/><sp/><sp/>//<sp/>Pending<sp/>order<sp/>of<sp/>SELL<sp/>STOP<sp/>type</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OP_BALANCE<sp/>6</highlight></codeline>
<codeline><highlight class="normal">//---</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EMPTY<sp/>-1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>TRADE_ACTION_CLOSE_BY</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>TRADE_ACTION_CLOSE_BY<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Return<sp/>codes<sp/>of<sp/>the<sp/>trade<sp/>server.</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_NO_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_NO_RESULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_COMMON_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_INVALID_TRADE_PARAMETERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_SERVER_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_OLD_VERSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_NO_CONNECTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_NOT_ENOUGH_RIGHTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TOO_FREQUENT_REQUESTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_MALFUNCTIONAL_TRADE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_ACCOUNT_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>64</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_INVALID_ACCOUNT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>65</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TRADE_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>128</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_INVALID_PRICE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>129</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_INVALID_STOPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>130</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_INVALID_TRADE_VOLUME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>131</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_MARKET_CLOSED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>132</highlight></codeline>
<codeline><highlight class="normal">//#define<sp/>ERR_TRADE_DISABLED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>133</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_NOT_ENOUGH_MONEY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>134</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_PRICE_CHANGED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>135</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_OFF_QUOTES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>136</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_BROKER_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>137</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_REQUOTE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>138</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_ORDER_LOCKED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>139</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_LONG_POSITIONS_ONLY_ALLOWED<sp/><sp/><sp/><sp/><sp/><sp/>140</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TOO_MANY_REQUESTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>141</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TRADE_MODIFY_DENIED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>145</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TRADE_CONTEXT_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>146</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TRADE_EXPIRATION_DENIED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>147</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TRADE_TOO_MANY_ORDERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>148</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TRADE_HEDGE_PROHIBITED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>149</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ERR_TRADE_PROHIBITED_BY_FIFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>150</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/>Includes.</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Returns<sp/>market<sp/>data<sp/>about<sp/>securities.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;Market.mqh&quot;</highlight></codeline>
<codeline><highlight class="normal">double<sp/>MarketInfo(string<sp/>_symbol,<sp/>int<sp/>_type)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>Market::MarketInfo(_symbol,<sp/>_type);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>StringGetChar<sp/>StringGetCharacter</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">//|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">//+------------------------------------------------------------------+</highlight></codeline>
<codeline><highlight class="normal">string<sp/><sp/>StringSetChar(const<sp/>string<sp/>&amp;String_Var,const<sp/>int<sp/>iPos,const<sp/>ushort<sp/>Value)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>Str=String_Var;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>::StringSetCharacter(Str,iPos,Value);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return(Str);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifdef<sp/>__MQL5__</highlight></codeline>
<codeline><highlight class="normal">#ifndef<sp/>__MT4ORDERS__</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>__MT4ORDERS__</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>RESERVE_SIZE<sp/>1000</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DAY<sp/>(24<sp/>*<sp/>3600)</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>HISTORY_PAUSE<sp/>(MT4HISTORY::IsTester<sp/>?<sp/>0<sp/>:<sp/>5)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>MT4HISTORY</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>bool<sp/>IsTester;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>Tickets[];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint<sp/>Amount;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>LastTime;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>LastTotalDeals;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>LastTotalOrders;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>datetime<sp/>LastInitTime;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>GETNEXTPOS_FUNCTION(NAME)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>int<sp/>GetNextPosMT4##NAME(<sp/>int<sp/>iPos<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>Total<sp/>=<sp/>::History##NAME##sTotal();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(iPos<sp/>&lt;<sp/>Total)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(MT4HISTORY::IsMT4##NAME(::History##NAME##GetTicket(iPos)))<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iPos++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(iPos);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GETNEXTPOS_FUNCTION(Order)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GETNEXTPOS_FUNCTION(Deal)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#undef<sp/>GETNEXTPOS_FUNCTION</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>RefreshHistory(void)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Res<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>datetime<sp/>LastTimeCurrent<sp/>=<sp/>::TimeCurrent();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((!MT4HISTORY::IsTester)<sp/>&amp;&amp;<sp/>(LastTimeCurrent<sp/>&gt;=<sp/>this.LastInitTime<sp/>+<sp/>DAY))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTime<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTotalOrders<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTotalDeals<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.Amount<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::ArrayResize(this.Tickets,<sp/>this.Amount,<sp/>RESERVE_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastInitTime<sp/>=<sp/>LastTimeCurrent;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(::HistorySelect(this.LastTime,<sp/>::MathMax(LastTimeCurrent,<sp/>this.LastTime)<sp/>+<sp/>DAY))<sp/>//<sp/>Daily<sp/>stock.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>TotalOrders<sp/>=<sp/>::HistoryOrdersTotal();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>TotalDeals<sp/>=<sp/>::HistoryDealsTotal();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>((TotalOrders<sp/>!=<sp/>this.LastTotalOrders)<sp/>||<sp/>(TotalDeals<sp/>!=<sp/>this.LastTotalDeals));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>iOrder<sp/>=<sp/>MT4HISTORY::GetNextPosMT4Order(this.LastTotalOrders);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>iDeal<sp/>=<sp/>MT4HISTORY::GetNextPosMT4Deal(this.LastTotalDeals);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>TimeOrder<sp/>=<sp/>(iOrder<sp/>&lt;<sp/>TotalOrders)<sp/>?<sp/>::HistoryOrderGetInteger(::HistoryOrderGetTicket(iOrder),<sp/>ORDER_TIME_DONE/*_MSC*/)<sp/>:<sp/>LONG_MAX;<sp/>//<sp/>ORDER_TIME_DONE_MSC<sp/>returns<sp/>zero<sp/>in<sp/>the<sp/>tester<sp/>(build<sp/>1470).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>TimeDeal<sp/>=<sp/>(iDeal<sp/>&lt;<sp/>TotalDeals)<sp/>?<sp/>::HistoryDealGetInteger(::HistoryDealGetTicket(iDeal),<sp/>DEAL_TIME/*_MSC*/)<sp/>:<sp/>LONG_MAX;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>((iDeal<sp/>&lt;<sp/>TotalDeals)<sp/>||<sp/>(iOrder<sp/>&lt;<sp/>TotalOrders))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TimeOrder<sp/>&lt;<sp/>TimeDeal)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.Amount<sp/>=<sp/>::ArrayResize(this.Tickets,<sp/>this.Amount<sp/>+<sp/>1,<sp/>RESERVE_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.Tickets[this.Amount<sp/>-<sp/>1]<sp/>=<sp/>-(long)::HistoryOrderGetTicket(iOrder);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iOrder<sp/>=<sp/>MT4HISTORY::GetNextPosMT4Order(iOrder<sp/>+<sp/>1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeOrder<sp/>=<sp/>(iOrder<sp/>&lt;<sp/>TotalOrders)<sp/>?<sp/>::HistoryOrderGetInteger(::HistoryOrderGetTicket(iOrder),<sp/>ORDER_TIME_DONE/*_MSC*/)<sp/>:<sp/>LONG_MAX;<sp/>//<sp/>ORDER_TIME_DONE_MSC<sp/>returns<sp/>zero<sp/>in<sp/>the<sp/>tester<sp/>(build<sp/>1470).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.Amount<sp/>=<sp/>::ArrayResize(this.Tickets,<sp/>this.Amount<sp/>+<sp/>1,<sp/>RESERVE_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.Tickets[this.Amount<sp/>-<sp/>1]<sp/>=<sp/>(long)::HistoryDealGetTicket(iDeal);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iDeal<sp/>=<sp/>MT4HISTORY::GetNextPosMT4Deal(iDeal<sp/>+<sp/>1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeDeal<sp/>=<sp/>(iDeal<sp/>&lt;<sp/>TotalDeals)<sp/>?<sp/>::HistoryDealGetInteger(::HistoryDealGetTicket(iDeal),<sp/>DEAL_TIME/*_MSC*/)<sp/>:<sp/>LONG_MAX;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeOrder<sp/>=<sp/>(TotalOrders<sp/>&gt;<sp/>0)<sp/>?<sp/>::HistoryOrderGetInteger(::HistoryOrderGetTicket(TotalOrders<sp/>-<sp/>1),<sp/>ORDER_TIME_DONE/*_MSC*/)<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeDeal<sp/>=<sp/>(TotalDeals<sp/>&gt;<sp/>0)<sp/>?<sp/>::HistoryDealGetInteger(::HistoryDealGetTicket(TotalDeals<sp/>-<sp/>1),<sp/>DEAL_TIME/*_MSC*/)<sp/>:<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>long<sp/>MaxTime<sp/>=<sp/>::MathMax(TimeOrder,<sp/>TimeDeal);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTotalOrders<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTotalDeals<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LastTimeCurrent<sp/>-<sp/>HISTORY_PAUSE<sp/>&gt;<sp/>MaxTime)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTime<sp/>=<sp/>LastTimeCurrent<sp/>-<sp/>HISTORY_PAUSE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTime<sp/>=<sp/>(datetime)MaxTime;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TimeOrder<sp/>==<sp/>MaxTime)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>TotalOrders<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TimeOrder<sp/>&gt;<sp/>::HistoryOrderGetInteger(::HistoryOrderGetTicket(i),<sp/>ORDER_TIME_DONE/*_MSC*/))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTotalOrders++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TimeDeal<sp/>==<sp/>MaxTime)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>TotalDeals<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TimeDeal<sp/>!=<sp/>::HistoryDealGetInteger(::HistoryDealGetTicket(TotalDeals<sp/>-<sp/>1),<sp/>DEAL_TIME/*_MSC*/))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTotalDeals++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(LastTimeCurrent<sp/>-<sp/>HISTORY_PAUSE<sp/>&gt;<sp/>this.LastTime)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTime<sp/>=<sp/>LastTimeCurrent<sp/>-<sp/>HISTORY_PAUSE;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTotalOrders<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.LastTotalDeals<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>IsMT4Deal(<sp/>const<sp/>ulong<sp/>Ticket<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ENUM_DEAL_TYPE<sp/>Type<sp/>=<sp/>(ENUM_DEAL_TYPE)::HistoryDealGetInteger(Ticket,<sp/>DEAL_TYPE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(((Type<sp/>!=<sp/>DEAL_TYPE_BUY)<sp/>&amp;&amp;<sp/>(Type<sp/>!=<sp/>DEAL_TYPE_SELL))<sp/>||<sp/>((ENUM_DEAL_ENTRY)::HistoryDealGetInteger(Ticket,<sp/>DEAL_ENTRY)<sp/>==<sp/>DEAL_ENTRY_OUT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>IsMT4Order(<sp/>const<sp/>ulong<sp/>Ticket<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return((::HistoryOrderGetDouble(Ticket,<sp/>ORDER_VOLUME_CURRENT)<sp/>&gt;<sp/>0)<sp/>||<sp/>(::HistoryOrderGetInteger(Ticket,<sp/>ORDER_POSITION_ID)<sp/>==<sp/>0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MT4HISTORY(void)<sp/>:<sp/>Amount(0),<sp/>LastTime(0),<sp/>LastTotalDeals(0),<sp/>LastTotalOrders(0),<sp/>LastInitTime(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::ArrayResize(this.Tickets,<sp/>this.Amount,<sp/>RESERVE_SIZE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this.RefreshHistory();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>GetAmount(void)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.RefreshHistory();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return((int)this.Amount);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>long<sp/>operator<sp/>[](<sp/>const<sp/>uint<sp/>Pos<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>long<sp/>Res<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Pos<sp/>&gt;=<sp/>this.Amount)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.RefreshHistory();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Pos<sp/>&lt;<sp/>this.Amount)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>this.Tickets[Pos];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>this.Tickets[Pos];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>bool<sp/>MT4HISTORY::IsTester<sp/>=<sp/>(::MQLInfoInteger(MQL_TESTER)<sp/>||<sp/>::MQLInfoInteger(MQL_OPTIMIZATION)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::MQLInfoInteger(MQL_VISUAL_MODE)<sp/>||<sp/>::MQLInfoInteger(MQL_FRAME_MODE));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#undef<sp/>HISTORY_PAUSE</highlight></codeline>
<codeline><highlight class="normal">#undef<sp/>DAY</highlight></codeline>
<codeline><highlight class="normal">#undef<sp/>RESERVE_SIZE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">struct<sp/>MT4_ORDER</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>Ticket;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>Type;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>Lots;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>Symbol;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>Comment;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>OpenPrice;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>datetime<sp/>OpenTime;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>StopLoss;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>TakeProfit;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>ClosePrice;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>datetime<sp/>CloseTime;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>datetime<sp/>Expiration;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>MagicNumber;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>Profit;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>Commission;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>Swap;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>string<sp/>ToString(void)<sp/>const</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>string<sp/>Types[]<sp/>=<sp/>{&quot;buy&quot;,<sp/>&quot;sell&quot;,<sp/>&quot;buy<sp/>limit&quot;,<sp/>&quot;sell<sp/>limit&quot;,<sp/>&quot;buy<sp/>stop&quot;,<sp/>&quot;sell<sp/>stop&quot;,<sp/>&quot;balance&quot;};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>int<sp/>digits<sp/>=<sp/>(int)::SymbolInfoInteger(this.Symbol,<sp/>SYMBOL_DIGITS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return(&quot;#&quot;<sp/>+<sp/>(string)this.Ticket<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(string)this.OpenTime<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((this.Type<sp/>&lt;<sp/>::ArraySize(Types))<sp/>?<sp/>Types[this.Type]<sp/>:<sp/>&quot;unknown&quot;)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::DoubleToString(this.Lots,<sp/>2)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.Symbol<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::DoubleToString(this.OpenPrice,<sp/>digits)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::DoubleToString(this.StopLoss,<sp/>digits)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::DoubleToString(this.TakeProfit,<sp/>digits)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((this.CloseTime<sp/>&gt;<sp/>0)<sp/>?<sp/>((string)this.CloseTime<sp/>+<sp/>&quot;<sp/>&quot;)<sp/>:<sp/>&quot;&quot;)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::DoubleToString(this.ClosePrice,<sp/>digits)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::DoubleToString(this.Commission,<sp/>2)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::DoubleToString(this.Swap,<sp/>2)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::DoubleToString(this.Profit,<sp/>2)<sp/>+<sp/>&quot;<sp/>&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((this.Comment<sp/>==<sp/>&quot;&quot;)<sp/>?<sp/>&quot;&quot;<sp/>:<sp/>(this.Comment<sp/>+<sp/>&quot;<sp/>&quot;))<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(string)this.MagicNumber<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((this.Expiration<sp/>&gt;<sp/>0)<sp/>?<sp/>(&quot;<sp/>expiration<sp/>&quot;<sp/>+<sp/>(string)this.Expiration):<sp/>&quot;&quot;)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MT4ORDERS<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>MT4_ORDER<sp/>Order;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>MT4HISTORY<sp/>History;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>bool<sp/>IsTester;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>ulong<sp/>GetPositionDealIn(<sp/>const<sp/>ulong<sp/>PositionIdentifier<sp/>=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ulong<sp/>Ticket<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((PositionIdentifier<sp/>==<sp/>0)<sp/>?<sp/>::HistorySelectByPosition(::PositionGetInteger(POSITION_IDENTIFIER))<sp/>:<sp/>::HistorySelectByPosition(PositionIdentifier))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>Total<sp/>=<sp/>::HistoryDealsTotal();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Total;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ulong<sp/>TicketDeal<sp/>=<sp/>::HistoryDealGetTicket(i);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(TicketDeal<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((ENUM_DEAL_ENTRY)::HistoryDealGetInteger(TicketDeal,<sp/>DEAL_ENTRY)<sp/>==<sp/>DEAL_ENTRY_IN)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ticket<sp/>=<sp/>TicketDeal;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Ticket);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>double<sp/>GetPositionCommission(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>Commission<sp/>=<sp/>::PositionGetDouble(POSITION_COMMISSION);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Commission<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ulong<sp/>Ticket<sp/>=<sp/>MT4ORDERS::GetPositionDealIn();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Ticket<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>LotsIn<sp/>=<sp/>::HistoryDealGetDouble(Ticket,<sp/>DEAL_VOLUME);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(LotsIn<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Commission<sp/>=<sp/>::HistoryDealGetDouble(Ticket,<sp/>DEAL_COMMISSION)<sp/>*<sp/>::PositionGetDouble(POSITION_VOLUME)<sp/>/<sp/>LotsIn;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Commission);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>string<sp/>GetPositionComment(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>comment<sp/>=<sp/>::PositionGetString(POSITION_COMMENT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(comment<sp/>==<sp/>&quot;&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ulong<sp/>Ticket<sp/>=<sp/>MT4ORDERS::GetPositionDealIn();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Ticket<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comment<sp/>=<sp/>::HistoryDealGetString(Ticket,<sp/>DEAL_COMMENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(comment);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>GetPositionData(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Ticket<sp/>=<sp/>(int)::PositionGetInteger(POSITION_TICKET);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Type<sp/>=<sp/>(int)::PositionGetInteger(POSITION_TYPE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Lots<sp/>=<sp/>::PositionGetDouble(POSITION_VOLUME);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Symbol<sp/>=<sp/>::PositionGetString(POSITION_SYMBOL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Comment<sp/>=<sp/>MT4ORDERS::GetPositionComment();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenPrice<sp/>=<sp/>::PositionGetDouble(POSITION_PRICE_OPEN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenTime<sp/>=<sp/>(datetime)::PositionGetInteger(POSITION_TIME);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.StopLoss<sp/>=<sp/>::PositionGetDouble(POSITION_SL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.TakeProfit<sp/>=<sp/>::PositionGetDouble(POSITION_TP);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.ClosePrice<sp/>=<sp/>::PositionGetDouble(POSITION_PRICE_CURRENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.CloseTime<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Expiration<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.MagicNumber<sp/>=<sp/>(int)::PositionGetInteger(POSITION_MAGIC);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Profit<sp/>=<sp/>::PositionGetDouble(POSITION_PROFIT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Commission<sp/>=<sp/>MT4ORDERS::GetPositionCommission();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Swap<sp/>=<sp/>::PositionGetDouble(POSITION_SWAP);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>GetOrderData(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Ticket<sp/>=<sp/>(int)::OrderGetInteger(ORDER_TICKET);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Type<sp/>=<sp/>(int)::OrderGetInteger(ORDER_TYPE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Lots<sp/>=<sp/>::OrderGetDouble(ORDER_VOLUME_CURRENT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Symbol<sp/>=<sp/>::OrderGetString(ORDER_SYMBOL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Comment<sp/>=<sp/>::OrderGetString(ORDER_COMMENT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenPrice<sp/>=<sp/>::OrderGetDouble(ORDER_PRICE_OPEN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenTime<sp/>=<sp/>(datetime)::OrderGetInteger(ORDER_TIME_SETUP);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.StopLoss<sp/>=<sp/>::OrderGetDouble(ORDER_SL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.TakeProfit<sp/>=<sp/>::OrderGetDouble(ORDER_TP);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.ClosePrice<sp/>=<sp/>::OrderGetDouble(ORDER_PRICE_CURRENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.CloseTime<sp/>=<sp/>(datetime)::OrderGetInteger(ORDER_TIME_DONE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Expiration<sp/>=<sp/>(datetime)::OrderGetInteger(ORDER_TIME_EXPIRATION);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.MagicNumber<sp/>=<sp/>(int)::OrderGetInteger(ORDER_MAGIC);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Profit<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Commission<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Swap<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>GetHistoryOrderData(<sp/>const<sp/>ulong<sp/>Ticket<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Ticket<sp/>=<sp/>(int)::HistoryOrderGetInteger(Ticket,<sp/>ORDER_TICKET);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Type<sp/>=<sp/>(int)::HistoryOrderGetInteger(Ticket,<sp/>ORDER_TYPE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Lots<sp/>=<sp/>::HistoryOrderGetDouble(Ticket,<sp/>ORDER_VOLUME_CURRENT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(MT4ORDERS::Order.Lots<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Lots<sp/>=<sp/>::HistoryOrderGetDouble(Ticket,<sp/>ORDER_VOLUME_INITIAL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Symbol<sp/>=<sp/>::HistoryOrderGetString(Ticket,<sp/>ORDER_SYMBOL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Comment<sp/>=<sp/>::HistoryOrderGetString(Ticket,<sp/>ORDER_COMMENT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenPrice<sp/>=<sp/>::HistoryOrderGetDouble(Ticket,<sp/>ORDER_PRICE_OPEN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenTime<sp/>=<sp/>(datetime)::HistoryOrderGetInteger(Ticket,<sp/>ORDER_TIME_SETUP);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.StopLoss<sp/>=<sp/>::HistoryOrderGetDouble(Ticket,<sp/>ORDER_SL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.TakeProfit<sp/>=<sp/>::HistoryOrderGetDouble(Ticket,<sp/>ORDER_TP);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.ClosePrice<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.CloseTime<sp/>=<sp/>(datetime)::HistoryOrderGetInteger(Ticket,<sp/>ORDER_TIME_DONE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Expiration<sp/>=<sp/>(datetime)::HistoryOrderGetInteger(Ticket,<sp/>ORDER_TIME_EXPIRATION);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.MagicNumber<sp/>=<sp/>(int)::HistoryOrderGetInteger(Ticket,<sp/>ORDER_MAGIC);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Profit<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Commission<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Swap<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>GetHistoryPositionData(<sp/>const<sp/>ulong<sp/>Ticket<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Ticket<sp/>=<sp/>(int)::HistoryDealGetInteger(Ticket,<sp/>DEAL_TICKET);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Type<sp/>=<sp/>(int)::HistoryDealGetInteger(Ticket,<sp/>DEAL_TYPE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((MT4ORDERS::Order.Type<sp/>&gt;<sp/>OP_SELL))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Type<sp/>+=<sp/>(OP_BALANCE<sp/>-<sp/>OP_SELL<sp/>-<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Type<sp/>=<sp/>1<sp/>-<sp/>MT4ORDERS::Order.Type;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Lots<sp/>=<sp/>::HistoryDealGetDouble(Ticket,<sp/>DEAL_VOLUME);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Symbol<sp/>=<sp/>::HistoryDealGetString(Ticket,<sp/>DEAL_SYMBOL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Comment<sp/>=<sp/>::HistoryDealGetString(Ticket,<sp/>DEAL_COMMENT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenPrice<sp/>=<sp/>::HistoryDealGetDouble(Ticket,<sp/>DEAL_PRICE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenTime<sp/>=<sp/>(datetime)::HistoryDealGetInteger(Ticket,<sp/>DEAL_TIME);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.StopLoss<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.TakeProfit<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.ClosePrice<sp/>=<sp/>::HistoryDealGetDouble(Ticket,<sp/>DEAL_PRICE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.CloseTime<sp/>=<sp/>(datetime)::HistoryDealGetInteger(Ticket,<sp/>DEAL_TIME);;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Expiration<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.MagicNumber<sp/>=<sp/>(int)::HistoryDealGetInteger(Ticket,<sp/>DEAL_MAGIC);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Profit<sp/>=<sp/>::HistoryDealGetDouble(Ticket,<sp/>DEAL_PROFIT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Commission<sp/>=<sp/>::HistoryDealGetDouble(Ticket,<sp/>DEAL_COMMISSION);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Swap<sp/>=<sp/>::HistoryDealGetDouble(Ticket,<sp/>DEAL_SWAP);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ulong<sp/>OpenTicket<sp/>=<sp/>MT4ORDERS::GetPositionDealIn(::HistoryDealGetInteger(Ticket,<sp/>DEAL_POSITION_ID));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(OpenTicket<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenPrice<sp/>=<sp/>::HistoryDealGetDouble(OpenTicket,<sp/>DEAL_PRICE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.OpenTime<sp/>=<sp/>(datetime)::HistoryDealGetInteger(OpenTicket,<sp/>DEAL_TIME);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>OpenLots<sp/>=<sp/>::HistoryDealGetDouble(OpenTicket,<sp/>DEAL_VOLUME);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(OpenLots<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Commission<sp/>+=<sp/>::HistoryDealGetDouble(OpenTicket,<sp/>DEAL_COMMISSION)<sp/>*<sp/>MT4ORDERS::Order.Lots<sp/>/<sp/>OpenLots;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(MT4ORDERS::Order.MagicNumber<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.MagicNumber<sp/>=<sp/>(int)::HistoryDealGetInteger(OpenTicket,<sp/>DEAL_MAGIC);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(MT4ORDERS::Order.Comment<sp/>==<sp/>&quot;&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Order.Comment<sp/>=<sp/>::HistoryDealGetString(OpenTicket,<sp/>DEAL_COMMENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>Waiting(<sp/>const<sp/>bool<sp/>FlagInit<sp/>=<sp/>false<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>ulong<sp/>StartTime<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(FlagInit)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartTime<sp/>=<sp/>::GetMicrosecondCount();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>Res<sp/>=<sp/>(::GetMicrosecondCount()<sp/>-<sp/>StartTime<sp/>&lt;<sp/>MT4ORDERS::OrderSend_MaxPause);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Sleep(0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>EqualPrices(<sp/>const<sp/>double<sp/>Price1,<sp/>const<sp/>double<sp/>Price2,<sp/>const<sp/>int<sp/>digits)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(::NormalizeDouble(Price1<sp/>-<sp/>Price2,<sp/>digits)<sp/>==<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#define<sp/>WHILE(A)<sp/>while<sp/>(!(Res<sp/>=<sp/>(A))<sp/>&amp;&amp;<sp/>MT4ORDERS::Waiting())</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>OrderSend(<sp/>const<sp/>MqlTradeRequest<sp/>&amp;Request,<sp/>MqlTradeResult<sp/>&amp;Result<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Res<sp/>=<sp/>::OrderSend(Request,<sp/>Result);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res<sp/>&amp;&amp;<sp/>!MT4ORDERS::IsTester<sp/>&amp;&amp;<sp/>(Result.retcode<sp/>&lt;<sp/>TRADE_RETCODE_ERROR)<sp/>&amp;&amp;<sp/>(MT4ORDERS::OrderSend_MaxPause<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>(Result.retcode<sp/>==<sp/>TRADE_RETCODE_DONE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::Waiting(true);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Request.action<sp/>==<sp/>TRADE_ACTION_DEAL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WHILE(::HistoryOrderSelect(Result.order))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>Res<sp/>&amp;&amp;<sp/>(((ENUM_ORDER_STATE)::HistoryOrderGetInteger(Result.order,<sp/>ORDER_STATE)<sp/>==<sp/>ORDER_STATE_FILLED)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ENUM_ORDER_STATE)::HistoryOrderGetInteger(Result.order,<sp/>ORDER_STATE)<sp/>==<sp/>ORDER_STATE_PARTIAL));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WHILE(::HistoryDealSelect(Result.deal))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Request.action<sp/>==<sp/>TRADE_ACTION_PENDING)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WHILE(::OrderSelect(Result.order))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WHILE(::HistoryOrderSelect(Result.order))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Request.action<sp/>==<sp/>TRADE_ACTION_SLTP)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>EqualSL<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>EqualTP<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>digits<sp/>=<sp/>(int)::SymbolInfoInteger(Request.symbol,<sp/>SYMBOL_DIGITS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((Request.position<sp/>==<sp/>0)<sp/>?<sp/>::PositionSelect(Request.symbol)<sp/>:<sp/>::PositionSelectByTicket(Request.position))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualSL<sp/>=<sp/>MT4ORDERS::EqualPrices(::PositionGetDouble(POSITION_SL),<sp/>Request.sl,<sp/>digits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualTP<sp/>=<sp/>MT4ORDERS::EqualPrices(::PositionGetDouble(POSITION_TP),<sp/>Request.tp,<sp/>digits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WHILE((EqualSL<sp/>&amp;&amp;<sp/>EqualTP))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((Request.position<sp/>==<sp/>0)<sp/>?<sp/>::PositionSelect(Request.symbol)<sp/>:<sp/>::PositionSelectByTicket(Request.position))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualSL<sp/>=<sp/>MT4ORDERS::EqualPrices(::PositionGetDouble(POSITION_SL),<sp/>Request.sl,<sp/>digits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualTP<sp/>=<sp/>MT4ORDERS::EqualPrices(::PositionGetDouble(POSITION_TP),<sp/>Request.tp,<sp/>digits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Request.action<sp/>==<sp/>TRADE_ACTION_MODIFY)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>EqualSL<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>EqualTP<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>digits<sp/>=<sp/>(int)::SymbolInfoInteger(Request.symbol,<sp/>SYMBOL_DIGITS);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(::OrderSelect(Result.order))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualSL<sp/>=<sp/>MT4ORDERS::EqualPrices(::OrderGetDouble(ORDER_SL),<sp/>Request.sl,<sp/>digits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualTP<sp/>=<sp/>MT4ORDERS::EqualPrices(::OrderGetDouble(ORDER_TP),<sp/>Request.tp,<sp/>digits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WHILE((EqualSL<sp/>&amp;&amp;<sp/>EqualTP))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(::OrderSelect(Result.order))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualSL<sp/>=<sp/>MT4ORDERS::EqualPrices(::OrderGetDouble(ORDER_SL),<sp/>Request.sl,<sp/>digits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualTP<sp/>=<sp/>MT4ORDERS::EqualPrices(::OrderGetDouble(ORDER_TP),<sp/>Request.tp,<sp/>digits);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(Request.action<sp/>==<sp/>TRADE_ACTION_REMOVE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WHILE(::HistoryOrderSelect(Result.order))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#undef<sp/>WHILE</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>NewOrderSend(<sp/>const<sp/>MqlTradeRequest<sp/>&amp;Request<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MqlTradeResult<sp/>Result;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(MT4ORDERS::OrderSend(Request,<sp/>Result)<sp/>?<sp/>Result.retcode<sp/>&lt;<sp/>TRADE_RETCODE_ERROR<sp/>:<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>ModifyPosition(<sp/>const<sp/>ulong<sp/>Ticket,<sp/>MqlTradeRequest<sp/>&amp;Request<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>Res<sp/>=<sp/>::PositionSelectByTicket(Ticket);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.action<sp/>=<sp/>TRADE_ACTION_SLTP;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.position<sp/>=<sp/>Ticket;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.symbol<sp/>=<sp/>::PositionGetString(POSITION_SYMBOL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>ENUM_ORDER_TYPE_FILLING<sp/>GetFilling(<sp/>const<sp/>string<sp/>Symb,<sp/>const<sp/>uint<sp/>Type<sp/>=<sp/>ORDER_FILLING_FOK<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>ENUM_SYMBOL_TRADE_EXECUTION<sp/>ExeMode<sp/>=<sp/>(ENUM_SYMBOL_TRADE_EXECUTION)::SymbolInfoInteger(Symb,<sp/>SYMBOL_TRADE_EXEMODE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>FillingMode<sp/>=<sp/>(int)::SymbolInfoInteger(Symb,<sp/>SYMBOL_FILLING_MODE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return((FillingMode<sp/>==<sp/>0<sp/>||<sp/>(Type<sp/>&gt;=<sp/>ORDER_FILLING_RETURN)<sp/>||<sp/>((FillingMode<sp/>&amp;<sp/>(Type<sp/>+<sp/>1))<sp/>!=<sp/>Type<sp/>+<sp/>1))<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((ExeMode<sp/>==<sp/>SYMBOL_TRADE_EXECUTION_EXCHANGE)<sp/>||<sp/>(ExeMode<sp/>==<sp/>SYMBOL_TRADE_EXECUTION_INSTANT))<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ORDER_FILLING_RETURN<sp/>:<sp/>((FillingMode<sp/>==<sp/>SYMBOL_FILLING_IOC)<sp/>?<sp/>ORDER_FILLING_IOC<sp/>:<sp/>ORDER_FILLING_FOK))<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ENUM_ORDER_TYPE_FILLING)Type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>ModifyOrder(<sp/>const<sp/>ulong<sp/>_ticket,<sp/>const<sp/>double<sp/>_price,<sp/>const<sp/>datetime<sp/>_expiration,<sp/>MqlTradeRequest<sp/>&amp;Request<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>_res<sp/>=<sp/>::OrderSelect(_ticket);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.action<sp/>=<sp/>TRADE_ACTION_MODIFY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.order<sp/>=<sp/>_ticket;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.price<sp/>=<sp/>_price;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.symbol<sp/>=<sp/>::OrderGetString(ORDER_SYMBOL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.type_filling<sp/>=<sp/>MT4ORDERS::GetFilling(Request.symbol);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_expiration<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.type_time<sp/>=<sp/>ORDER_TIME_SPECIFIED;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.expiration<sp/>=<sp/>_expiration;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(_res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>SelectByPosHistory(<sp/>const<sp/>int<sp/>Index<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>Ticket<sp/>=<sp/>(int)MT4ORDERS::History[Index];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>Res<sp/>=<sp/>(Ticket<sp/>&gt;<sp/>0)<sp/>?<sp/>::HistoryDealSelect(Ticket)<sp/>:<sp/>((Ticket<sp/>&lt;<sp/>0)<sp/>?<sp/>::HistoryOrderSelect(-Ticket)<sp/>:<sp/>false);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Ticket<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::GetHistoryPositionData(Ticket);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::GetHistoryOrderData(-Ticket);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>position<sp/>has<sp/>higher<sp/>priority</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>SelectByPos(<sp/>const<sp/>int<sp/>Index<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int<sp/>Total<sp/>=<sp/>::PositionsTotal();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>Flag<sp/>=<sp/>(Index<sp/>&lt;<sp/>Total);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>bool<sp/>Res<sp/>=<sp/>(Flag)<sp/>?<sp/>::PositionSelectByTicket(::PositionGetTicket(Index))<sp/>:<sp/>::OrderSelect(::OrderGetTicket(Index<sp/>-<sp/>Total));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Flag)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::GetPositionData();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::GetOrderData();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>SelectByHistoryTicket(<sp/>const<sp/>int<sp/>Ticket<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Res<sp/>=<sp/>::HistoryDealSelect(Ticket)<sp/>?<sp/>MT4HISTORY::IsMT4Deal(Ticket)<sp/>:<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::GetHistoryPositionData(Ticket);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>::HistoryOrderSelect(Ticket)<sp/>?<sp/>MT4HISTORY::IsMT4Order(Ticket)<sp/>:<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::GetHistoryOrderData(Ticket);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>SelectByExistingTicket(<sp/>const<sp/>int<sp/>Ticket<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Res<sp/>=<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(::PositionSelectByTicket(Ticket))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::GetPositionData();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(::OrderSelect(Ticket))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::GetOrderData();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>One<sp/>Ticket<sp/>priority:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>MODE_TRADES:<sp/><sp/>exist<sp/>position<sp/>&gt;<sp/>exist<sp/>order<sp/>&gt;<sp/>deal<sp/>&gt;<sp/>canceled<sp/>order</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>MODE_HISTORY:<sp/>deal<sp/>&gt;<sp/>canceled<sp/>order<sp/>&gt;<sp/>exist<sp/>position<sp/>&gt;<sp/>exist<sp/>order</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>SelectByTicket(<sp/>const<sp/>int<sp/>Ticket,<sp/>const<sp/>int<sp/>Pool<sp/>=<sp/>MODE_TRADES<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return((Pool<sp/>==<sp/>MODE_TRADES)<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MT4ORDERS::SelectByExistingTicket(Ticket)<sp/>?<sp/>true<sp/>:<sp/>MT4ORDERS::SelectByHistoryTicket(Ticket))<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MT4ORDERS::SelectByHistoryTicket(Ticket)<sp/>?<sp/>true<sp/>:<sp/>MT4ORDERS::SelectByExistingTicket(Ticket)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>uint<sp/>OrderSend_MaxPause;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>MT4OrderSelect(<sp/>const<sp/>int<sp/>Index,<sp/>const<sp/>int<sp/>Select,<sp/>const<sp/>int<sp/>Pool<sp/>=<sp/>MODE_TRADES<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return((Select<sp/>==<sp/>SELECT_BY_POS)<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Pool<sp/>==<sp/>MODE_TRADES)<sp/>?<sp/>MT4ORDERS::SelectByPos(Index)<sp/>:<sp/>MT4ORDERS::SelectByPosHistory(Index))<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MT4ORDERS::SelectByTicket(Index,<sp/>Pool));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>MT5<sp/>OrderSelect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>MT4OrderSelect(<sp/>const<sp/>ulong<sp/>Ticket<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(::OrderSelect(Ticket));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>int<sp/>MT4OrdersTotal(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(::OrdersTotal()<sp/>+<sp/>::PositionsTotal());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>MT5<sp/>OrdersTotal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>int<sp/>MT4OrdersTotal(<sp/>const<sp/>bool<sp/>MT5<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(::OrdersTotal());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>int<sp/>MT4OrdersHistoryTotal(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(MT4ORDERS::History.GetAmount());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>int<sp/>MT4OrderSend(<sp/>const<sp/>string<sp/>Symb,<sp/>const<sp/>int<sp/>Type,<sp/>const<sp/>double<sp/>dVolume,<sp/>const<sp/>double<sp/>_price,<sp/>const<sp/>int<sp/>SlipPage,<sp/>const<sp/>double<sp/>SL,<sp/>const<sp/>double<sp/>TP,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>string<sp/>comment<sp/>=<sp/>NULL,<sp/>const<sp/>int<sp/>magic<sp/>=<sp/>0,<sp/>const<sp/>datetime<sp/>dExpiration<sp/>=<sp/>0,<sp/>color<sp/>arrow_color<sp/>=<sp/>clrNONE<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MqlTradeRequest<sp/>Request<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.action<sp/>=<sp/>(((Type<sp/>==<sp/>OP_BUY)<sp/>||<sp/>(Type<sp/>==<sp/>OP_SELL))<sp/>?<sp/>TRADE_ACTION_DEAL<sp/>:<sp/>TRADE_ACTION_PENDING);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.magic<sp/>=<sp/>magic;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.symbol<sp/>=<sp/>((Symb<sp/>==<sp/>NULL)<sp/>?<sp/>::Symbol()<sp/>:<sp/>Symb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.volume<sp/>=<sp/>dVolume;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.price<sp/>=<sp/>_price;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.tp<sp/>=<sp/>TP;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.sl<sp/>=<sp/>SL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.deviation<sp/>=<sp/>SlipPage;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.type<sp/>=<sp/>(ENUM_ORDER_TYPE)Type;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.type_filling<sp/>=<sp/>MT4ORDERS::GetFilling(Request.symbol,<sp/>(uint)Request.deviation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dExpiration<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.type_time<sp/>=<sp/>ORDER_TIME_SPECIFIED;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.expiration<sp/>=<sp/>dExpiration;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Request.comment<sp/>=<sp/>comment;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MqlTradeResult<sp/>Result;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(MT4ORDERS::OrderSend(Request,<sp/>Result)<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Request.action<sp/>==<sp/>TRADE_ACTION_DEAL)<sp/>?<sp/>(::HistoryDealSelect(Result.deal)<sp/>?<sp/>(int)::HistoryDealGetInteger(Result.deal,<sp/>DEAL_POSITION_ID)<sp/>:<sp/>-1)<sp/>:<sp/>(int)Result.order)<sp/>:<sp/>-1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>MT4OrderModify(<sp/>const<sp/>ulong<sp/>Ticket,<sp/>const<sp/>double<sp/>_price,<sp/>const<sp/>double<sp/>SL,<sp/>const<sp/>double<sp/>TP,<sp/>const<sp/>datetime<sp/>Expiration,<sp/>const<sp/>color<sp/>Arrow_Color<sp/>=<sp/>clrNONE<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MqlTradeRequest<sp/>Request<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>considered<sp/>case<sp/>if<sp/>order<sp/>and<sp/>position<sp/>has<sp/>the<sp/>same<sp/>ticket</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Res<sp/>=<sp/>((Ticket<sp/>!=<sp/>MT4ORDERS::Order.Ticket)<sp/>||<sp/>(MT4ORDERS::Order.Ticket<sp/>&lt;=<sp/>OP_SELL))<sp/>?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MT4ORDERS::ModifyPosition(Ticket,<sp/>Request)<sp/>?<sp/>true<sp/>:<sp/>MT4ORDERS::ModifyOrder(Ticket,<sp/>_price,<sp/>Expiration,<sp/>Request))<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MT4ORDERS::ModifyOrder(Ticket,<sp/>_price,<sp/>Expiration,<sp/>Request)<sp/>?<sp/>true<sp/>:<sp/>MT4ORDERS::ModifyPosition(Ticket,<sp/>Request));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.tp<sp/>=<sp/>TP;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.sl<sp/>=<sp/>SL;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>MT4ORDERS::NewOrderSend(Request);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>MT4OrderClose(<sp/>const<sp/>ulong<sp/>Ticket,<sp/>const<sp/>double<sp/>dLots,<sp/>const<sp/>double<sp/>_price,<sp/>const<sp/>int<sp/>SlipPage,<sp/>const<sp/>color<sp/>Arrow_Color<sp/>=<sp/>clrNONE<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Res<sp/>=<sp/>::PositionSelectByTicket(Ticket);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MqlTradeRequest<sp/>Request<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.action<sp/>=<sp/>TRADE_ACTION_DEAL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.position<sp/>=<sp/>Ticket;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.symbol<sp/>=<sp/>::PositionGetString(POSITION_SYMBOL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.volume<sp/>=<sp/>dLots;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.price<sp/>=<sp/>_price;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.deviation<sp/>=<sp/>SlipPage;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.type<sp/>=<sp/>(ENUM_ORDER_TYPE)(1<sp/>-<sp/>::PositionGetInteger(POSITION_TYPE));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.type_filling<sp/>=<sp/>MT4ORDERS::GetFilling(Request.symbol,<sp/>(uint)Request.deviation);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>MT4ORDERS::NewOrderSend(Request);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>MT4OrderCloseBy(const<sp/>ulong<sp/>Ticket,<sp/>const<sp/>int<sp/>Opposite,<sp/>const<sp/>color<sp/>Arrow_color)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Res<sp/>=<sp/>::PositionSelectByTicket(Ticket);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>_symbol<sp/>=<sp/>::PositionGetString(POSITION_SYMBOL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_POSITION_TYPE<sp/>type<sp/>=<sp/>(ENUM_POSITION_TYPE)::PositionGetInteger(POSITION_TYPE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(!PositionSelectByTicket(Opposite))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return(false);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>symbol_by<sp/>=<sp/>::PositionGetString(POSITION_SYMBOL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ENUM_POSITION_TYPE<sp/>type_by<sp/>=<sp/>(ENUM_POSITION_TYPE)::PositionGetInteger(POSITION_TYPE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(type==type_by)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_symbol!=symbol_by)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return(false);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MqlTradeRequest<sp/>Request<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.action<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TRADE_ACTION_CLOSE_BY;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.position<sp/><sp/><sp/><sp/>=<sp/>Ticket;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.position_by<sp/>=<sp/>Opposite;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>MT4ORDERS::NewOrderSend(Request);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>MT4OrderDelete(<sp/>const<sp/>ulong<sp/>Ticket,<sp/>const<sp/>color<sp/>Arrow_Color<sp/>=<sp/>clrNONE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>Res<sp/>=<sp/>::OrderSelect(Ticket);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Res)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MqlTradeRequest<sp/>Request<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.action<sp/>=<sp/>TRADE_ACTION_REMOVE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Request.order<sp/>=<sp/>Ticket;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Res<sp/>=<sp/>MT4ORDERS::NewOrderSend(Request);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return(Res);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>MT4_ORDER<sp/>MT4ORDERS::Order<sp/>=<sp/>{0};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>MT4HISTORY<sp/>MT4ORDERS::History;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>bool<sp/>MT4ORDERS::IsTester<sp/>=<sp/>(::MQLInfoInteger(MQL_TESTER)<sp/>||<sp/>::MQLInfoInteger(MQL_OPTIMIZATION)<sp/>||</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>::MQLInfoInteger(MQL_VISUAL_MODE)<sp/>||<sp/>::MQLInfoInteger(MQL_FRAME_MODE));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>uint<sp/>MT4ORDERS::OrderSend_MaxPause<sp/>=<sp/>1000000;<sp/>//<sp/>Maximum<sp/>time<sp/>synchronization<sp/>in<sp/>microseconds.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>OrderClose(<sp/>const<sp/>ulong<sp/>Ticket,<sp/>const<sp/>double<sp/>dLots,<sp/>const<sp/>double<sp/>_price,<sp/>const<sp/>int<sp/>SlipPage,<sp/>const<sp/>color<sp/>Arrow_Color<sp/>=<sp/>clrNONE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return(MT4ORDERS::MT4OrderClose(Ticket,<sp/>dLots,<sp/>_price,<sp/>SlipPage,<sp/>Arrow_Color));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>OrderModify(<sp/>const<sp/>ulong<sp/>Ticket,<sp/>const<sp/>double<sp/>_price,<sp/>const<sp/>double<sp/>SL,<sp/>const<sp/>double<sp/>TP,<sp/>const<sp/>datetime<sp/>Expiration,<sp/>const<sp/>color<sp/>Arrow_Color<sp/>=<sp/>clrNONE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return(MT4ORDERS::MT4OrderModify(Ticket,<sp/>_price,<sp/>SL,<sp/>TP,<sp/>Expiration,<sp/>Arrow_Color));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>OrderDelete(<sp/>const<sp/>ulong<sp/>Ticket,<sp/>const<sp/>color<sp/>Arrow_Color<sp/>=<sp/>clrNONE<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return(MT4ORDERS::MT4OrderDelete(Ticket,<sp/>Arrow_Color));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>OrderCloseBy(const<sp/>ulong<sp/>Ticket,<sp/>const<sp/>int<sp/>Opposite,<sp/>const<sp/>color<sp/>Arrow_color)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(MT4ORDERS::MT4OrderCloseBy(Ticket,<sp/>Opposite,<sp/>Arrow_color));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>__MT4ORDERS__</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>__MQL5__</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>MQL4<sp/>wrapper<sp/>to<sp/>work<sp/>in<sp/>MQL5.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MQL4<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Converts<sp/>MQL4<sp/>time<sp/>periods.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>As<sp/>in<sp/>MQL5<sp/>chart<sp/>period<sp/>constants<sp/>changed,<sp/>and<sp/>some<sp/>new<sp/>time<sp/>periods<sp/>(M2,<sp/>M3,<sp/>M4,<sp/>M6,<sp/>M10,<sp/>M12,<sp/>H2,<sp/>H3,<sp/>H6,<sp/>H8,<sp/>H12)<sp/>were<sp/>added.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>Note:<sp/>In<sp/>MQL5<sp/>the<sp/>numerical<sp/>values<sp/>of<sp/>chart<sp/>timeframe<sp/>constants<sp/>(from<sp/>H1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>not<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>minutes<sp/>of<sp/>a<sp/>bar.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>E.g.<sp/>In<sp/>MQL5,<sp/>the<sp/>value<sp/>of<sp/>constant<sp/>PERIOD_H1<sp/>is<sp/>16385,<sp/>but<sp/>in<sp/>MQL4<sp/>PERIOD_H1=60.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*<sp/>@see:<sp/>https://www.mql5.com/en/articles/81</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>ENUM_TIMEFRAMES<sp/>TFMigrate(int<sp/>_tf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(_tf)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/><sp/>0:<sp/>return<sp/>(PERIOD_CURRENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/><sp/>1:<sp/>return<sp/>(PERIOD_M1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/><sp/>2:<sp/>return<sp/>(PERIOD_M2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/><sp/>3:<sp/>return<sp/>(PERIOD_M3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/><sp/>4:<sp/>return<sp/>(PERIOD_M4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/><sp/>5:<sp/>return<sp/>(PERIOD_M5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/><sp/>6:<sp/>return<sp/>(PERIOD_M6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/>10:<sp/>return<sp/>(PERIOD_M10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/>12:<sp/>return<sp/>(PERIOD_M12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/>15:<sp/>return<sp/>(PERIOD_M15);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/>30:<sp/>return<sp/>(PERIOD_M30);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/><sp/>60:<sp/>return<sp/>(PERIOD_H1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/><sp/>240:<sp/>return<sp/>(PERIOD_H4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>1440:<sp/>return<sp/>(PERIOD_D1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>10080:<sp/>return<sp/>(PERIOD_W1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>43200:<sp/>return<sp/>(PERIOD_MN1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>16385:<sp/>return<sp/>(PERIOD_H1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>16386:<sp/>return<sp/>(PERIOD_H2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>16387:<sp/>return<sp/>(PERIOD_H3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>16388:<sp/>return<sp/>(PERIOD_H4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>16390:<sp/>return<sp/>(PERIOD_H6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>16392:<sp/>return<sp/>(PERIOD_H8);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>16396:<sp/>return<sp/>(PERIOD_H12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>16408:<sp/>return<sp/>(PERIOD_D1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>32769:<sp/>return<sp/>(PERIOD_W1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>49153:<sp/>return<sp/>(PERIOD_MN1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/><sp/><sp/><sp/>return<sp/>(PERIOD_CURRENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ENUM_MA_METHOD<sp/>MethodMigrate(int<sp/>method)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch(method)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>0:<sp/>return(MODE_SMA);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1:<sp/>return(MODE_EMA);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2:<sp/>return(MODE_SMMA);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>3:<sp/>return(MODE_LWMA);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>return(MODE_SMA);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ENUM_APPLIED_PRICE<sp/>PriceMigrate(int<sp/>price)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(price)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>1:<sp/>return<sp/>(PRICE_CLOSE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>2:<sp/>return<sp/>(PRICE_OPEN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>3:<sp/>return<sp/>(PRICE_HIGH);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>4:<sp/>return<sp/>(PRICE_LOW);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>5:<sp/>return<sp/>(PRICE_MEDIAN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>6:<sp/>return<sp/>(PRICE_TYPICAL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>7:<sp/>return<sp/>(PRICE_WEIGHTED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>return<sp/>(PRICE_CLOSE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ENUM_STO_PRICE<sp/>StoFieldMigrate(int<sp/>field)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(field)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>0:<sp/>return<sp/>(STO_LOWHIGH);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/><sp/>1:<sp/>return<sp/>(STO_CLOSECLOSE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>return<sp/>(STO_LOWHIGH);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>MQL4_MQH</highlight></codeline>
    </programlisting>
    <location file="MQL4.mqh"/>
  </compounddef>
</doxygen>
