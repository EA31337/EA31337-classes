//+------------------------------------------------------------------+
//|                                                EA31337 framework |
//|                                 Copyright 2016-2023, EA31337 Ltd |
//|                                        https://ea31337.github.io |
//+------------------------------------------------------------------+

/*
 * This file is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

// Ignore processing of this file if already included.
#ifndef INDICATOR_RENKO_PROVIDER_H
#define INDICATOR_RENKO_PROVIDER_H

#ifndef __MQL__
// Allows the preprocessor to include a header file when it is needed.
#pragma once
#endif

/**
 * Candle grouping and regeneration for time-frame based candles.
 */
template <typename TV>
class ItemsHistoryRenkoCandleProvider : public ItemsHistoryCandleProvider<TV> {
  // Pointer to IndicatorTick. Used to fetch data from IndicatorTick in the hierarchy.
  IndicatorData* indi;

  // Current tick index. Effectively a number of ticks generated by attached
  // IndicatorTick.
  int tick_index;

 public:
  /**
   * Constructor.
   */
  ItemsHistoryRenkoCandleProvider(IndicatorData* _indi_tick) : indi(_indi_tick), tick_index(0) {}

  /**
   * Called when new tick was emitted from IndicatorTick-based source.
   */
  virtual void OnTick(ItemsHistory<CandleOCTOHLC<TV>, ItemsHistoryRenkoCandleProvider<TV>>* _history, int64 _time_ms,
                      float _ask, float _bid) {
    ++tick_index;

    Print("IndicatorRenko is not yet implemented!");
    DebugBreak();
  }

  /**
   * Returns current tick index. Effectively a number of ticks generated by
   * attached IndicatorTick.
   */
  int GetTickIndex() { return tick_index; }

  /**
   * Retrieves given number of items starting from the given microseconds or index (inclusive). "_dir" identifies if we
   * want previous or next items from selected starting point.
   */
  void GetItems(ItemsHistory<CandleOCTOHLC<TV>, ItemsHistoryRenkoCandleProvider<TV>>* _history, int64 _from_time_ms,
                ENUM_ITEMS_HISTORY_DIRECTION _dir, int _num_items, ARRAY_REF(CandleOCTOHLC<TV>, _out_arr)) {
    // Method is called if there is a missing item (candle) in the history. We need to regenerate it.

    Print("IndicatorRenko is not yet implemented!");
    DebugBreak();
  }
};

#endif  // INDICATOR_TF_PROVIDER_H
